script{
  // Count to 5 and return the number 5.
  /*
  fn foo() -> u32 {
    let mut x = 0;
    let mut y = 1;
    while x < 5 {
      x = x + 1;
      y = y + 1;
      x = x - 1;
      x = x + 1;
    }

    5u32
  }
  */

  enum MyEnum {
    Variant1: u32,
    Variant2: ()
  }

  fn test() {
    let x: MyEnum = MyEnum::Variant1(6 + 2);
    let y = MyEnum::Variant2;
    return;
  }


  trait MyTrait {
    fn to_implement(a: self) -> Self;
  }

  impl MyTrait for MyEnum {
    fn to_implement(a: MyEnum) -> Self {
      a
    }
  }

  struct MyStruct {
    field_1: u32,
    field_2: u32
  }

  pub fn main() -> bool {
  let a = 5;
  let z: byte = 0b01010101;
  let x: byte32 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;
  let mut b = 5 + a;
  while b < 100 {
    b = b + 1;
  }
  let a = MyStruct {
    field_1: 5u32,
    field_2: 2u32,
  };

    //let a = a.field_1 + 2;
    while false { let z = 0; }

    /*
    let z = MyEnum::Variant2;
    let z = MyEnum::Variant1(10u32);
    if true {
      let z = z.to_implement();
      return true;
    } else {
      let a = 5;
    };
    */

    true
  }

/*
  fn bar() {
    let x = 5;
    let y = x;
    let z = y;
  }
*/
}

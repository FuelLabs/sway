func_decl: eq, bool
func_decl: not, bool
func_decl: eq, bool
func_decl: neq, bool
func_decl: gt, bool
func_decl: neq, bool
func_decl: gt, bool
func_decl: neq, bool
func_decl: gt, bool
func_decl: gt, bool
func_decl: eq, bool
func_decl: neq, bool
func_decl: lt, bool
func_decl: neq, bool
func_decl: lt, bool
func_decl: neq, bool
func_decl: lt, bool
func_decl: lt, bool
func_decl: max, u32
func_decl: max, u16
func_decl: max, u8
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: binary_xor, u64
func_decl: binary_xor, u64
func_decl: binary_xor, u64
func_decl: binary_xor, u64
func_decl: gt, bool
func_decl: eq, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: subtract, u64
func_decl: rsh, u64
func_decl: lsh, u64
func_decl: subtract, u64
func_decl: lsh, u64
func_decl: rsh, u64
func_decl: divide, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: divide, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: not, bool
func_decl: not, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: gt, bool
func_decl: gt, bool
func_decl: copy_to, ()
func_decl: eq, bool
func_decl: from, ContractId
func_decl: from, ContractId
func_decl: from, ContractId
func_decl: add, raw untyped ptr
func_decl: read, T
func_decl: not, bool
func_decl: add, raw untyped ptr
func_decl: read, T
func_decl: add, raw untyped ptr
func_decl: read, raw untyped ptr
func_decl: read, T
func_decl: add, u64
func_decl: add, raw untyped ptr
func_decl: from, ContractId
func_decl: min, b256
func_decl: not, bool
func_decl: min, b256
func_decl: not, bool
func_decl: not, bool
func_decl: gt, bool
func_decl: add, raw untyped ptr
func_decl: subtract, u64
func_decl: not, bool
func_decl: add, u64
func_decl: binary_and, u64
func_decl: gt, bool
func_decl: subtract, u64
func_decl: add, raw untyped ptr
func_decl: add, u64
func_decl: eq, bool
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: le, bool
func_decl: lt, bool
func_decl: add, u64
func_decl: lt, bool
func_decl: subtract, u64
func_decl: add, u64
func_decl: subtract, u64
func_decl: lt, bool
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: lt, bool
func_decl: le, bool
func_decl: eq, bool
func_decl: add, u64
func_decl: subtract, u64
func_decl: ge, bool
func_decl: add, u64
func_decl: subtract, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: read, T
func_decl: read, b256
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: read, T
func_decl: read, T
func_decl: eq, bool
func_decl: read, T
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: from, Address
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: read, T
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: from, ContractId
func_decl: lt, bool
func_decl: add, u8
func_decl: eq, bool
func_decl: eq, bool
func_decl: is_none, bool
func_decl: add, u8
func_decl: unwrap, Address
func_decl: unwrap, Address
func_decl: eq, bool
func_decl: add, u8
func_decl: unwrap, Address
func_decl: lt, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: add, u64
func_decl: eq, bool
func_decl: eq, bool
func_decl: new, B512
func_decl: eq, bool
func_decl: unwrap, B512
func_decl: from, Address
func_decl: eq, bool
func_decl: is_null, bool
func_decl: not, bool
func_decl: is_null, bool
func_decl: not, bool
func_decl: eq, bool
func_decl: not, bool
func_decl: eq, bool
func_decl: unwrap, B512
func_decl: from, EvmAddress
func_decl: eq, bool
func_decl: binary_or, u64
func_decl: binary_and, u64
func_decl: eq, bool
func_decl: eq, bool
func_decl: gt, bool
func_decl: eq, bool
func_decl: gt, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: max, u64
func_decl: max, u64
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: from, U128
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: from, U128
func_decl: ge, bool
func_decl: new, U128
func_decl: ge, bool
func_decl: subtract, u64
func_decl: lsh, u64
func_decl: from, U128
func_decl: subtract, u64
func_decl: rsh, u64
func_decl: lsh, u64
func_decl: add, u64
func_decl: lsh, u64
func_decl: from, U128
func_decl: ge, bool
func_decl: new, U128
func_decl: ge, bool
func_decl: subtract, u64
func_decl: rsh, u64
func_decl: from, U128
func_decl: subtract, u64
func_decl: lsh, u64
func_decl: rsh, u64
func_decl: rsh, u64
func_decl: add, u64
func_decl: from, U128
func_decl: overflowing_add, U128
func_decl: eq, bool
func_decl: overflowing_add, U128
func_decl: gt, bool
func_decl: overflowing_add, U128
func_decl: eq, bool
func_decl: lt, bool
func_decl: not, bool
func_decl: subtract, u64
func_decl: lt, bool
func_decl: max, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: from, U128
func_decl: from, U128
func_decl: new, U128
func_decl: subtract, u64
func_decl: lsh, U128
func_decl: lsh, U128
func_decl: binary_and, U128
func_decl: neq, bool
func_decl: add, U128
func_decl: eq, bool
func_decl: subtract, u64
func_decl: from, U128
func_decl: from, U128
func_decl: neq, bool
func_decl: new, U128
func_decl: new, U128
func_decl: subtract, u64
func_decl: lsh, U128
func_decl: lsh, U128
func_decl: lsh, U128
func_decl: binary_and, U128
func_decl: rsh, U128
func_decl: binary_or, U128
func_decl: gt, bool
func_decl: eq, bool
func_decl: subtract, U128
func_decl: binary_or, U128
func_decl: eq, bool
func_decl: subtract, u64
func_decl: from, U128
func_decl: from, U128
func_decl: eq, bool
func_decl: binary_and, U128
func_decl: eq, bool
func_decl: multiply, U128
func_decl: rsh, U128
func_decl: eq, bool
func_decl: gt, bool
func_decl: rsh, U128
func_decl: multiply, U128
func_decl: binary_and, U128
func_decl: eq, bool
func_decl: multiply, U128
func_decl: subtract, u64
func_decl: rsh, u64
func_decl: lsh, u64
func_decl: subtract, u64
func_decl: lsh, u64
func_decl: rsh, u64
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: eq, bool
func_decl: max, u64
func_decl: max, u64
func_decl: max, u64
func_decl: max, u64
func_decl: gt, bool
func_decl: eq, bool
func_decl: gt, bool
func_decl: eq, bool
func_decl: gt, bool
func_decl: eq, bool
func_decl: gt, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: lt, bool
func_decl: decompose, (u64, u64, u64, u64)
func_decl: decompose, (u64, u64, u64, u64)
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: binary_and, u64
func_decl: from, U256
func_decl: decompose, (u64, u64, u64, u64)
func_decl: decompose, (u64, u64, u64, u64)
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: binary_or, u64
func_decl: from, U256
func_decl: decompose, (u64, u64, u64, u64)
func_decl: decompose, (u64, u64, u64, u64)
func_decl: binary_xor, u64
func_decl: binary_xor, u64
func_decl: binary_xor, u64
func_decl: binary_xor, u64
func_decl: from, U256
func_decl: decompose, (u64, u64, u64, u64)
func_decl: divide, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: lsh, u64
func_decl: from, U256
func_decl: decompose, (u64, u64, u64, u64)
func_decl: divide, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: rsh, u64
func_decl: from, U256
func_decl: decompose, (u64, u64, u64, u64)
func_decl: decompose, (u64, u64, u64, u64)
func_decl: from, U128
func_decl: from, U128
func_decl: add, U128
func_decl: from, U128
func_decl: from, U128
func_decl: add, U128
func_decl: from, U128
func_decl: add, U128
func_decl: from, U128
func_decl: from, U128
func_decl: add, U128
func_decl: from, U128
func_decl: add, U128
func_decl: from, U128
func_decl: from, U128
func_decl: add, U128
func_decl: from, U128
func_decl: add, U128
func_decl: eq, bool
func_decl: from, U256
func_decl: lt, bool
func_decl: not, bool
func_decl: decompose, (u64, u64, u64, u64)
func_decl: decompose, (u64, u64, u64, u64)
func_decl: subtract, u64
func_decl: lt, bool
func_decl: max, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: lt, bool
func_decl: max, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: lt, bool
func_decl: max, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: subtract, u64
func_decl: from, U256
func_decl: from, U256
func_decl: from, U256
func_decl: subtract, u64
func_decl: lsh, U256
func_decl: lsh, U256
func_decl: binary_and, U256
func_decl: neq, bool
func_decl: add, U256
func_decl: eq, bool
func_decl: subtract, u64
func_decl: from, U256
func_decl: from, U256
func_decl: neq, bool
func_decl: from, U256
func_decl: from, U256
func_decl: subtract, u64
func_decl: lsh, U256
func_decl: lsh, U256
func_decl: lsh, U256
func_decl: binary_and, U256
func_decl: lsh, U256
func_decl: binary_and, U256
func_decl: rsh, U256
func_decl: binary_or, U256
func_decl: gt, bool
func_decl: eq, bool
func_decl: subtract, U256
func_decl: binary_or, U256
func_decl: eq, bool
func_decl: subtract, u64
func_decl: multiply, u64
func_decl: eq, bool
func_decl: multiply, u64
func_decl: multiply, u64
func_decl: multiply, u64
func_decl: new, RawVec<T>
func_decl: with_capacity, RawVec<T>
func_decl: capacity, u64
func_decl: eq, bool
func_decl: grow, ()
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: write, ()
func_decl: add, u64
func_decl: le, bool
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: read, T
func_decl: eq, bool
func_decl: lt, bool
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: read, T
func_decl: lt, bool
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: add, raw untyped ptr
func_decl: copy_to, ()
func_decl: add, u64
func_decl: subtract, u64
func_decl: le, bool
func_decl: eq, bool
func_decl: grow, ()
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: gt, bool
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: sub, raw untyped ptr
func_decl: copy_to, ()
func_decl: subtract, u64
func_decl: write, ()
func_decl: add, u64
func_decl: eq, bool
func_decl: subtract, u64
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: read, T
func_decl: lt, bool
func_decl: lt, bool
func_decl: eq, bool
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: read, T
func_decl: copy_to, ()
func_decl: write, ()
func_decl: lt, bool
func_decl: ptr, raw untyped ptr
func_decl: multiply, u64
func_decl: add, raw untyped ptr
func_decl: write, ()
func_decl: is_empty, bool
func_decl: not, bool
func_decl: len, u64
func_decl: multiply, u64
func_decl: add, u64
func_decl: write, ()
func_decl: add, raw untyped ptr
func_decl: copy_to, ()
func_decl: lt, bool
func_decl: eq, bool
func_decl: add, u64
func_decl: ge, bool
func_decl: add, u64
func_decl: eq, bool
func_decl: lt, bool
func_decl: add, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: add, u64
func_decl: divide, u64
func_decl: eq, bool
func_decl: ge, bool
func_decl: ge, bool
func_decl: multiply, u64
func_decl: add, u64
func_decl: add, u64
func_decl: add, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: lt, bool
func_decl: add, u64
func_decl: add, u64
func_decl: gt, bool
func_decl: ge, bool
func_decl: multiply, u64
func_decl: add, u64
func_decl: add, u64
func_decl: add, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: multiply, u64
func_decl: add, u64
func_decl: modulo, u64
func_decl: eq, bool
func_decl: add, u64
func_decl: add, u64
func_decl: eq, bool
func_decl: eq, bool
B the type: Unit in main
if true: Some(
    Map {
        iter: IntoIter(
            [
                Value(
                    Index {
                        index: 617,
                        generation: 47,
                    },
                ),
            ],
        ),
    },
)
if false: Some(Map { iter: IntoIter([Value(Index { index: 615, generation: 47 })]) })

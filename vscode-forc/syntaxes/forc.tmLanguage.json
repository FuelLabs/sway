{
	"name": "Forc",
	"scopeName": "source.forc",
	"patterns": [
		{
			"comment": "Implementation",
			"begin": "\\b(impl)\\b",
			"end": "\\{",
			"beginCaptures": {
				"1": {
					"name": "storage.type.forc"
				}
			},
			"patterns": [
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				},
				{
					"include": "#sigils"
				},
				{
					"include": "#mut"
				},
				{
					"include": "#core_types"
				},
				{
					"include": "#type_params"
				},
				{
					"include": "#where"
				},
				{
					"name": "storage.type.forc",
					"match": "\\bfor\\b"
				},
				{
					"include": "#type"
				}
			]
		},
		{
			"include": "#block_doc_comment"
		},
		{
			"include": "#block_comment"
		},
		{
			"include": "#line_doc_comment"
		},
		{
			"include": "#line_comment"
		},
		{
			"comment": "Integer literal (decimal)",
			"name": "constant.numeric.integer.forc",
			"match": "\\b[0-9][0-9_]*([u](8|16|32|64|128))?\\b"
		},
		{
			"comment": "Integer literal (hexadecimal)",
			"name": "constant.numeric.integer.hexadecimal.forc",
			"match": "\\b0x[a-fA-F0-9_]+([u](8|16|32|64|128))?\\b"
		},
		{
			"comment": "Integer literal (binary)",
			"name": "constant.numeric.integer.binary.forc",
			"match": "\\b0b[01_]+([u](8|16|32|64|128))?\\b"
		},
		{
			"comment": "Boolean constant",
			"name": "constant.language.boolean.forc",
			"match": "\\b(true|false)\\b"
		},
		{
			"comment": "Control keyword",
			"name": "keyword.control.forc",
			"match": "\\b(else|if|for|match|return|while)\\b"
		},
		{
			"comment": "Keyword",
			"name": "keyword.other.forc",
			"match": "\\b(deref|let|ref|use|asm)\\b"
		},
		{
			"include": "#sigils"
		},
		{
			"include": "#self"
		},
		{
			"include": "#mut"
		},
		{
			"include": "#impl"
		},
		{
			"include": "#pub"
		},
		{
			"comment": "Miscellaneous operator",
			"name": "keyword.operator.misc.forc",
			"match": "(=>|::|->\\?)"
		},
		{
			"comment": "Comparison operator",
			"name": "keyword.operator.comparison.forc",
			"match": "(&&|\\|\\||==|!=)"
		},
		{
			"comment": "Assignment operator",
			"name": "keyword.operator.assignment.forc",
			"match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)"
		},
		{
			"comment": "Arithmetic operator",
			"name": "keyword.operator.arithmetic.forc",
			"match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)"
		},
		{
			"comment": "Comparison operator (second group because of regex precedence)",
			"name": "keyword.operator.comparison.forc",
			"match": "(<=|>=|<|>)"
		},
		{
			"include": "#core_types"
		},
		{
			"comment": "Function call",
			"match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.forc"
				}
			}
		},
		{
			"comment": "Function call with type parameters",
			"begin": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*(::)(?=\\s*<.*>\\s*\\()",
			"end": "\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.forc"
				},
				"2": {
					"name": "keyword.operator.misc.forc"
				}
			},
			"patterns": [
				{
					"include": "#type_params"
				}
			]
		},
		{
			"comment": "Function definition",
			"begin": "\\b(fn)\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)",
			"end": "[\\{;]",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.fn.forc"
				},
				"2": {
					"name": "entity.name.function.forc"
				}
			},
			"patterns": [
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				},
				{
					"include": "#sigils"
				},
				{
					"include": "#self"
				},
				{
					"include": "#mut"
				},
				{
					"include": "#impl"
				},
				{
					"include": "#core_types"
				},
				{
					"include": "#type_params"
				},
				{
					"include": "#where"
				},
				{
					"comment": "Function arguments",
					"match": "\bfn\b",
					"name": "keyword.other.fn.forc"
				}
			]
		},
		{
			"comment": "Top level declaration",
			"begin": "\\b(library|contract|script|predicate)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "[\\{\\(;]",
			"beginCaptures": {
				"1": {
					"name": "storage.type.forc"
				},
				"2": {
					"name": "entity.name.type.forc"
				}
			},
			"patterns": [
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				},
				{
					"include": "#impl"
				},
				{
					"include": "#type_params"
				},
				{
					"include": "#core_types"
				},
				{
					"include": "#pub"
				},
				{
					"include": "#where"
				}
			]
		},
		{
			"comment": "Type declaration",
			"begin": "\\b(enum|struct|trait)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "[\\{\\(;]",
			"beginCaptures": {
				"1": {
					"name": "storage.type.forc"
				},
				"2": {
					"name": "entity.name.type.forc"
				}
			},
			"patterns": [
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				},
				{
					"include": "#type_params"
				},
				{
					"include": "#core_types"
				},
				{
					"include": "#pub"
				},
				{
					"include": "#where"
				}
			]
		}
	],
	"repository": {
		"block_doc_comment": {
			"comment": "Block documentation comment",
			"name": "comment.block.documentation.forc",
			"begin": "/\\*[\\*!](?![\\*/])",
			"end": "\\*/",
			"patterns": [
				{
					"include": "#block_doc_comment"
				},
				{
					"include": "#block_comment"
				}
			]
		},
		"block_comment": {
			"comment": "Block comment",
			"name": "comment.block.forc",
			"begin": "/\\*",
			"end": "\\*/",
			"patterns": [
				{
					"include": "#block_doc_comment"
				},
				{
					"include": "#block_comment"
				}
			]
		},
		"line_doc_comment": {
			"comment": "Single-line documentation comment",
			"name": "comment.line.documentation.forc",
			"begin": "//[!/](?=[^/])",
			"end": "$"
		},
		"line_comment": {
			"comment": "Single-line comment",
			"name": "comment.line.double-slash.forc",
			"begin": "//",
			"end": "$"
		},
		"escaped_character": {
			"name": "constant.character.escape.forc",
			"match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)"
		},
		"string_literal": {
			"comment": "Double-quote string literal",
			"name": "string.quoted.double.forc",
			"begin": "b?\"",
			"end": "\"",
			"patterns": [
				{
					"include": "#escaped_character"
				}
			]
		},
		"sigils": {
			"comment": "Sigil",
			"name": "keyword.operator.sigil.forc",
			"match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"]+)"
		},
		"self": {
			"comment": "Self variable",
			"name": "variable.language.forc",
			"match": "\\bself\\b"
		},
		"mut": {
			"comment": "Mutable storage modifier",
			"name": "storage.modifier.mut.forc",
			"match": "\\bmut\\b"
		},
		"impl": {
			"comment": "Existential type modifier",
			"name": "storage.modifier.impl.forc",
			"match": "\\bimpl\\b"
		},
		"pub": {
			"comment": "Visibility modifier",
			"name": "storage.modifier.visibility.forc",
			"match": "\\bpub\\b"
		},
		"where": {
			"comment": "Generic where clause",
			"name": "keyword.other.where.forc",
			"match": "\\bwhere\\b"
		},
		"core_types": {
			"comment": "Built-in/core type",
			"name": "support.type.primitive.forc",
			"match": "\\b(bool|char|u8|u16|u32|u64|u128|string|Self)\\b"
		},
		"type": {
			"comment": "A type",
			"name": "entity.name.type.forc",
			"match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b"
		},
		"type_params": {
			"comment": "Type parameters",
			"name": "meta.type_params.forc",
			"begin": "<(?![=<])",
			"end": "(?<![-])>",
			"patterns": [
				{
					"include": "#block_comment"
				},
				{
					"include": "#line_comment"
				},
				{
					"include": "#sigils"
				},
				{
					"include": "#mut"
				},
				{
					"include": "#impl"
				},
				{
					"include": "#core_types"
				},
				{
					"include": "#type_params"
				}
			]
		}
	}
}
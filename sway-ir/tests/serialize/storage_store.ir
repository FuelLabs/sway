// regex: VAR=v\d+

contract {
// check: fn set_x
    fn set_x<1b9b478f>() -> () {
        local b256 key_for_x
        local u64 value_for_x

        entry():
        v0 = get_local ptr u64, value_for_x
        v1 = const u64 0
        store v1 to v0
        v2 = get_local ptr b256, key_for_x
        v3 = const b256 0x7fbd1192666bfac3767b890bd4d048c940879d316071e20c7c8c81bce2ca41c5
        store v3 to v2
        v4 = const u64 0
// check: state_store_word $VAR, key $VAR
        state_store_word v4, key v2
        v5 = const unit ()
        ret () v5
    }

// check fn set_y
    fn set_y<858a3d18>() -> () {
        local b256 key_for_y
        local b256 value_for_y

        entry():
        v0 = get_local ptr b256, value_for_y
        v1 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        store v1 to v0
        v2 = get_local ptr b256, key_for_y
        v3 = const b256 0xa15d6d36b54df993ed1fbe4544a45d4c4f70d81b4229861dfde0e20eb652202c
        store v3 to v2
        v4 = get_local ptr b256, value_for_y
        v5 = const u64 1
// check: state_store_quad_word $VAR, key $VAR, $VAR
        state_store_quad_word v4, key v2, v5
        v6 = const unit ()
        ret () v6
    }
}

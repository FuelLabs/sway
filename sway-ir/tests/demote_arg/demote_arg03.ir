script {
    entry fn main() -> () {
        local b256 twobee = const b256 0x2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
        local b256 dada = const b256 0xdadadadadadadadadadadadadadadadadadadadadadadadadadadadadadadada
        local b256 tmp

        block0():
        v0 = get_local ptr b256, twobee
        v1 = load v0
        v2 = get_local ptr b256, dada
        v3 = load v2
        v4 = const bool false
        v5 = call a(v4, v1, v3)
        v6 = get_local ptr b256, tmp
        store v5 to v6
        v7 = const unit ()
        ret () v7
    }

    fn a(p: bool, a: b256, b: b256) -> b256 {
        entry(p: bool, a: b256, b: b256):
        cbr p, block2(a), block1()

        block1():
        br block2(b)

        block2(v0: b256):
        ret b256 v0
    }
}

// regex: ID=[[:alpha:]_0-9]+

// check: fn a(p: bool, $(a_arg=$ID): ptr b256, $(b_arg=$ID): ptr b256) -> b256 {
// check: local b256 $(tmp_blk_arg=$ID)

// check: entry(p: bool, $a_arg: ptr b256, $b_arg: ptr b256):
// check: $(load_a_val=$ID) = load $a_arg
// check: $(load_b_val=$ID) = load $b_arg
// check: $(get_local_val=$ID) = get_local ptr b256, $tmp_blk_arg
// check: store $load_a_val to $get_local_val
// check: cbr p, block2($get_local_val), block1()

// check: block1():
// check: $(get_local_val=$ID) = get_local ptr b256, $tmp_blk_arg
// check: store $load_b_val to $get_local_val
// check: br block2($get_local_val)

// check: block2($(block2_arg=$ID): ptr b256):
// check: $(load_val=$ID) = load $block2_arg
// check: ret b256 $load_val

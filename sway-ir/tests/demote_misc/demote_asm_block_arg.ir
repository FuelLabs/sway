script {
    entry fn main() -> bool {
        entry():
        v0 = const b256 0x2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
        v1 = const b256 0x2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c
        v2 = asm(r1: v0, r2: v1, r3, r4) -> bool r4 {
            addi   r3 zero i32
            meq    r4 r1 r2 r3
        }
        ret bool v2
    }
}

// regex: VAL=v\d+
// regex: ID=[[:alpha:]0-9_]+

// check: $(arg_0=$VAL) = get_local ptr b256, $ID
// check: $(cval_0=$VAL) = const b256 0x2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
// check: store $cval_0 to $arg_0

// check: $(arg_1=$VAL) = get_local ptr b256, __asm_arg0
// check: $(cval_1=$VAL) = const b256 0x2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c2c
// check: store $cval_1 to $arg_1

// check: $VAL = asm(r1: $arg_0, r2: $arg_1, r3, r4) -> bool r4

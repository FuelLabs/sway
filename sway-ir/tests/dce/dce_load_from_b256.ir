// The IR code represents the below function.
// The unused local `x` must be optimized away.
//
// fn main() {
//    let local = 0x1f212e1f2e7b5a8cff18d994b7b7faa61db1a89cbf697facc518f6b6c8430196;
//    let x = take_b256(local);
// }

script {
    entry fn main() -> () {
        local b256 x
        local b256 local

        entry():
        v0 = get_local ptr b256, local
        v1 = const b256 0x1f212e1f2e7b5a8cff18d994b7b7faa61db1a89cbf697facc518f6b6c8430196
        store v1 to v0
        v2 = get_local ptr b256, local
        v3 = load v2
        v4 = call take_b256_2(v3)
        v5 = get_local ptr b256, x
        store v4 to v5
        v6 = const unit ()
        ret () v6
    }

    fn take_b256_2(_x: b256) -> b256 {
        entry(_x: b256):
        v0 = const b256 0x0000000000000000000000000000000000000000000000000000000000000000
        ret b256 v0
    }
}

// check: entry fn main() -> () {
// not: local b256 x
// check: entry():
// not: get_local ptr b256, x
// check: ret ()

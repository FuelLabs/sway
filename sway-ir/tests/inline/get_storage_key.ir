// all
//
// regex: VAR=v\d+
// regex: MD=!\d+
// regex: LABEL=[[:alpha:]0-9_]+

contract {
    fn test<58d7eb51>() -> b256, !1 {
        local {  } __anon_0
        local b256 __ret_val_f_0

        entry():
        v0 = get_local {  } __anon_0
        v1 = get_local b256 __ret_val_f_0
        v2 = call f_0(v0, v1), !5
        ret b256 v2
    }

    fn f_0(self !6: {  }, inout __ret_value !7: b256) -> b256, !8 {
        entry(self: {  }, inout __ret_value: b256):
        v0 = get_storage_key, !9
        mem_copy __ret_value, v0, 32
        ret b256 __ret_value
    }
}

!0 = "get_storage_key.sw"
!1 = span !0 218 265
!2 = span !0 254 255
!3 = span !0 246 259
!4 = state_index 42
!5 = (!3 !4)
!6 = span !0 42 46
!7 = span !0 51 55
!8 = span !0 37 91
!9 = span !0 66 85

// check: fn test<58d7eb51>() -> b256

// not: call
// check: $(stk_val=$VAR) = get_storage_key, $(stk_md=$MD)

// check: mem_copy $(block_arg=$VAR), $VAR, 32
// check: br $(ret_block=$LABEL)($block_arg)

// check: $ret_block($(ret_val=$VAR): b256):
// check: ret b256 $ret_val

// check: $(si_md=$MD) = state_index 42
// check: $stk_md = (
// sameln: $si_md

// all
//
// regex: VAR=v\d+
// regex: LABEL=[[:alpha:]0-9_]+

script {
    fn a(b: u64, inout __ret_value: b256) -> b256 {
        entry(b: u64, inout __ret_value: b256):
        v0 = int_to_ptr b to b256
        mem_copy __ret_value, v0, 32
        ret b256 __ret_value
    }

    fn main() -> b256 {
// check: fn main
        local b256 __ret_val_a

        entry():
        v0 = get_local b256 __ret_val_a
        v1 = const u64 11

// check: $(retv=$VAR) = get_local b256 __ret_val_a
// check: $(arg0=$VAR) = const u64 11

        v2 = call a(v1, v0)
// not: call

// check: $(ret_ptr=$VAR) = int_to_ptr $arg0 to b256
// check: mem_copy $retv, $ret_ptr, 32
// check: br $(ret_block=$LABEL)($retv)

        ret b256 v0
// check: $ret_block($VAR: b256)
// check: ret b256
    }
}

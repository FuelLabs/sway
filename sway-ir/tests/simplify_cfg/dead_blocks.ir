// regex: ID=[[:alpha:]0-9]+

script {
    fn main() -> u64 {
        local ptr u64 x

        entry:
        call foo()
        call bar()
        call baz()
        v0 = get_ptr ptr u64 x, ptr u64, 0
// check: const u64 11
        v1 = const u64 11
        store v1, ptr v0
        br block1

        // Dead block, no predecessors.
        block0:
        v1 = phi(entry: v0)
// not: const u64 22
        v2 = const u64 22
        store v2, ptr v0
        br block1

        block1:
        v3 = phi(entry: v0)
// check: const u64 33
        v4 = const u64 33
        ret u64 v4
    }

    // Although block0 is empty here, it mustn't be removed
    // as it acts as a way to produce different values for the PHI.
    fn foo(b: bool) -> bool {
        // check: entry
        entry:
        c2 = const u64 100
        cbr b, block0, block1

        // check: block0:
        block0:
        c1 = const u64 333
        br block1

        block1:
        v1 = phi(block0: c1, entry: c2)
        ret bool b
    }

    fn bar(b: bool) -> bool {
        // check: entry
        entry:
        c2 = const u64 100
        cbr b, block0, block2

        // check: block0:
        block0:
        // The const from block1 will come here when block1 goes.
        // check: const u64 333
        // check: br block2
        br block1

        // not: block1:
        block1:
        c1 = const u64 333
        br block2

        block2:
        v1 = phi(block1: c1, entry: c2)
        ret bool b
    }

    fn baz(b: bool) -> bool {
        // check: entry
        entry:
        c2 = const u64 100
        cbr b, block0, block2

        block0:
        // check: $(v=$ID) = const u64 11
        v3 = const u64 11
        br block1

        block1:
        v2 = phi(block0: v3)
        br block2

        block2:
        // check: phi(block0: $v, entry: 
        v1 = phi(block1: v2, entry: c2)
        ret bool b
    }
}


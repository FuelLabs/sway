script {
use std::*;
  struct Rgb {
    red: u64,
    green: u64,
    blue: u64,
  }

    trait Color {
      fn rgb(self) -> Rgb;
    }

    enum PrimaryColor {
       Red : (),
       Green : (),
       Blue : ()
    }

impl std::ops::Eq for PrimaryColor {
  fn equals(self, other: Self) -> bool {
   asm(r1: self, other: self) {
      eq r2 r1 other;
      r2: bool
    }
  }
}
    impl Color for PrimaryColor {
  // TODO: when we support match statements, change this to a match statement
  fn rgb(self) -> Rgb {
    if self == PrimaryColor::Red {
      Rgb { 
        red: 255,
        blue: 0,
        green: 0,
      }
    }
    else if self == PrimaryColor::Green {
      Rgb {
        red: 0,
        blue: 0,
        green: 255,
      }
    }
    else if self == PrimaryColor::Blue {
      Rgb {
        red: 0,
        blue: 255,
        green: 0,
      }
    }
    // TODO remove this else when exhaustive ifs are checked for
     else {
       Rgb {
         red: 0,
         green: 0,
         blue: 0,
       }
     }
   }
}

  fn main() {
    let first_color: PrimaryColor = PrimaryColor::Green;
        let rgb: Rgb = first_color.rgb();
    }
}

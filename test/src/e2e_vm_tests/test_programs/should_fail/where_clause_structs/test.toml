category = "fail"

# check: $()impl<T> Option<MyPoint<T>> {
# nextln:$()Expects trait constraint "T: MyAdd" which is missing from type parameter "T".

# check: $()impl<T> MyPoint<Option<T>> {
# nextln: $()Trait "MyAdd" is not implemented for type "Option<T>".

# check: $()fn add2<G>(v: G, p: MyPoint<G>) -> G {
# nextln: $()Expects trait constraint "G: MyAdd" which is missing from type parameter "G".

# check: $()fn add1<T>(point: MyPoint<T>, v: T) -> T {
# nextln: $()Expects trait constraint "T: MyAdd" which is missing from type parameter "T".

# check: $()MyPoint {
# nextln: $()
# nextln: $()
# nextln: $()
# nextln: $()
# nextln: $()Expects trait constraint "T: MyAdd" which is missing from type parameter "T".

# check: $()fn add2<T>(v: T) -> MyPoint<T> {
# nextln: $()Expects trait constraint "T: MyAdd" which is missing from type parameter "T".

# check: $()let p = MyPoint {
# nextln: $()
# nextln: $()
# nextln: $()
# nextln: $()
# nextln: $()Expects trait constraint "T: MyAdd" which is missing from type parameter "T".

# check: $()let bar = MyPoint {
# nextln: $()
# nextln: $()
# nextln: $()
# nextln: $()
# nextln: $()Trait "MyAdd" is not implemented for type "u64".

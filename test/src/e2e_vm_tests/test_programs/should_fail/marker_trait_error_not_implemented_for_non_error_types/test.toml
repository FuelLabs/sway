category = "fail"
experimental = { error_type = true }

#check: $()error
#check: $()implements_error(0u64);
#nextln: $()Trait "Error" is not implemented for type "u64".

#check: $()error
#check: $()implements_error_no_args::<u64>();
#nextln: $()Trait "Error" is not implemented for type "u64".

#check: $()error
#check: $()implements_error(Struct { x: 0 });
#nextln: $()Trait "Error" is not implemented for type "Struct".

#check: $()error
#check: $()implements_error_no_args::<Struct>();
#nextln: $()Trait "Error" is not implemented for type "Struct".

#check: $()error
#check: $()implements_error(EmptyStruct { });
#nextln: $()Trait "Error" is not implemented for type "EmptyStruct".

#check: $()error
#check: $()implements_error_no_args::<EmptyStruct>();
#nextln: $()Trait "Error" is not implemented for type "EmptyStruct".

#check: $()error
#check: $()implements_error([0u8, 0, 0]);
#nextln: $()Trait "Error" is not implemented for type "[u8; 3]".

#check: $()error
#check: $()implements_error_no_args::<[u8;3]>();
#nextln: $()Trait "Error" is not implemented for type "[u8; 3]".

#check: $()error
#check: $()implements_error((0, 0, 0));
#nextln: $()Trait "Error" is not implemented for type "(u64, u64, u64)".

#check: $()error
#check: $()implements_error_no_args::<(u64,u64,u64)>();
#nextln: $()Trait "Error" is not implemented for type "(u64, u64, u64)".

#check: $()error
#check: $()implements_error(Enum::A);
#nextln: $()Trait "Error" is not implemented for type "Enum".

#check: $()error
#check: $()implements_error_no_args::<Enum>();
#nextln: $()Trait "Error" is not implemented for type "Enum".


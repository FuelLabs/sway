script {
    fn main() -> (), !1 {
        local mut ptr u64 i
        local ptr u64 m

        entry:
        v0 = get_ptr ptr u64 m, ptr u64, 0, !2
        v1 = const u64 5, !3
        store v1, ptr v0, !2
        v2 = get_ptr mut ptr u64 i, ptr u64, 0, !4
        v3 = const u64 0, !5
        store v3, ptr v2, !4
        br while

        while:
        v4 = get_ptr mut ptr u64 i, ptr u64, 0, !6
        v5 = load ptr v4, !6
        v6 = const u64 10, !7
        v7 = asm(r1: v5, r2: v6, r3) -> bool r3, !9 {
            lt     r3 r1 r2, !10
        }
        br block3

        block3:
        v8 = phi(while: v7)
        cbr v8, while_body, end_while

        while_body:
        v9 = get_ptr mut ptr u64 i, ptr u64, 0, !11
        v10 = get_ptr mut ptr u64 i, ptr u64, 0, !12
        v11 = load ptr v10, !12
        v12 = const u64 1, !13
        v13 = asm(r1: v11, r2: v12, r3) -> u64 r3, !14 {
            add    r3 r2 r1, !15
        }
        br block4

        block4:
        v14 = phi(while_body: v13)
        store v14, ptr v9, !11
        v15 = get_ptr mut ptr u64 i, ptr u64, 0, !16
        v16 = load ptr v15, !16
        v17 = get_ptr ptr u64 m, ptr u64, 0, !17
        v18 = load ptr v17, !17
        v19 = asm(r1: v16, r2: v18, r3) -> bool r3, !18 {
            gt     r3 r1 r2, !19
        }
        br block5

        block5:
        v20 = phi(block4: v19)
        cbr v20, block0, block1, !20

        end_while:
        v21 = const unit ()
        ret () v21

        block0:
        br end_while
        br block2

        block1:
        v22 = const unit ()
        br block2

        block2:
        v24 = phi(block0: v23, block1: v22)
        br while
    }

    fn anon_0(self !21: u64, other !22: u64) -> u64, !23 {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> u64 r3, !14 {
            add    r3 r2 r1, !15
        }
        ret u64 v0
    }

    fn anon_1(self !24: u64, other !25: u64) -> bool, !26 {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> bool r3, !18 {
            gt     r3 r1 r2, !19
        }
        ret bool v0
    }

    fn anon_2(self !27: u64, other !28: u64) -> bool, !29 {
        entry:
        v0 = asm(r1: self, r2: other, r3) -> bool r3, !9 {
            lt     r3 r1 r2, !10
        }
        ret bool v0
    }
}

!0 = filepath "/Users/mohammad/Desktop/fuel/sway/test/src/e2e_vm_tests/test_programs/should_pass/language/break_and_continue/src/main.sw"
!1 = span !0 9 145
!2 = span !0 25 35
!3 = span !0 33 34
!4 = span !0 40 54
!5 = span !0 52 53
!6 = span !0 65 66
!7 = span !0 69 71
!8 = filepath "/Users/mohammad/Desktop/fuel/sway/sway-lib-core/src/ops.sw"
!9 = span !8 5203 5289
!10 = span !8 5246 5257
!11 = span !0 82 88
!12 = span !0 82 83
!13 = span !0 87 88
!14 = span !8 139 225
!15 = span !8 182 194
!16 = span !0 101 102
!17 = span !0 105 106
!18 = span !8 5063 5149
!19 = span !8 5106 5117
!20 = span !0 101 106
!21 = span !8 102 106
!22 = span !8 108 113
!23 = span !8 98 101
!24 = span !8 5026 5030
!25 = span !8 5032 5037
!26 = span !8 5023 5025
!27 = span !8 5166 5170
!28 = span !8 5172 5177
!29 = span !8 5163 5165


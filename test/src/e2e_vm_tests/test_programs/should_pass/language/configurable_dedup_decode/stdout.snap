---
source: test/src/snapshot/mod.rs
assertion_line: 162
---
> forc build --path test/src/e2e_vm_tests/test_programs/should_pass/language/configurable_dedup_decode --release --ir final --asm final
exit status: 0
output:
    Building test/src/e2e_vm_tests/test_programs/should_pass/language/configurable_dedup_decode
   Compiling library std (sway-lib-std)
// IR: Final
library {
}

   Compiling script configurable_dedup_decode (test/src/e2e_vm_tests/test_programs/should_pass/language/configurable_dedup_decode)
// IR: Final
script {
    TUPLE = config { u64 }, abi_decode_in_place_0, 0x0000000000000002, !1
    WRAPPED = config { u64 }, abi_decode_in_place_0, 0x0000000000000001, !2

    pub fn abi_decode_in_place_0(ptr !4: ptr, len !5: u64, target !6: ptr) -> (), !10 {
        local { ptr } __anon_0
        local { u64 } __anon_00
        local mut { ptr } buffer
        local { u64 } temp

        entry(ptr: ptr, len: u64, target: ptr):
        v0 = get_local __ptr { ptr }, __anon_0, !14
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr ptr, v1, !15
        store ptr to v2, !16
        v3 = get_local __ptr { ptr }, buffer, !17
        mem_copy_val v3, v0
        v4 = get_local __ptr { ptr }, buffer, !18
        v5 = const u64 0
        v6 = get_elem_ptr v4, __ptr ptr, v5, !26
        v7 = load v6, !27
        v8 = asm(ptr: v7, val) -> u64 val, !29 {
            lw     val ptr i0, !30
        }
        v9 = load v6, !31
        v10 = const u64 8, !32
        v11 = add v9, v10, !33
        store v11 to v6, !35
        v12 = get_local __ptr { u64 }, __anon_00, !37
        v13 = const u64 0
        v14 = get_elem_ptr v12, __ptr u64, v13, !38
        store v8 to v14, !39
        v15 = get_local __ptr { u64 }, temp, !40
        mem_copy_val v15, v12
        v16 = get_local __ptr { u64 }, temp, !41
        v17 = cast_ptr v16 to ptr, !42
        v18 = const u64 8
        v19 = asm(target: target, temp: v17, size: v18) -> (), !43 {
            mcp    target temp size, !44
        }
        v20 = const unit ()
        ret () v20
    }

    pub entry fn __entry() -> __ptr slice, !48 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local mut { ptr, u64, u64 } __aggr_memcpy_00
        local mut { ptr, u64, u64 } __aggr_memcpy_01
        local mut { ptr, u64, u64 } __aggr_memcpy_02
        local mut slice __aggr_memcpy_03
        local { ptr, u64, u64 } __anon_0
        local { ptr, u64, u64 } __anon_00
        local { ptr, u64, u64 } __anon_01
        local { { ptr, u64, u64 } } __anon_1
        local { ptr, u64, u64 } __anon_10
        local { u64, u64 } __anon_11
        local { { ptr, u64, u64 } } __anon_2
        local slice __ret_value
        local { { ptr, u64, u64 } } buffer
        local { { ptr, u64, u64 } } buffer_
        local { { ptr, u64, u64 } } self_0

        entry():
        v0 = get_local __ptr slice, __ret_value
        v1 = call main_8(), !51
        v2 = const u64 1024
        v3 = asm(cap: v2) -> u64 hp, !56 {
            aloc   cap
        }
        v4 = int_to_ptr v3 to ptr, !57
        v5 = get_local __ptr { ptr, u64, u64 }, __anon_0, !58
        v6 = const u64 0
        v7 = get_elem_ptr v5, __ptr ptr, v6, !59
        store v4 to v7, !60
        v8 = const u64 1
        v9 = get_elem_ptr v5, __ptr u64, v8, !61
        store v2 to v9, !62
        v10 = const u64 2
        v11 = get_elem_ptr v5, __ptr u64, v10, !63
        v12 = const u64 0
        store v12 to v11, !64
        v13 = asm(buffer: v5) -> __ptr { ptr, u64, u64 } buffer {
        }
        v14 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v14, v13
        v15 = get_local __ptr { { ptr, u64, u64 } }, __anon_1, !66
        v16 = const u64 0
        v17 = get_elem_ptr v15, __ptr { ptr, u64, u64 }, v16, !67
        mem_copy_val v17, v14
        v18 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !70
        mem_copy_val v18, v15
        v19 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !72
        v20 = const u64 0
        v21 = get_elem_ptr v19, __ptr { ptr, u64, u64 }, v20, !74
        v22 = asm(buffer: v21) -> __ptr { ptr, u64, u64 } buffer {
        }
        v23 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v23, v22
        v24 = get_local __ptr { ptr, u64, u64 }, __anon_00, !75
        mem_copy_val v24, v23
        v25 = const u64 0
        v26 = get_elem_ptr v24, __ptr ptr, v25, !76
        v27 = load v26, !77
        v28 = const u64 1
        v29 = get_elem_ptr v24, __ptr u64, v28, !78
        v30 = load v29, !79
        v31 = const u64 2
        v32 = get_elem_ptr v24, __ptr u64, v31, !80
        v33 = load v32, !81
        v34 = const u64 8
        v35 = add v33, v34, !82
        v36 = cmp gt v35 v30, !83
        cbr v36, encode_10_abi_encode_11_block1(), encode_10_abi_encode_11_block0(v27, v30), !84

        encode_10_abi_encode_11_block0(v37: ptr, v38: u64):
        v39 = add v37, v33, !85
        v40 = cast_ptr v39 to __ptr u64, !86
        store v1 to v40, !87
        v41 = get_local __ptr { ptr, u64, u64 }, __anon_10, !88
        v42 = const u64 0
        v43 = get_elem_ptr v41, __ptr ptr, v42, !89
        store v37 to v43, !90
        v44 = const u64 1
        v45 = get_elem_ptr v41, __ptr u64, v44, !91
        store v38 to v45, !92
        v46 = const u64 2
        v47 = get_elem_ptr v41, __ptr u64, v46, !93
        store v35 to v47, !94
        v48 = asm(buffer: v41) -> __ptr { ptr, u64, u64 } buffer {
        }
        v49 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_01
        mem_copy_val v49, v48
        v50 = get_local __ptr { { ptr, u64, u64 } }, __anon_2, !96
        v51 = const u64 0
        v52 = get_elem_ptr v50, __ptr { ptr, u64, u64 }, v51, !97
        mem_copy_val v52, v49
        v53 = get_local __ptr { { ptr, u64, u64 } }, buffer, !99
        mem_copy_val v53, v50
        v54 = get_local __ptr { { ptr, u64, u64 } }, buffer, !101
        v55 = get_local __ptr { { ptr, u64, u64 } }, self_0, !104
        mem_copy_val v55, v54
        v56 = get_local __ptr { { ptr, u64, u64 } }, self_0, !106
        v57 = const u64 0
        v58 = get_elem_ptr v56, __ptr { ptr, u64, u64 }, v57, !107
        v59 = asm(buffer: v58) -> __ptr { ptr, u64, u64 } buffer {
        }
        v60 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_02
        mem_copy_val v60, v59
        v61 = get_local __ptr { ptr, u64, u64 }, __anon_01, !108
        mem_copy_val v61, v60
        v62 = const u64 0
        v63 = get_elem_ptr v61, __ptr ptr, v62, !109
        v64 = load v63, !110
        v65 = const u64 2
        v66 = get_elem_ptr v61, __ptr u64, v65, !111
        v67 = ptr_to_int v64 to u64, !112
        v68 = get_local __ptr { u64, u64 }, __anon_11, !113
        v69 = const u64 0
        v70 = get_elem_ptr v68, __ptr u64, v69, !114
        store v67 to v70, !115
        v71 = const u64 1
        v72 = get_elem_ptr v68, __ptr u64, v71, !116
        mem_copy_val v72, v66
        v73 = asm(s: v68) -> __ptr slice s {
        }
        v74 = get_local __ptr slice, __aggr_memcpy_03
        mem_copy_val v74, v73
        mem_copy_val v0, v74
        ret __ptr slice v0

        encode_10_abi_encode_11_block1():
        v75 = const u64 2
        v76 = mul v30, v75, !117
        v77 = add v76, v34, !118
        v78 = asm(new_cap: v77, old_ptr: v27, len: v33) -> __ptr u8 hp, !119 {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br encode_10_abi_encode_11_block0(v78, v77), !120
    }

    entry_orig fn main_8() -> u64, !123 {
        entry():
        v0 = get_config __ptr { u64 }, WRAPPED, !124
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr u64, v1, !125
        v3 = load v2
        v4 = get_config __ptr { u64 }, TUPLE, !126
        v5 = const u64 0
        v6 = get_elem_ptr v4, __ptr u64, v5, !127
        v7 = load v6
        v8 = add v3, v7, !130
        ret u64 v8
    }
}

!0 = "test/src/e2e_vm_tests/test_programs/should_pass/language/configurable_dedup_decode/src/main.sw"
!1 = span !0 177 182
!2 = span !0 136 143
!3 = "sway-lib-std/src/codec.sw"
!4 = span !3 68054 68057
!5 = span !3 68068 68071
!6 = span !3 68078 68084
!7 = span !3 68024 68357
!8 = fn_name_span !3 68031 68050
!9 = inline "never"
!10 = (!7 !8 !9)
!11 = span !3 68142 68176
!12 = fn_call_path_span !3 68142 68166
!13 = span !3 735 755
!14 = (!11 !12 !13)
!15 = (!11 !12)
!16 = (!11 !12 !13)
!17 = span !3 68125 68177
!18 = span !3 68207 68213
!19 = span !3 68193 68214
!20 = fn_call_path_span !3 68193 68206
!21 = span !3 108707 108728
!22 = fn_call_path_span !3 108707 108720
!23 = span !3 68806 68834
!24 = fn_call_path_span !3 68813 68825
!25 = span !3 625 637
!26 = (!19 !20 !21 !22 !23 !24 !25)
!27 = (!19 !20 !21 !22 !23 !24)
!28 = span !3 2766 2847
!29 = (!19 !20 !21 !22 !23 !24 !28)
!30 = span !3 2804 2817
!31 = (!19 !20 !21 !22 !23 !24)
!32 = (!19 !20 !21 !22 !23 !24)
!33 = (!19 !20 !21 !22 !23 !24)
!34 = span !3 2857 2896
!35 = (!19 !20 !21 !22 !23 !24 !34)
!36 = span !3 108706 108731
!37 = (!19 !20 !36)
!38 = (!19 !20 !36)
!39 = (!19 !20 !36)
!40 = span !3 68182 68215
!41 = span !3 68273 68277
!42 = span !3 68263 68278
!43 = span !3 68220 68355
!44 = span !3 68328 68348
!45 = "test/src/e2e_vm_tests/test_programs/should_pass/language/configurable_dedup_decode/src/main.<autogenerated>.sw"
!46 = span !45 0 125
!47 = fn_name_span !45 7 14
!48 = (!46 !47)
!49 = span !45 66 72
!50 = fn_call_path_span !45 66 70
!51 = (!49 !50)
!52 = span !45 90 111
!53 = fn_call_path_span !45 90 96
!54 = span !3 67770 67783
!55 = fn_call_path_span !3 67770 67781
!56 = (!52 !53 !54 !55)
!57 = (!52 !53 !54 !55)
!58 = (!52 !53 !54 !55)
!59 = (!52 !53 !54 !55)
!60 = (!52 !53 !54 !55)
!61 = (!52 !53 !54 !55)
!62 = (!52 !53 !54 !55)
!63 = (!52 !53 !54 !55)
!64 = (!52 !53 !54 !55)
!65 = span !3 191 254
!66 = (!52 !53 !54 !55 !65)
!67 = (!52 !53 !54 !55)
!68 = span !3 67754 67784
!69 = fn_call_path_span !3 67759 67769
!70 = (!52 !53 !68 !69)
!71 = span !3 4768 4774
!72 = (!52 !53 !68 !69 !71)
!73 = span !3 87 114
!74 = (!52 !53 !68 !69 !73)
!75 = (!52 !53 !68 !69)
!76 = (!52 !53 !68 !69)
!77 = (!52 !53 !68 !69)
!78 = (!52 !53 !68 !69)
!79 = (!52 !53 !68 !69)
!80 = (!52 !53 !68 !69)
!81 = (!52 !53 !68 !69)
!82 = (!52 !53 !68 !69)
!83 = (!52 !53 !68 !69)
!84 = (!52 !53 !68 !69)
!85 = (!52 !53 !68 !69)
!86 = (!52 !53 !68 !69)
!87 = (!52 !53 !68 !69)
!88 = (!52 !53 !68 !69)
!89 = (!52 !53 !68 !69)
!90 = (!52 !53 !68 !69)
!91 = (!52 !53 !68 !69)
!92 = (!52 !53 !68 !69)
!93 = (!52 !53 !68 !69)
!94 = (!52 !53 !68 !69)
!95 = span !3 4716 4799
!96 = (!52 !53 !68 !69 !95)
!97 = (!52 !53 !68 !69)
!98 = span !3 67741 67785
!99 = (!52 !53 !98)
!100 = span !3 67790 67796
!101 = (!52 !53 !100)
!102 = span !3 67790 67811
!103 = fn_call_path_span !3 67797 67809
!104 = (!52 !53 !102 !103)
!105 = span !3 573 577
!106 = (!52 !53 !102 !103 !105)
!107 = (!52 !53 !102 !103 !73)
!108 = (!52 !53 !102 !103)
!109 = (!52 !53 !102 !103)
!110 = (!52 !53 !102 !103)
!111 = (!52 !53 !102 !103)
!112 = (!52 !53 !102 !103)
!113 = (!52 !53 !102 !103)
!114 = (!52 !53 !102 !103)
!115 = (!52 !53 !102 !103)
!116 = (!52 !53 !102 !103)
!117 = (!52 !53 !68 !69)
!118 = (!52 !53 !68 !69)
!119 = (!52 !53 !68 !69)
!120 = (!52 !53 !68 !69)
!121 = span !0 202 246
!122 = fn_name_span !0 205 209
!123 = (!121 !122)
!124 = span !0 225 232
!125 = span !0 30 36
!126 = span !0 237 242
!127 = span !0 243 244
!128 = span !0 225 244
!129 = fn_call_path_span !0 235 236
!130 = (!128 !129)

;; ASM: Final program
;; Program kind: Script
.program:
move $$tmp $pc
jmpf $zero i4
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
CONFIGURABLES_OFFSET[0..32]
CONFIGURABLES_OFFSET[32..64]
lw   $$ds $$tmp i1
add  $$ds $$ds $$tmp
cfei i16                      ; allocate stack space for globals
addr $$arg0 data_Configurable_0; get pointer to configurable TUPLE default value
addi $$arg1 $zero i8          ; get length of configurable TUPLE default value
addi $$arg2 $ssp i0           ; get pointer to configurable TUPLE stack address
jal  $$reta $pc i75           ; decode configurable TUPLE
addr $$arg0 data_Configurable_1; get pointer to configurable WRAPPED default value
addi $$arg1 $zero i8          ; get length of configurable WRAPPED default value
addi $$arg2 $ssp i8           ; get pointer to configurable WRAPPED stack address
jal  $$reta $pc i70           ; decode configurable WRAPPED
move $$locbase $sp            ; save locals base register for function __entry
cfei i360                     ; allocate 360 bytes for locals and 0 slots for call arguments
addi $r0 $$locbase i272       ; get offset to local
jal  $$reta $pc i94           ; [call]: call main_8
move $r1 $$retv               ; [call]: copy the return value
movi $r2 i1024                ; initialize constant into register
aloc $r2
addi $r2 $$locbase i112       ; get offset to local
sw   $$locbase $hp i14        ; store word
movi $r3 i1024                ; initialize constant into register
sw   $$locbase $r3 i15        ; store word
sw   $$locbase $zero i16      ; store word
mcpi $$locbase $r2 i24        ; copy memory
addi $r2 $$locbase i184       ; get offset to local
mcpi $r2 $$locbase i24        ; copy memory
addi $r3 $$locbase i312       ; get offset to local
mcpi $r3 $r2 i24              ; copy memory
addi $r2 $$locbase i312       ; get offset to local
addi $r3 $$locbase i24        ; get offset to local
mcpi $r3 $r2 i24              ; copy memory
addi $r2 $$locbase i136       ; get offset to local
mcpi $r2 $r3 i24              ; copy memory
lw   $r2 $$locbase i17        ; load word
lw   $r6 $$locbase i18        ; load word
lw   $r3 $$locbase i19        ; load word
movi $r4 i8                   ; initialize constant into register
add  $r4 $r3 $r4
gt   $r5 $r4 $r6
jnzf $r5 $zero i1
jmpf $zero i7
movi $r5 i2                   ; initialize constant into register
mul  $r5 $r6 $r5
movi $r6 i8                   ; initialize constant into register
add  $r6 $r5 $r6
aloc $r6
mcp  $hp $r2 $r3
move $r2 $hp                  ; move parameter from branch to block argument
add  $r3 $r2 $r3
sw   $r3 $r1 i0               ; store word
addi $r1 $$locbase i208       ; get offset to local
sw   $$locbase $r2 i26        ; store word
sw   $$locbase $r6 i27        ; store word
sw   $$locbase $r4 i28        ; store word
addi $r2 $$locbase i48        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i248       ; get offset to local
mcpi $r1 $r2 i24              ; copy memory
addi $r2 $$locbase i288       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i288       ; get offset to local
addi $r2 $$locbase i336       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i336       ; get offset to local
addi $r2 $$locbase i72        ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i160       ; get offset to local
mcpi $r1 $r2 i24              ; copy memory
lw   $r2 $$locbase i20        ; load word
addi $r1 $r1 i16              ; get offset to aggregate element
addi $r3 $$locbase i232       ; get offset to local
sw   $$locbase $r2 i29        ; store word
addi $r2 $r3 i8               ; get offset to aggregate element
mcpi $r2 $r1 i8               ; copy memory
addi $r1 $$locbase i96        ; get offset to local
mcpi $r1 $r3 i16              ; copy memory
mcpi $r0 $r1 i16              ; copy memory
lw   $r1 $r0 i1               ; load size of returned slice
lw   $r0 $r0 i0               ; load pointer to returned slice
retd  $r0 $r1
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function abi_decode_in_place_0
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r2 $$arg2               ; save argument 2 (target)
move $r3 $$reta               ; save return address
sw   $$locbase $$arg0 i0      ; store word
addi $r0 $$locbase i16        ; get offset to local
mcpi $r0 $$locbase i8         ; copy memory
lw   $r0 $$locbase i2         ; load word
lw   $r4 $r0 i0               ; lw val ptr i0
lw   $r0 $$locbase i2         ; load word
movi $r1 i8                   ; initialize constant into register
add  $r0 $r0 $r1
sw   $$locbase $r0 i2         ; store word
addi $r0 $$locbase i8         ; get offset to local
sw   $$locbase $r4 i1         ; store word
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i24        ; get offset to local
movi $r1 i8                   ; initialize constant into register
mcp  $r2 $r0 $r1              ; mcp target temp size
move $$retv $zero             ; set return value
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function main_8
lw   $r0 $ssp i1              ; load word
lw   $r1 $ssp i0              ; load word
add  $r0 $r0 $r1
move $$retv $r0               ; set return value
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
.data:
data_<Configurable, TUPLE>_0 .bytes[8] 00 00 00 00 00 00 00 02  ........
data_<Configurable, WRAPPED>_1 .bytes[8] 00 00 00 00 00 00 00 01  ........


    Finished release [optimized + fuel] target(s) [520 B] in ???

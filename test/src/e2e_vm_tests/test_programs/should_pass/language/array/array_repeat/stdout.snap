---
source: test/src/snapshot/mod.rs
---
> forc build  --path test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat --experimental const_generics --ir final --asm final --bytecode
exit status: 0
output:
    Building test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat
   Compiling library std (test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert)
// IR: Final
library {
}

;; --- START OF TARGET BYTECODE ---

0x00000000 MOVE R60 $pc                                    ;; [26, 240, 48, 0]
0x00000004 JMPF $zero 0x4                                  ;; [116, 0, 0, 4]
0x00000008                                                 ;; [0, 0, 0, 0, 0, 0, 0, 32]
0x00000010                                                 ;; [0, 0, 0, 0, 0, 0, 0, 0]
0x00000018 LW R63 R60 0x1                                  ;; [93, 255, 192, 1]
0x0000001c ADD R63 R63 R60                                 ;; [16, 255, 255, 0]
.data_section:
;; --- END OF TARGET BYTECODE ---

warning: Returned value is ignored
    --> test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/codec.sw:3181:5
     |
...
3181 |     T::is_memcopy();
     |     --------------- This returns a value which is not assigned to anything and is ignored.
     |     --------------- help: The returned value has type "bool".
     |
     = help: If you want to intentionally ignore the returned value, use `let _ = ...`:
     = help:   let _ = T::is_memcopy();
____

  Compiled library "std" with 1 warning.
   Compiling script array_repeat (test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat)
// IR: Final
script {
    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    pub entry fn __entry() -> (), !3 {
        entry():
        v0 = call main_0(), !6
        v1 = const u64 0, !7
        v2 = const u64 0, !8
        retd v1 v2, !9
    }

    entry_orig fn main_0() -> (), !13 {
        local slice __log_arg
        local slice __log_arg0
        local [u8; 5] __ret_val
        local [u64; 5] __ret_val0
        local [u64; 5] __ret_val1
        local [u256; 25] __ret_val10
        local [b256; 25] __ret_val11
        local [bool; 25] __ret_val12
        local [bool; 5] __ret_val13
        local [bool; 25] __ret_val14
        local [u8; 262145] __ret_val15
        local [u8; 1] __ret_val16
        local slice __ret_val17
        local slice __ret_val18
        local [u64; 5] __ret_val2
        local [u256; 5] __ret_val3
        local [b256; 5] __ret_val4
        local [bool; 5] __ret_val5
        local [u8; 25] __ret_val6
        local [u64; 25] __ret_val7
        local [u64; 25] __ret_val8
        local [u64; 25] __ret_val9
        local [u8; 1] array
        local u64 code_
        local bool self_1
        local u8 v1_
        local u8 v2_

        entry():
        v0 = get_local __ptr [u8; 5], __ret_val
        v1 = call array_repeat_zero_small_u8_1(v0)
        v2 = get_local __ptr [u64; 5], __ret_val0
        v3 = call array_repeat_zero_small_u16_2(v2)
        v4 = get_local __ptr [u64; 5], __ret_val1
        v5 = call array_repeat_zero_small_u32_3(v4)
        v6 = get_local __ptr [u64; 5], __ret_val2
        v7 = call array_repeat_zero_small_u64_4(v6)
        v8 = get_local __ptr [u256; 5], __ret_val3
        v9 = call array_repeat_zero_small_u256_5(v8)
        v10 = get_local __ptr [b256; 5], __ret_val4
        v11 = call array_repeat_zero_small_b256_6(v10)
        v12 = get_local __ptr [bool; 5], __ret_val5
        v13 = call array_repeat_zero_small_bool_7(v12)
        v14 = get_local __ptr [u8; 25], __ret_val6
        v15 = call array_repeat_zero_big_u8_8(v14)
        v16 = get_local __ptr [u64; 25], __ret_val7
        v17 = call array_repeat_zero_big_u16_9(v16)
        v18 = get_local __ptr [u64; 25], __ret_val8
        v19 = call array_repeat_zero_big_u32_10(v18)
        v20 = get_local __ptr [u64; 25], __ret_val9
        v21 = call array_repeat_zero_big_u64_11(v20)
        v22 = get_local __ptr [u256; 25], __ret_val10
        v23 = call array_repeat_zero_big_u256_12(v22)
        v24 = get_local __ptr [b256; 25], __ret_val11
        v25 = call array_repeat_zero_big_b256_13(v24)
        v26 = get_local __ptr [bool; 25], __ret_val12
        v27 = call array_repeat_zero_big_bool_14(v26)
        v28 = get_local __ptr [bool; 5], __ret_val13
        v29 = call small_array_repeat_15(v28)
        v30 = get_local __ptr [bool; 25], __ret_val14
        v31 = call big_array_repeat_16(v30)
        v32 = get_local __ptr [u8; 262145], __ret_val15
        v33 = call u8_array_bigger_than_18_bits_17(v32)
        v34 = call arrays_with_const_length_18(), !16
        v35 = get_local __ptr [u8; 1], __ret_val16
        v36 = call decode_array_19(v35)
        v37 = get_local __ptr [u8; 1], array, !17
        mem_copy_val v37, v35
        v38 = get_local __ptr [u8; 1], array, !18
        v39 = const u64 0, !19
        v40 = get_elem_ptr v38, __ptr u8, v39, !20
        v41 = get_local __ptr u8, v1_, !23
        mem_copy_val v41, v40
        v42 = get_local __ptr u8, v2_, !23
        v43 = const u8 255, !24
        store v43 to v42, !23
        v44 = load v40, !31
        v45 = get_local __ptr u8, v2_, !33
        v46 = load v45, !34
        v47 = cmp eq v44 v46, !35
        v48 = get_local __ptr bool, self_1, !38
        store v47 to v48, !39
        v49 = get_local __ptr bool, self_1, !41
        v50 = load v49, !42
        v51 = const bool false, !43
        v52 = cmp eq v50 v51, !44
        cbr v52, assert_eq_38_block0(), assert_eq_38_block1(), !45

        assert_eq_38_block0():
        v53 = get_local __ptr u8, v1_, !47
        v54 = load v53, !50
        v55 = get_local __ptr slice, __ret_val17
        v56 = call encode_43(v54, v55)
        v57 = get_local __ptr slice, __log_arg
        mem_copy_val v57, v55
        v58 = const u64 14454674236531057292
        log __ptr slice v57, v58
        v59 = get_local __ptr u8, v2_, !52
        v60 = load v59, !55
        v61 = get_local __ptr slice, __ret_val18
        v62 = call encode_43(v60, v61)
        v63 = get_local __ptr slice, __log_arg0
        mem_copy_val v63, v61
        log __ptr slice v63, v58
        v64 = get_global __ptr u64, std::error_signals::FAILED_ASSERT_EQ_SIGNAL, !57
        v65 = get_local __ptr u64, code_, !60
        mem_copy_val v65, v64
        v66 = get_local __ptr u64, code_, !63
        v67 = load v66, !64
        revert v67, !66

        assert_eq_38_block1():
        v68 = const unit ()
        ret () v68
    }

    fn array_repeat_zero_small_u8_1(__ret_value: __ptr [u8; 5]) -> (), !70 {
        local [u8; 5] __anon_0

        entry(__ret_value: __ptr [u8; 5]):
        v0 = get_local __ptr [u8; 5], __anon_0, !71
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_small_u16_2(__ret_value: __ptr [u64; 5]) -> (), !74 {
        local [u64; 5] __anon_0

        entry(__ret_value: __ptr [u64; 5]):
        v0 = get_local __ptr [u64; 5], __anon_0, !75
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_small_u32_3(__ret_value: __ptr [u64; 5]) -> (), !78 {
        local [u64; 5] __anon_0

        entry(__ret_value: __ptr [u64; 5]):
        v0 = get_local __ptr [u64; 5], __anon_0, !79
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_small_u64_4(__ret_value: __ptr [u64; 5]) -> (), !82 {
        local [u64; 5] __anon_0

        entry(__ret_value: __ptr [u64; 5]):
        v0 = get_local __ptr [u64; 5], __anon_0, !83
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_small_u256_5(__ret_value: __ptr [u256; 5]) -> (), !86 {
        local [u256; 5] __anon_0

        entry(__ret_value: __ptr [u256; 5]):
        v0 = get_local __ptr [u256; 5], __anon_0, !87
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_small_b256_6(__ret_value: __ptr [b256; 5]) -> (), !90 {
        local [b256; 5] __anon_0

        entry(__ret_value: __ptr [b256; 5]):
        v0 = get_local __ptr [b256; 5], __anon_0, !91
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_small_bool_7(__ret_value: __ptr [bool; 5]) -> (), !94 {
        local [bool; 5] __anon_0

        entry(__ret_value: __ptr [bool; 5]):
        v0 = get_local __ptr [bool; 5], __anon_0, !95
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_u8_8(__ret_value: __ptr [u8; 25]) -> (), !98 {
        local [u8; 25] __anon_0

        entry(__ret_value: __ptr [u8; 25]):
        v0 = get_local __ptr [u8; 25], __anon_0, !99
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_u16_9(__ret_value: __ptr [u64; 25]) -> (), !102 {
        local [u64; 25] __anon_0

        entry(__ret_value: __ptr [u64; 25]):
        v0 = get_local __ptr [u64; 25], __anon_0, !103
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_u32_10(__ret_value: __ptr [u64; 25]) -> (), !106 {
        local [u64; 25] __anon_0

        entry(__ret_value: __ptr [u64; 25]):
        v0 = get_local __ptr [u64; 25], __anon_0, !107
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_u64_11(__ret_value: __ptr [u64; 25]) -> (), !110 {
        local [u64; 25] __anon_0

        entry(__ret_value: __ptr [u64; 25]):
        v0 = get_local __ptr [u64; 25], __anon_0, !111
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_u256_12(__ret_value: __ptr [u256; 25]) -> (), !114 {
        local [u256; 25] __anon_0

        entry(__ret_value: __ptr [u256; 25]):
        v0 = get_local __ptr [u256; 25], __anon_0, !115
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_b256_13(__ret_value: __ptr [b256; 25]) -> (), !118 {
        local [b256; 25] __anon_0

        entry(__ret_value: __ptr [b256; 25]):
        v0 = get_local __ptr [b256; 25], __anon_0, !119
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn array_repeat_zero_big_bool_14(__ret_value: __ptr [bool; 25]) -> (), !122 {
        local [bool; 25] __anon_0

        entry(__ret_value: __ptr [bool; 25]):
        v0 = get_local __ptr [bool; 25], __anon_0, !123
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn small_array_repeat_15(__ret_value: __ptr [bool; 5]) -> (), !126 {
        local [bool; 5] __anon_0

        entry(__ret_value: __ptr [bool; 5]):
        v0 = get_local __ptr [bool; 5], __anon_0, !127
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr bool, v1
        v3 = const bool true, !128
        store v3 to v2, !127
        v4 = const u64 1
        v5 = get_elem_ptr v0, __ptr bool, v4
        store v3 to v5, !127
        v6 = const u64 2
        v7 = get_elem_ptr v0, __ptr bool, v6
        store v3 to v7, !127
        v8 = const u64 3
        v9 = get_elem_ptr v0, __ptr bool, v8
        store v3 to v9, !127
        v10 = const u64 4
        v11 = get_elem_ptr v0, __ptr bool, v10
        store v3 to v11, !127
        mem_copy_val __ret_value, v0
        v12 = const unit ()
        ret () v12
    }

    fn big_array_repeat_16(__ret_value: __ptr [bool; 25]) -> (), !131 {
        local [bool; 25] __anon_0

        entry(__ret_value: __ptr [bool; 25]):
        v0 = get_local __ptr [bool; 25], __anon_0, !132
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, __ptr bool, v2
        v4 = const bool true, !133
        store v4 to v3, !132
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 25
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        mem_copy_val __ret_value, v0
        v9 = const unit ()
        ret () v9
    }

    fn u8_array_bigger_than_18_bits_17(__ret_value: __ptr [u8; 262145]) -> (), !136 {
        local [u8; 262145] __anon_0

        entry(__ret_value: __ptr [u8; 262145]):
        v0 = get_local __ptr [u8; 262145], __anon_0, !137
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        v1 = const unit ()
        ret () v1
    }

    fn arrays_with_const_length_18() -> (), !140 {
        local [u64; 1] __anon_0
        local [u64; 1] __anon_1
        local [u64; 1] __anon_2
        local [u64; 2] __anon_4

        entry():
        v0 = get_local __ptr [u64; 1], __anon_0, !141
        mem_clear_val v0
        v1 = get_local __ptr [u64; 1], __anon_1, !142
        mem_clear_val v1
        v2 = get_local __ptr [u64; 1], __anon_2, !143
        mem_clear_val v2
        v3 = get_local __ptr [u64; 2], __anon_4, !144
        mem_clear_val v3
        v4 = const unit ()
        ret () v4
    }

    fn decode_array_19(__ret_value: __ptr [u8; 1]) -> (), !147 {
        local [u8; 1] __anon_0
        local slice __ret_val
        local [u8; 1] __ret_val0
        local slice s

        entry(__ret_value: __ptr [u8; 1]):
        v0 = get_local __ptr [u8; 1], __anon_0, !148
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr u8, v1
        v3 = const u8 255, !149
        store v3 to v2, !148
        v4 = get_local __ptr [u8; 1], __anon_0
        v5 = get_local __ptr slice, __ret_val
        v6 = call to_slice_20(v4, v5)
        v7 = get_local __ptr slice, s, !150
        mem_copy_val v7, v5
        v8 = get_local __ptr slice, s
        v9 = get_local __ptr [u8; 1], __ret_val0
        v10 = call abi_decode_24(v8, v9)
        mem_copy_val __ret_value, v9
        v11 = const unit ()
        ret () v11
    }

    fn to_slice_20(array: __ptr [u8; 1], __ret_value: __ptr slice) -> (), !153 {
        local mut slice __aggr_memcpy_0
        local { ptr, u64 } __anon_0
        local slice __tmp_block_arg
        local slice __tmp_block_arg0
        local [u8; 1] array_
        local u64 len
        local u64 other_
        local { ptr, u64 } parts_
        local ptr ptr_

        entry(array: __ptr [u8; 1], __ret_value: __ptr slice):
        v0 = get_local __ptr [u8; 1], array_
        mem_copy_val v0, array
        v1 = get_local __ptr u64, len, !154
        v2 = const u64 1
        store v2 to v1, !154
        v3 = get_local __ptr [u8; 1], array_, !155
        v4 = cast_ptr v3 to ptr, !156
        v5 = get_local __ptr ptr, ptr_, !159
        store v4 to v5, !159
        v6 = get_local __ptr ptr, ptr_, !162
        v7 = get_local __ptr u64, other_, !165
        v8 = const u64 1
        store v8 to v7, !166
        v9 = get_local __ptr u64, len, !168
        v10 = load v9, !169
        v11 = get_local __ptr u64, other_, !171
        v12 = load v11, !172
        v13 = mul v10, v12, !173
        v14 = get_local __ptr { ptr, u64 }, __anon_0, !175
        v15 = const u64 0
        v16 = get_elem_ptr v14, __ptr ptr, v15, !176
        mem_copy_val v16, v6
        v17 = const u64 1
        v18 = get_elem_ptr v14, __ptr u64, v17, !177
        store v13 to v18, !178
        v19 = get_local __ptr { ptr, u64 }, parts_, !181
        mem_copy_val v19, v14
        v20 = get_local __ptr { ptr, u64 }, parts_, !183
        v21 = asm(ptr: v20) -> __ptr slice ptr {
        }
        v22 = get_local __ptr slice, __aggr_memcpy_0
        mem_copy_val v22, v21
        v23 = get_local __ptr slice, __tmp_block_arg
        mem_copy_val v23, v22
        v24 = get_local __ptr slice, __tmp_block_arg0
        mem_copy_val v24, v23
        mem_copy_val __ret_value, v24
        v25 = const unit ()
        ret () v25
    }

    pub fn abi_decode_24(data: __ptr slice, __ret_value: __ptr [u8; 1]) -> (), !187 {
        local u64 LENGTH
        local mut { ptr, u64 } __aggr_memcpy_0
        local mut { ptr, u64 } __aggr_memcpy_00
        local { ptr, u64 } __anon_0
        local { ptr, u64 } __anon_00
        local { ptr } __anon_01
        local [u8; 1] __anon_02
        local { ptr, u64 } __tmp_block_arg
        local { ptr, u64 } __tmp_block_arg0
        local { ptr } __tmp_block_arg1
        local [u8; 1] __tmp_block_arg2
        local u64 _len_
        local mut [u8; 1] array
        local __ptr [u8; 1] array_
        local mut { ptr } buffer
        local __ptr { ptr } buffer_
        local __ptr { ptr } buffer_0
        local slice data_
        local mut u64 i
        local __ptr u8 item
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_1
        local ptr ptr_
        local slice self_
        local slice self_0
        local u64 self_00
        local __ptr { ptr } self_000
        local u64 self_0000
        local __ptr { ptr } self_01
        local u64 self_1
        local __ptr { ptr } self_10
        local u64 self_2
        local u64 size
        local slice slice_
        local slice slice_0
        local u8 v
        local u8 v0
        local u8 v_

        entry(data: __ptr slice, __ret_value: __ptr [u8; 1]):
        v0 = get_local __ptr slice, data_
        mem_copy_val v0, data
        v1 = get_local __ptr slice, data_, !188
        v2 = get_local __ptr slice, self_, !191
        mem_copy_val v2, v1
        v3 = get_local __ptr slice, self_, !193
        v4 = get_local __ptr slice, slice_, !196
        mem_copy_val v4, v3
        v5 = get_local __ptr slice, slice_, !198
        v6 = asm(ptr: v5) -> __ptr { ptr, u64 } ptr {
        }
        v7 = get_local __ptr { ptr, u64 }, __aggr_memcpy_0
        mem_copy_val v7, v6
        v8 = get_local __ptr { ptr, u64 }, __tmp_block_arg
        mem_copy_val v8, v7
        v9 = get_local __ptr { ptr, u64 }, __anon_0, !191
        mem_copy_val v9, v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr ptr, v10, !200
        v12 = load v11, !191
        v13 = get_local __ptr slice, data_, !201
        v14 = get_local __ptr slice, self_0, !204
        mem_copy_val v14, v13
        v15 = get_local __ptr slice, self_0, !206
        v16 = get_local __ptr slice, slice_0, !209
        mem_copy_val v16, v15
        v17 = get_local __ptr slice, slice_0, !210
        v18 = asm(ptr: v17) -> __ptr { ptr, u64 } ptr {
        }
        v19 = get_local __ptr { ptr, u64 }, __aggr_memcpy_00
        mem_copy_val v19, v18
        v20 = get_local __ptr { ptr, u64 }, __tmp_block_arg0
        mem_copy_val v20, v19
        v21 = get_local __ptr { ptr, u64 }, __anon_00, !204
        mem_copy_val v21, v20
        v22 = const u64 1
        v23 = get_elem_ptr v21, __ptr u64, v22, !212
        v24 = get_local __ptr u64, self_00, !215
        mem_copy_val v24, v23
        v25 = get_local __ptr u64, other_, !216
        v26 = const u64 1
        store v26 to v25, !217
        v27 = get_local __ptr u64, self_00, !219
        v28 = load v27, !220
        v29 = get_local __ptr u64, other_, !222
        v30 = load v29, !223
        v31 = div v28, v30, !224
        v32 = get_local __ptr ptr, ptr_, !227
        store v12 to v32, !227
        v33 = get_local __ptr u64, _len_, !227
        store v31 to v33, !227
        v34 = get_local __ptr ptr, ptr_, !229
        v35 = get_local __ptr { ptr }, __anon_01, !231
        v36 = const u64 0
        v37 = get_elem_ptr v35, __ptr ptr, v36, !227
        mem_copy_val v37, v34
        v38 = get_local __ptr { ptr }, __tmp_block_arg1
        mem_copy_val v38, v35
        v39 = get_local __ptr { ptr }, buffer, !232
        mem_copy_val v39, v38
        v40 = get_local __ptr { ptr }, buffer, !233
        v41 = get_local __ptr __ptr { ptr }, buffer_, !236
        store v40 to v41, !236
        v42 = get_local __ptr u64, LENGTH, !238
        v43 = const u64 1, !239
        store v43 to v42, !240
        v44 = get_local __ptr [u8; 1], __anon_02, !242
        mem_clear_val v44, !236
        v45 = get_local __ptr [u8; 1], array, !244
        mem_copy_val v45, v44
        v46 = get_local __ptr [u8; 1], array, !246
        v47 = cast_ptr v46 to __ptr [u8; 1], !236
        v48 = get_local __ptr __ptr [u8; 1], array_, !248
        store v47 to v48, !249
        v49 = get_local __ptr u64, i, !251
        v50 = const u64 0, !252
        store v50 to v49, !253
        br abi_decode_30_while(), !236

        abi_decode_30_while():
        v51 = get_local __ptr u64, i, !255
        v52 = get_local __ptr u64, self_1, !258
        mem_copy_val v52, v51
        v53 = get_local __ptr u64, other_0, !259
        v54 = const u64 1
        store v54 to v53, !260
        v55 = get_local __ptr u64, self_1, !262
        v56 = load v55, !263
        v57 = get_local __ptr u64, other_0, !265
        v58 = load v57, !266
        v59 = cmp lt v56 v58, !267
        cbr v59, abi_decode_30_while_body(), abi_decode_30_end_while(), !236

        abi_decode_30_while_body():
        v60 = get_local __ptr __ptr [u8; 1], array_, !269
        v61 = load v60, !236
        v62 = get_local __ptr u64, i, !271
        v63 = load v62, !236
        v64 = const u64 1
        v65 = asm(idx: v63, elem_ir_type_size: v64, ptr: v61, offset_temp, ptr_out) -> __ptr u8 ptr_out, !236 {
            mul    offset_temp idx elem_ir_type_size
            add    ptr_out ptr offset_temp
        }
        v66 = get_local __ptr __ptr u8, item, !273
        store v65 to v66, !274
        v67 = get_local __ptr __ptr { ptr }, buffer_, !276
        v68 = get_local __ptr __ptr { ptr }, self_01, !279
        mem_copy_val v68, v67
        v69 = get_local __ptr __ptr { ptr }, self_01, !281
        v70 = get_local __ptr __ptr { ptr }, buffer_0, !284
        mem_copy_val v70, v69
        v71 = get_local __ptr __ptr { ptr }, buffer_0, !286
        v72 = get_local __ptr __ptr { ptr }, self_000, !289
        mem_copy_val v72, v71
        v73 = get_local __ptr u64, size, !291
        v74 = const u64 1
        store v74 to v73, !292
        v75 = const bool false
        cbr v75, abi_decode_30_decode_32_abi_decode_33_read_34_block0(), abi_decode_30_decode_32_abi_decode_33_read_34_block1(), !294

        abi_decode_30_decode_32_abi_decode_33_read_34_block0():
        v76 = get_local __ptr __ptr { ptr }, self_000, !296
        v77 = load v76, !297
        v78 = const u64 0
        v79 = get_elem_ptr v77, __ptr ptr, v78, !299
        v80 = load v79, !300
        v81 = asm(ptr: v80) -> u8 ptr, !302 {
        }
        v82 = get_local __ptr u8, v, !304
        store v81 to v82, !305
        v83 = get_local __ptr __ptr { ptr }, self_000, !307
        v84 = load v83, !308
        v85 = const u64 0
        v86 = get_elem_ptr v84, __ptr ptr, v85, !309
        v87 = load v86, !310
        v88 = get_local __ptr u64, size, !312
        v89 = load v88, !313
        v90 = const u64 1
        v91 = mul v90, v89, !314
        v92 = add v87, v91, !315
        v93 = get_local __ptr __ptr { ptr }, self_000, !317
        v94 = load v93, !318
        v95 = const u64 0
        v96 = get_elem_ptr v94, __ptr ptr, v95, !319
        store v92 to v96, !320
        v97 = get_local __ptr u8, v, !322
        v98 = load v97, !323
        br abi_decode_30_decode_32_abi_decode_33_read_34_block5(v98), !324

        abi_decode_30_decode_32_abi_decode_33_read_34_block1():
        v99 = get_local __ptr u64, size, !326
        v100 = get_local __ptr u64, self_0000, !329
        mem_copy_val v100, v99
        v101 = get_local __ptr u64, other_00, !330
        v102 = const u64 1, !331
        store v102 to v101, !332
        v103 = get_local __ptr u64, self_0000, !334
        v104 = load v103, !335
        v105 = get_local __ptr u64, other_00, !337
        v106 = load v105, !338
        v107 = cmp eq v104 v106, !339
        cbr v107, abi_decode_30_decode_32_abi_decode_33_read_34_block2(), abi_decode_30_decode_32_abi_decode_33_read_34_block3(), !340

        abi_decode_30_decode_32_abi_decode_33_read_34_block2():
        v108 = get_local __ptr __ptr { ptr }, self_000, !342
        v109 = load v108, !343
        v110 = const u64 0
        v111 = get_elem_ptr v109, __ptr ptr, v110, !344
        v112 = load v111, !345
        v113 = asm(ptr: v112, val) -> u8 val, !347 {
            lb     val ptr i0, !348
        }
        v114 = get_local __ptr u8, v_, !350
        store v113 to v114, !351
        v115 = get_local __ptr __ptr { ptr }, self_000, !353
        v116 = load v115, !354
        v117 = const u64 0
        v118 = get_elem_ptr v116, __ptr ptr, v117, !355
        v119 = load v118, !356
        v120 = const u64 1
        v121 = const u64 1, !357
        v122 = mul v120, v121, !358
        v123 = add v119, v122, !359
        v124 = get_local __ptr __ptr { ptr }, self_000, !361
        v125 = load v124, !362
        v126 = const u64 0
        v127 = get_elem_ptr v125, __ptr ptr, v126, !363
        store v123 to v127, !364
        v128 = get_local __ptr u8, v_, !366
        v129 = load v128, !367
        br abi_decode_30_decode_32_abi_decode_33_read_34_block4(v129), !368

        abi_decode_30_decode_32_abi_decode_33_read_34_block3():
        v130 = get_local __ptr __ptr { ptr }, self_000, !370
        v131 = get_local __ptr __ptr { ptr }, self_10, !373
        mem_copy_val v131, v130
        v132 = get_local __ptr __ptr { ptr }, self_10, !375
        v133 = load v132, !376
        v134 = const u64 0
        v135 = get_elem_ptr v133, __ptr ptr, v134, !377
        v136 = load v135, !378
        v137 = asm(ptr: v136, val) -> u8 val, !380 {
            lw     val ptr i0, !381
        }
        v138 = get_local __ptr u8, v0, !383
        store v137 to v138, !384
        v139 = get_local __ptr __ptr { ptr }, self_10, !386
        v140 = load v139, !387
        v141 = const u64 0
        v142 = get_elem_ptr v140, __ptr ptr, v141, !388
        v143 = load v142, !389
        v144 = const u64 1
        v145 = const u64 8, !390
        v146 = mul v144, v145, !391
        v147 = add v143, v146, !392
        v148 = get_local __ptr __ptr { ptr }, self_10, !394
        v149 = load v148, !395
        v150 = const u64 0
        v151 = get_elem_ptr v149, __ptr ptr, v150, !396
        store v147 to v151, !397
        v152 = get_local __ptr u8, v0, !399
        v153 = load v152, !400
        br abi_decode_30_decode_32_abi_decode_33_read_34_block4(v153), !401

        abi_decode_30_decode_32_abi_decode_33_read_34_block4(v154: u8):
        br abi_decode_30_decode_32_abi_decode_33_read_34_block5(v154), !402

        abi_decode_30_decode_32_abi_decode_33_read_34_block5(v155: u8):
        v156 = get_local __ptr __ptr u8, item, !404
        v157 = load v156, !236
        store v155 to v157, !406
        v158 = get_local __ptr u64, i, !408
        v159 = get_local __ptr u64, self_2, !411
        mem_copy_val v159, v158
        v160 = get_local __ptr u64, other_1, !412
        v161 = const u64 1, !413
        store v161 to v160, !414
        v162 = get_local __ptr u64, self_2, !416
        v163 = load v162, !417
        v164 = get_local __ptr u64, other_1, !419
        v165 = load v164, !420
        v166 = add v163, v165, !421
        v167 = get_local __ptr u64, i, !422
        store v166 to v167, !423
        br abi_decode_30_while(), !236

        abi_decode_30_end_while():
        v168 = get_local __ptr __ptr [u8; 1], array_, !425
        v169 = load v168, !236
        v170 = get_local __ptr [u8; 1], __tmp_block_arg2
        mem_copy_val v170, v169
        mem_copy_val __ret_value, v170
        v171 = const unit ()
        ret () v171
    }

    pub fn encode_43(item !426: u8, __ret_value: __ptr slice) -> (), !429 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local mut { ptr, u64, u64 } __aggr_memcpy_00
        local mut { ptr, u64, u64 } __aggr_memcpy_01
        local mut { ptr, u64, u64 } __aggr_memcpy_02
        local mut slice __aggr_memcpy_03
        local { ptr, u64, u64 } __anon_0
        local { ptr, u64, u64 } __anon_00
        local { ptr, u64, u64 } __anon_01
        local { { ptr, u64, u64 } } __anon_1
        local { ptr, u64, u64 } __anon_10
        local { ptr, u64 } __anon_11
        local { { ptr, u64, u64 } } __anon_2
        local { { ptr, u64, u64 } } __tmp_block_arg
        local { { ptr, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local { { ptr, u64, u64 } } buffer
        local { { ptr, u64, u64 } } buffer_
        local u8 item_
        local u8 self_
        local { { ptr, u64, u64 } } self_0

        entry(item: u8, __ret_value: __ptr slice):
        v0 = get_local __ptr u8, item_
        store item to v0
        v1 = get_local __ptr u8, item_, !430
        v2 = const u64 1024
        v3 = asm(cap: v2) -> ptr hp, !433 {
            aloc   cap
        }
        v4 = get_local __ptr { ptr, u64, u64 }, __anon_0, !433
        v5 = const u64 0
        v6 = get_elem_ptr v4, __ptr ptr, v5, !433
        store v3 to v6, !433
        v7 = const u64 1
        v8 = get_elem_ptr v4, __ptr u64, v7, !433
        store v2 to v8, !433
        v9 = const u64 2
        v10 = get_elem_ptr v4, __ptr u64, v9, !433
        v11 = const u64 0
        store v11 to v10, !433
        v12 = asm(buffer: v4) -> __ptr { ptr, u64, u64 } buffer {
        }
        v13 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v13, v12
        v14 = get_local __ptr { { ptr, u64, u64 } }, __anon_1, !435
        v15 = const u64 0
        v16 = get_elem_ptr v14, __ptr { ptr, u64, u64 }, v15, !433
        mem_copy_val v16, v13
        v17 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg
        mem_copy_val v17, v14
        v18 = get_local __ptr u8, self_, !438
        mem_copy_val v18, v1
        v19 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !438
        mem_copy_val v19, v17
        v20 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !440
        v21 = const u64 0
        v22 = get_elem_ptr v20, __ptr { ptr, u64, u64 }, v21, !442
        v23 = asm(buffer: v22) -> __ptr { ptr, u64, u64 } buffer {
        }
        v24 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v24, v23
        v25 = get_local __ptr { ptr, u64, u64 }, __anon_00, !438
        mem_copy_val v25, v24
        v26 = const u64 0
        v27 = get_elem_ptr v25, __ptr ptr, v26, !438
        v28 = load v27, !438
        v29 = const u64 1
        v30 = get_elem_ptr v25, __ptr u64, v29, !438
        v31 = load v30, !438
        v32 = const u64 2
        v33 = get_elem_ptr v25, __ptr u64, v32, !438
        v34 = load v33, !438
        v35 = get_local __ptr u8, self_, !444
        v36 = load v35, !438
        v37 = const u64 1
        v38 = add v34, v37, !438
        v39 = cmp gt v38 v31, !438
        cbr v39, abi_encode_44_block1(), abi_encode_44_block0(v28, v31), !438

        abi_encode_44_block0(v40: ptr, v41: u64):
        v42 = add v40, v34, !438
        v43 = cast_ptr v42 to __ptr u8, !438
        store v36 to v43, !438
        v44 = const u64 1
        v45 = add v34, v44, !438
        v46 = get_local __ptr { ptr, u64, u64 }, __anon_10, !438
        v47 = const u64 0
        v48 = get_elem_ptr v46, __ptr ptr, v47, !438
        store v40 to v48, !438
        v49 = const u64 1
        v50 = get_elem_ptr v46, __ptr u64, v49, !438
        store v41 to v50, !438
        v51 = const u64 2
        v52 = get_elem_ptr v46, __ptr u64, v51, !438
        store v45 to v52, !438
        v53 = asm(buffer: v46) -> __ptr { ptr, u64, u64 } buffer {
        }
        v54 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_01
        mem_copy_val v54, v53
        v55 = get_local __ptr { { ptr, u64, u64 } }, __anon_2, !446
        v56 = const u64 0
        v57 = get_elem_ptr v55, __ptr { ptr, u64, u64 }, v56, !438
        mem_copy_val v57, v54
        v58 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v58, v55
        v59 = get_local __ptr { { ptr, u64, u64 } }, buffer, !447
        mem_copy_val v59, v58
        v60 = get_local __ptr { { ptr, u64, u64 } }, buffer, !448
        v61 = get_local __ptr { { ptr, u64, u64 } }, self_0, !451
        mem_copy_val v61, v60
        v62 = get_local __ptr { { ptr, u64, u64 } }, self_0, !453
        v63 = const u64 0
        v64 = get_elem_ptr v62, __ptr { ptr, u64, u64 }, v63, !454
        v65 = asm(buffer: v64) -> __ptr { ptr, u64, u64 } buffer {
        }
        v66 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_02
        mem_copy_val v66, v65
        v67 = get_local __ptr { ptr, u64, u64 }, __anon_01, !451
        mem_copy_val v67, v66
        v68 = const u64 0
        v69 = get_elem_ptr v67, __ptr ptr, v68, !451
        v70 = const u64 2
        v71 = get_elem_ptr v67, __ptr u64, v70, !451
        v72 = get_local __ptr { ptr, u64 }, __anon_11, !451
        v73 = const u64 0
        v74 = get_elem_ptr v72, __ptr ptr, v73, !451
        mem_copy_val v74, v69
        v75 = const u64 1
        v76 = get_elem_ptr v72, __ptr u64, v75, !451
        mem_copy_val v76, v71
        v77 = asm(s: v72) -> __ptr slice s {
        }
        v78 = get_local __ptr slice, __aggr_memcpy_03
        mem_copy_val v78, v77
        v79 = get_local __ptr slice, __tmp_block_arg1
        mem_copy_val v79, v78
        mem_copy_val __ret_value, v79
        v80 = const unit ()
        ret () v80

        abi_encode_44_block1():
        v81 = const u64 2
        v82 = mul v31, v81, !438
        v83 = add v82, v37, !438
        v84 = asm(new_cap: v83, old_ptr: v28, len: v34) -> __ptr u8 hp, !438 {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br abi_encode_44_block0(v84, v83), !438
    }
}

!0 = "test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.<autogenerated>.sw"
!1 = span !0 0 112
!2 = fn_name_span !0 7 14
!3 = (!1 !2)
!4 = span !0 53 59
!5 = fn_call_path_span !0 53 57
!6 = (!4 !5)
!7 = span !0 92 93
!8 = span !0 95 96
!9 = span !0 77 97
!10 = "test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw"
!11 = span !10 2198 3051
!12 = fn_name_span !10 2201 2205
!13 = (!11 !12)
!14 = span !10 2928 2954
!15 = fn_call_path_span !10 2928 2952
!16 = (!14 !15)
!17 = span !10 2981 3017
!18 = span !10 3032 3037
!19 = span !10 3038 3039
!20 = span !10 3032 3040
!21 = span !10 3022 3048
!22 = fn_call_path_span !10 3022 3031
!23 = (!21 !22)
!24 = span !10 3042 3047
!25 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!26 = span !25 1863 1871
!27 = fn_call_path_span !25 1866 1868
!28 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/ops.sw"
!29 = span !28 15555 15569
!30 = fn_call_path_span !28 15560 15562
!31 = (!21 !22 !26 !27 !29 !30)
!32 = span !28 17195 17200
!33 = (!21 !22 !26 !27 !29 !30 !32)
!34 = (!21 !22 !26 !27 !29 !30)
!35 = (!21 !22 !26 !27 !29 !30)
!36 = span !28 15554 15576
!37 = fn_call_path_span !28 15571 15574
!38 = (!21 !22 !26 !27 !36 !37)
!39 = (!21 !22 !26 !27 !36 !37)
!40 = span !28 12567 12571
!41 = (!21 !22 !26 !27 !36 !37 !40)
!42 = (!21 !22 !26 !27 !36 !37)
!43 = span !28 12573 12578
!44 = (!21 !22 !26 !27 !36 !37)
!45 = (!21 !22 !26)
!46 = span !25 1887 1889
!47 = (!21 !22 !46)
!48 = span !25 1883 1890
!49 = fn_call_path_span !25 1883 1886
!50 = (!21 !22 !48 !49)
!51 = span !25 1904 1906
!52 = (!21 !22 !51)
!53 = span !25 1900 1907
!54 = fn_call_path_span !25 1900 1903
!55 = (!21 !22 !53 !54)
!56 = span !25 1924 1947
!57 = (!21 !22 !56)
!58 = span !25 1917 1948
!59 = fn_call_path_span !25 1917 1923
!60 = (!21 !22 !58 !59)
!61 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!62 = span !61 766 770
!63 = (!21 !22 !58 !59 !62)
!64 = (!21 !22 !58 !59)
!65 = span !61 757 771
!66 = (!21 !22 !58 !59 !65)
!67 = span !10 58 117
!68 = fn_name_span !10 61 87
!69 = inline "never"
!70 = (!67 !68 !69)
!71 = span !10 107 115
!72 = span !10 220 282
!73 = fn_name_span !10 223 250
!74 = (!72 !73 !69)
!75 = span !10 271 280
!76 = span !10 388 450
!77 = fn_name_span !10 391 418
!78 = (!76 !77 !69)
!79 = span !10 439 448
!80 = span !10 556 618
!81 = fn_name_span !10 559 586
!82 = (!80 !81 !69)
!83 = span !10 607 616
!84 = span !10 725 855
!85 = fn_name_span !10 728 756
!86 = (!84 !85 !69)
!87 = span !10 778 853
!88 = span !10 1030 1156
!89 = fn_name_span !10 1033 1061
!90 = (!88 !89 !69)
!91 = span !10 1083 1154
!92 = span !10 1327 1392
!93 = fn_name_span !10 1330 1358
!94 = (!92 !93 !69)
!95 = span !10 1380 1390
!96 = span !10 135 194
!97 = fn_name_span !10 138 162
!98 = (!96 !97 !69)
!99 = span !10 183 192
!100 = span !10 300 362
!101 = fn_name_span !10 303 328
!102 = (!100 !101 !69)
!103 = span !10 350 360
!104 = span !10 468 530
!105 = fn_name_span !10 471 496
!106 = (!104 !105 !69)
!107 = span !10 518 528
!108 = span !10 636 698
!109 = fn_name_span !10 639 664
!110 = (!108 !109 !69)
!111 = span !10 686 696
!112 = span !10 873 1003
!113 = fn_name_span !10 876 902
!114 = (!112 !113 !69)
!115 = span !10 925 1001
!116 = span !10 1174 1300
!117 = fn_name_span !10 1177 1203
!118 = (!116 !117 !69)
!119 = span !10 1226 1298
!120 = span !10 1410 1475
!121 = fn_name_span !10 1413 1439
!122 = (!120 !121 !69)
!123 = span !10 1462 1473
!124 = span !10 1536 1590
!125 = fn_name_span !10 1539 1557
!126 = (!124 !125 !69)
!127 = span !10 1579 1588
!128 = span !10 1580 1584
!129 = span !10 1633 1687
!130 = fn_name_span !10 1636 1652
!131 = (!129 !130 !69)
!132 = span !10 1675 1685
!133 = span !10 1676 1680
!134 = span !10 1781 1852
!135 = fn_name_span !10 1784 1812
!136 = (!134 !135 !69)
!137 = span !10 1837 1850
!138 = span !10 1947 2196
!139 = fn_name_span !10 1950 1974
!140 = (!138 !139 !69)
!141 = span !10 2030 2039
!142 = span !10 2063 2072
!143 = span !10 2086 2102
!144 = span !10 2148 2157
!145 = span !10 3070 3173
!146 = fn_name_span !10 3073 3085
!147 = (!145 !146 !69)
!148 = span !10 3133 3140
!149 = span !10 3134 3139
!150 = span !10 3105 3142
!151 = span !10 3192 3320
!152 = fn_name_span !10 3195 3203
!153 = (!151 !152 !69)
!154 = span !10 3236 3263
!155 = span !10 3306 3311
!156 = span !10 3296 3312
!157 = span !10 3268 3318
!158 = fn_call_path_span !10 3268 3289
!159 = (!157 !158)
!160 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/raw_slice.sw"
!161 = span !160 2363 2366
!162 = (!157 !158 !161)
!163 = span !160 2368 2392
!164 = fn_call_path_span !160 2374 2375
!165 = (!157 !158 !163 !164)
!166 = (!157 !158 !163 !164)
!167 = span !28 7076 7080
!168 = (!157 !158 !163 !164 !167)
!169 = (!157 !158 !163 !164)
!170 = span !28 7082 7087
!171 = (!157 !158 !163 !164 !170)
!172 = (!157 !158 !163 !164)
!173 = (!157 !158 !163 !164)
!174 = span !160 2362 2393
!175 = (!157 !158 !174)
!176 = (!157 !158 !174)
!177 = (!157 !158 !174)
!178 = (!157 !158 !174)
!179 = span !160 2351 2394
!180 = fn_call_path_span !160 2351 2361
!181 = (!157 !158 !179 !180)
!182 = span !160 1257 1262
!183 = (!157 !158 !179 !180 !182)
!184 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/codec.sw"
!185 = span !184 79692 79865
!186 = fn_name_span !184 79699 79709
!187 = (!185 !186 !69)
!188 = span !184 79807 79811
!189 = span !184 79807 79817
!190 = fn_call_path_span !184 79812 79815
!191 = (!189 !190)
!192 = span !160 2922 2926
!193 = (!189 !190 !192)
!194 = span !160 2911 2927
!195 = fn_call_path_span !160 2911 2921
!196 = (!189 !190 !194 !195)
!197 = span !160 1633 1638
!198 = (!189 !190 !194 !195 !197)
!199 = span !160 2928 2929
!200 = (!189 !190 !199)
!201 = span !184 79819 79823
!202 = span !184 79819 79835
!203 = fn_call_path_span !184 79824 79827
!204 = (!202 !203)
!205 = span !160 3420 3424
!206 = (!202 !203 !205)
!207 = span !160 3409 3425
!208 = fn_call_path_span !160 3409 3419
!209 = (!202 !203 !207 !208)
!210 = (!202 !203 !207 !208 !197)
!211 = span !160 3426 3427
!212 = (!202 !203 !211)
!213 = span !160 3409 3446
!214 = fn_call_path_span !160 3428 3429
!215 = (!202 !203 !213 !214)
!216 = (!202 !203 !213 !214)
!217 = (!202 !203 !213 !214)
!218 = span !28 9973 9977
!219 = (!202 !203 !213 !214 !218)
!220 = (!202 !203 !213 !214)
!221 = span !28 9979 9984
!222 = (!202 !203 !213 !214 !221)
!223 = (!202 !203 !213 !214)
!224 = (!202 !203 !213 !214)
!225 = span !184 79782 79836
!226 = fn_call_path_span !184 79782 79806
!227 = (!225 !226)
!228 = span !184 750 753
!229 = (!225 !226 !228)
!230 = span !184 735 755
!231 = (!225 !226 !230)
!232 = span !184 79765 79837
!233 = span !184 79856 79862
!234 = span !184 79842 79863
!235 = fn_call_path_span !184 79842 79855
!236 = (!234 !235)
!237 = span !184 98349 98389
!238 = (!234 !235 !237)
!239 = span !184 98369 98389
!240 = (!234 !235 !237)
!241 = span !184 98415 98428
!242 = (!234 !235 !241)
!243 = span !184 98399 98429
!244 = (!234 !235 !243)
!245 = span !184 98514 98519
!246 = (!234 !235 !245)
!247 = span !184 98438 98521
!248 = (!234 !235 !247)
!249 = (!234 !235 !247)
!250 = span !184 98531 98545
!251 = (!234 !235 !250)
!252 = span !184 98543 98544
!253 = (!234 !235 !250)
!254 = span !184 98561 98562
!255 = (!234 !235 !254)
!256 = span !184 98561 98566
!257 = fn_call_path_span !184 98563 98564
!258 = (!234 !235 !256 !257)
!259 = (!234 !235 !256 !257)
!260 = (!234 !235 !256 !257)
!261 = span !28 21076 21080
!262 = (!234 !235 !256 !257 !261)
!263 = (!234 !235 !256 !257)
!264 = span !28 21082 21087
!265 = (!234 !235 !256 !257 !264)
!266 = (!234 !235 !256 !257)
!267 = (!234 !235 !256 !257)
!268 = span !184 98610 98615
!269 = (!234 !235 !268)
!270 = span !184 98617 98618
!271 = (!234 !235 !270)
!272 = span !184 98581 98620
!273 = (!234 !235 !272)
!274 = (!234 !235 !272)
!275 = span !184 98641 98647
!276 = (!234 !235 !275)
!277 = span !184 98641 98661
!278 = fn_call_path_span !184 98648 98654
!279 = (!234 !235 !277 !278)
!280 = span !184 3973 3977
!281 = (!234 !235 !277 !278 !280)
!282 = span !184 3959 3978
!283 = fn_call_path_span !184 3959 3972
!284 = (!234 !235 !277 !278 !282 !283)
!285 = span !184 81482 81488
!286 = (!234 !235 !277 !278 !282 !283 !285)
!287 = span !184 81482 81501
!288 = fn_call_path_span !184 81489 81493
!289 = (!234 !235 !277 !278 !282 !283 !287 !288)
!290 = span !184 3371 3399
!291 = (!234 !235 !277 !278 !282 !283 !287 !288 !290)
!292 = (!234 !235 !277 !278 !282 !283 !287 !288 !290)
!293 = span !184 3412 3438
!294 = (!234 !235 !277 !278 !282 !283 !287 !288 !293)
!295 = span !184 3470 3474
!296 = (!234 !235 !277 !278 !282 !283 !287 !288 !295)
!297 = (!234 !235 !277 !278 !282 !283 !287 !288)
!298 = span !184 625 637
!299 = (!234 !235 !277 !278 !282 !283 !287 !288 !298)
!300 = (!234 !235 !277 !278 !282 !283 !287 !288)
!301 = span !184 3461 3518
!302 = (!234 !235 !277 !278 !282 !283 !287 !288 !301)
!303 = span !184 3453 3519
!304 = (!234 !235 !277 !278 !282 !283 !287 !288 !303)
!305 = (!234 !235 !277 !278 !282 !283 !287 !288 !303)
!306 = span !184 3559 3563
!307 = (!234 !235 !277 !278 !282 !283 !287 !288 !306)
!308 = (!234 !235 !277 !278 !282 !283 !287 !288)
!309 = (!234 !235 !277 !278 !282 !283 !287 !288 !298)
!310 = (!234 !235 !277 !278 !282 !283 !287 !288)
!311 = span !184 3569 3573
!312 = (!234 !235 !277 !278 !282 !283 !287 !288 !311)
!313 = (!234 !235 !277 !278 !282 !283 !287 !288)
!314 = (!234 !235 !277 !278 !282 !283 !287 !288)
!315 = (!234 !235 !277 !278 !282 !283 !287 !288)
!316 = span !184 3532 3574
!317 = (!234 !235 !277 !278 !282 !283 !287 !288 !316)
!318 = (!234 !235 !277 !278 !282 !283 !287 !288)
!319 = (!234 !235 !277 !278 !282 !283 !287 !288 !316)
!320 = (!234 !235 !277 !278 !282 !283 !287 !288 !316)
!321 = span !184 3588 3589
!322 = (!234 !235 !277 !278 !282 !283 !287 !288 !321)
!323 = (!234 !235 !277 !278 !282 !283 !287 !288)
!324 = (!234 !235 !277 !278 !282 !283 !287 !288)
!325 = span !184 3608 3612
!326 = (!234 !235 !277 !278 !282 !283 !287 !288 !325)
!327 = span !184 3608 3617
!328 = fn_call_path_span !184 3613 3615
!329 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328)
!330 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328)
!331 = span !184 3616 3617
!332 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328)
!333 = span !28 16833 16837
!334 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328 !333)
!335 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328)
!336 = span !28 16839 16844
!337 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328 !336)
!338 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328)
!339 = (!234 !235 !277 !278 !282 !283 !287 !288 !327 !328)
!340 = (!234 !235 !277 !278 !282 !283 !287 !288 !327)
!341 = span !184 3649 3653
!342 = (!234 !235 !277 !278 !282 !283 !287 !288 !341)
!343 = (!234 !235 !277 !278 !282 !283 !287 !288)
!344 = (!234 !235 !277 !278 !282 !283 !287 !288 !298)
!345 = (!234 !235 !277 !278 !282 !283 !287 !288)
!346 = span !184 3640 3733
!347 = (!234 !235 !277 !278 !282 !283 !287 !288 !346)
!348 = span !184 3682 3695
!349 = span !184 3632 3734
!350 = (!234 !235 !277 !278 !282 !283 !287 !288 !349)
!351 = (!234 !235 !277 !278 !282 !283 !287 !288 !349)
!352 = span !184 3774 3778
!353 = (!234 !235 !277 !278 !282 !283 !287 !288 !352)
!354 = (!234 !235 !277 !278 !282 !283 !287 !288)
!355 = (!234 !235 !277 !278 !282 !283 !287 !288 !298)
!356 = (!234 !235 !277 !278 !282 !283 !287 !288)
!357 = span !184 3784 3785
!358 = (!234 !235 !277 !278 !282 !283 !287 !288)
!359 = (!234 !235 !277 !278 !282 !283 !287 !288)
!360 = span !184 3747 3786
!361 = (!234 !235 !277 !278 !282 !283 !287 !288 !360)
!362 = (!234 !235 !277 !278 !282 !283 !287 !288)
!363 = (!234 !235 !277 !278 !282 !283 !287 !288 !360)
!364 = (!234 !235 !277 !278 !282 !283 !287 !288 !360)
!365 = span !184 3800 3801
!366 = (!234 !235 !277 !278 !282 !283 !287 !288 !365)
!367 = (!234 !235 !277 !278 !282 !283 !287 !288)
!368 = (!234 !235 !277 !278 !282 !283 !287 !288)
!369 = span !184 3831 3835
!370 = (!234 !235 !277 !278 !282 !283 !287 !288 !369)
!371 = span !184 3831 3855
!372 = fn_call_path_span !184 3836 3848
!373 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!374 = span !184 2775 2779
!375 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !374)
!376 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!377 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !298)
!378 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!379 = span !184 2766 2847
!380 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !379)
!381 = span !184 2804 2817
!382 = span !184 2758 2848
!383 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !382)
!384 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !382)
!385 = span !184 2884 2888
!386 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !385)
!387 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!388 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !298)
!389 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!390 = span !184 2894 2895
!391 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!392 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!393 = span !184 2857 2896
!394 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !393)
!395 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!396 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !393)
!397 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !393)
!398 = span !184 2906 2907
!399 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372 !398)
!400 = (!234 !235 !277 !278 !282 !283 !287 !288 !371 !372)
!401 = (!234 !235 !277 !278 !282 !283 !287 !288)
!402 = (!234 !235 !277 !278 !282 !283 !287 !288)
!403 = span !184 98634 98638
!404 = (!234 !235 !403)
!405 = span !184 98633 98661
!406 = (!234 !235 !405)
!407 = span !184 98675 98676
!408 = (!234 !235 !407)
!409 = span !184 98675 98681
!410 = fn_call_path_span !184 98677 98679
!411 = (!234 !235 !409 !410)
!412 = (!234 !235 !409 !410)
!413 = span !184 98680 98681
!414 = (!234 !235 !409 !410)
!415 = span !28 1322 1326
!416 = (!234 !235 !409 !410 !415)
!417 = (!234 !235 !409 !410)
!418 = span !28 1328 1333
!419 = (!234 !235 !409 !410 !418)
!420 = (!234 !235 !409 !410)
!421 = (!234 !235 !409 !410)
!422 = (!234 !235 !409)
!423 = (!234 !235 !409)
!424 = span !184 98703 98708
!425 = (!234 !235 !424)
!426 = span !184 79232 79236
!427 = span !184 79215 79356
!428 = fn_name_span !184 79222 79228
!429 = (!427 !428 !69)
!430 = span !184 79297 79301
!431 = span !184 79313 79326
!432 = fn_call_path_span !184 79313 79324
!433 = (!431 !432)
!434 = span !184 191 254
!435 = (!431 !432 !434)
!436 = span !184 79297 79327
!437 = fn_call_path_span !184 79302 79312
!438 = (!436 !437)
!439 = span !184 5679 5685
!440 = (!436 !437 !439)
!441 = span !184 87 114
!442 = (!436 !437 !441)
!443 = span !184 5694 5698
!444 = (!436 !437 !443)
!445 = span !184 5627 5710
!446 = (!436 !437 !445)
!447 = span !184 79284 79328
!448 = span !184 79333 79339
!449 = span !184 79333 79354
!450 = fn_call_path_span !184 79340 79352
!451 = (!449 !450)
!452 = span !184 573 577
!453 = (!449 !450 !452)
!454 = (!449 !450 !441)

;; ASM: Final program
;; Program kind: Script
.program:
move $$tmp $pc
jmpf $zero i4
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
CONFIGURABLES_OFFSET[0..32]
CONFIGURABLES_OFFSET[32..64]
lw   $$ds $$tmp i1
add  $$ds $$ds $$tmp
cfei i0                       ; allocate stack space for globals
move $$locbase $sp            ; save locals base register for function __entry
jal  $$reta $pc i2            ; [call]: call main_0
retd  $zero $zero
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function main_0
cfei i265024                  ; allocate 265024 bytes for locals and 0 slots for call arguments
move $r1 $$reta               ; save return address
addi $r0 $$locbase i32        ; get offset to local __ptr [u8; 5]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i153          ; [call]: call array_repeat_zero_small_u8_1
addi $r0 $$locbase i40        ; get offset to local __ptr [u64; 5]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i163          ; [call]: call array_repeat_zero_small_u16_2
addi $r0 $$locbase i80        ; get offset to local __ptr [u64; 5]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i173          ; [call]: call array_repeat_zero_small_u32_3
movi $r0 i32998               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i181          ; [call]: call array_repeat_zero_small_u64_4
movi $r0 i33003               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i189          ; [call]: call array_repeat_zero_small_u256_5
movi $r0 i33023               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i197          ; [call]: call array_repeat_zero_small_b256_6
movi $r0 i33043               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i205          ; [call]: call array_repeat_zero_small_bool_7
movi $r0 i33044               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i213          ; [call]: call array_repeat_zero_big_u8_8
movi $r0 i33048               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i221          ; [call]: call array_repeat_zero_big_u16_9
movi $r0 i33073               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i229          ; [call]: call array_repeat_zero_big_u32_10
movi $r0 i33098               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i237          ; [call]: call array_repeat_zero_big_u64_11
addi $r0 $$locbase i120       ; get offset to local __ptr [u256; 25]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i247          ; [call]: call array_repeat_zero_big_u256_12
addi $r0 $$locbase i920       ; get offset to local __ptr [b256; 25]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i257          ; [call]: call array_repeat_zero_big_b256_13
addi $r0 $$locbase i1720      ; get offset to local __ptr [bool; 25]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i267          ; [call]: call array_repeat_zero_big_bool_14
addi $r0 $$locbase i1752      ; get offset to local __ptr [bool; 5]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i277          ; [call]: call small_array_repeat_15
addi $r0 $$locbase i1760      ; get offset to local __ptr [bool; 25]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i304          ; [call]: call big_array_repeat_16
addi $r0 $$locbase i1792      ; get offset to local __ptr [u8; 262145]
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i321          ; [call]: call u8_array_bigger_than_18_bits_17
jal  $$reta $pc i335          ; [call]: call arrays_with_const_length_18
movi $r0 i32993               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i347          ; [call]: call decode_array_19
movi $r2 i33123               ; get word offset to local from base
muli $r2 $r2 i8               ; get byte offset to local from base
add  $r2 $$locbase $r2        ; get absolute byte offset to local
mcpi $r2 $r0 i1               ; copy memory
movi $r0 i33123               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $r0 $r2              ; add array element offset to array base
movi $r0 i33126               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $r2 i1               ; copy memory
movi $r0 i33127               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
movi $r3 i255                 ; initialize constant into register
sb   $r0 $r3 i0               ; store byte
lb   $r0 $r2 i0               ; load byte
movi $r2 i33127               ; get word offset to local from base
muli $r2 $r2 i8               ; get byte offset to local from base
add  $r2 $$locbase $r2        ; get absolute byte offset to local
lb   $r2 $r2 i0               ; load byte
eq   $r0 $r0 $r2
movi $r2 i33125               ; get word offset to local from base
muli $r2 $r2 i8               ; get byte offset to local from base
add  $r2 $$locbase $r2        ; get absolute byte offset to local
sb   $r2 $r0 i0               ; store byte
movi $r0 i33125               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lb   $r0 $r0 i0               ; load byte
eq   $r0 $r0 $zero
jnzf $r0 $zero i1
jmpf $zero i42
movi $r0 i33126               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lb   $r0 $r0 i0               ; load byte
movi $r1 i32994               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i506          ; [call]: call encode_43
mcpi $$locbase $r1 i16        ; copy memory
load $r0 data_NonConfigurable_0; load constant from data section
lw   $r1 $$locbase i0         ; load slice pointer for logging data
lw   $r2 $$locbase i1         ; load slice size for logging data
logd $zero $r0 $r1 $r2        ; log slice
movi $r0 i33127               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lb   $r0 $r0 i0               ; load byte
movi $r1 i32996               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i491          ; [call]: call encode_43
addi $r0 $$locbase i16        ; get offset to local __ptr slice
mcpi $r0 $r1 i16              ; copy memory
load $r0 data_NonConfigurable_0; load constant from data section
lw   $r1 $$locbase i2         ; load slice pointer for logging data
lw   $r2 $$locbase i3         ; load slice size for logging data
logd $zero $r0 $r1 $r2        ; log slice
addr $r0 data_NonConfigurable_1; get std::error_signals::FAILED_ASSERT_EQ_SIGNAL's address in data section
movi $r1 i33124               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
mcpi $r1 $r0 i8               ; copy memory
movi $r0 i33124               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lw   $r0 $r0 i0               ; load word
rvrt $r0
cfsi i265024                  ; free 265024 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u8_1
cfei i8                       ; allocate 8 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i5             ; clear memory [u8; 5], 5 bytes
mcpi $r0 $$locbase i5         ; copy memory
cfsi i8                       ; free 8 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u16_2
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i40            ; clear memory [u64; 5], 40 bytes
mcpi $r0 $$locbase i40        ; copy memory
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u32_3
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i40            ; clear memory [u64; 5], 40 bytes
mcpi $r0 $$locbase i40        ; copy memory
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u64_4
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i40            ; clear memory [u64; 5], 40 bytes
mcpi $r0 $$locbase i40        ; copy memory
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u256_5
cfei i160                     ; allocate 160 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i160           ; clear memory [u256; 5], 160 bytes
mcpi $r0 $$locbase i160       ; copy memory
cfsi i160                     ; free 160 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_b256_6
cfei i160                     ; allocate 160 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i160           ; clear memory [b256; 5], 160 bytes
mcpi $r0 $$locbase i160       ; copy memory
cfsi i160                     ; free 160 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_bool_7
cfei i8                       ; allocate 8 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i5             ; clear memory [bool; 5], 5 bytes
mcpi $r0 $$locbase i5         ; copy memory
cfsi i8                       ; free 8 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u8_8
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i25            ; clear memory [u8; 25], 25 bytes
mcpi $r0 $$locbase i25        ; copy memory
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u16_9
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r1 $$arg0               ; save argument 0 (__ret_value)
move $r0 $$reta               ; save return address
mcli $$locbase i200           ; clear memory [u64; 25], 200 bytes
mcpi $r1 $$locbase i200       ; copy memory
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u32_10
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i200           ; clear memory [u64; 25], 200 bytes
mcpi $r0 $$locbase i200       ; copy memory
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u64_11
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i200           ; clear memory [u64; 25], 200 bytes
mcpi $r0 $$locbase i200       ; copy memory
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u256_12
cfei i800                     ; allocate 800 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i800           ; clear memory [u256; 25], 800 bytes
mcpi $r0 $$locbase i800       ; copy memory
cfsi i800                     ; free 800 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_b256_13
cfei i800                     ; allocate 800 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i800           ; clear memory [b256; 25], 800 bytes
mcpi $r0 $$locbase i800       ; copy memory
cfsi i800                     ; free 800 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_bool_14
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i25            ; clear memory [bool; 25], 25 bytes
mcpi $r0 $$locbase i25        ; copy memory
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function small_array_repeat_15
cfei i8                       ; allocate 8 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
mul  $r2 $one $one            ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i2                   ; initialize constant into register
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i3                   ; initialize constant into register
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i4                   ; initialize constant into register
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
mcpi $r0 $$locbase i5         ; copy memory
cfsi i8                       ; free 8 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function big_array_repeat_16
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
move $r3 $zero                ; move parameter from branch to block argument
mul  $r2 $r3 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
add  $r3 $r3 $one
movi $r2 i25                  ; initialize constant into register
lt   $r2 $r3 $r2
jnzb $r2 $zero i5
mcpi $r0 $$locbase i25        ; copy memory
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function u8_array_bigger_than_18_bits_17
cfei i262152                  ; allocate 262152 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
load $$tmp data_NonConfigurable_2; loading clear size in bytes
mcl  $$locbase $$tmp          ; clear memory [u8; 262145]
load $$tmp data_NonConfigurable_2; loading copy size in bytes
mcp  $r0 $$locbase $$tmp      ; copy memory
cfsi i262152                  ; free 262152 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function arrays_with_const_length_18
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$reta               ; save return address
mcli $$locbase i8             ; clear memory [u64; 1], 8 bytes
addi $r1 $$locbase i8         ; get offset to local __ptr [u64; 1]
mcli $r1 i8                   ; clear memory [u64; 1], 8 bytes
addi $r1 $$locbase i16        ; get offset to local __ptr [u64; 1]
mcli $r1 i8                   ; clear memory [u64; 1], 8 bytes
addi $r1 $$locbase i24        ; get offset to local __ptr [u64; 2]
mcli $r1 i16                  ; clear memory [u64; 2], 16 bytes
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r0               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function decode_array_19
cfei i48                      ; allocate 48 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
movi $r3 i255                 ; initialize constant into register
sb   $r2 $r3 i0               ; store byte
addi $r2 $$locbase i8         ; get offset to local __ptr slice
move $$arg0 $$locbase         ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i14           ; [call]: call to_slice_20
addi $r3 $$locbase i32        ; get offset to local __ptr slice
mcpi $r3 $r2 i16              ; copy memory
addi $r2 $$locbase i32        ; get offset to local __ptr slice
addi $r3 $$locbase i24        ; get offset to local __ptr [u8; 1]
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i40           ; [call]: call abi_decode_24
mcpi $r0 $r3 i1               ; copy memory
cfsi i48                      ; free 48 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function to_slice_20
cfei i112                     ; allocate 112 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (__ret_value)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i64        ; get offset to local __ptr [u8; 1]
mcpi $r2 $$arg0 i1            ; copy memory
sw   $$locbase $one i9        ; store word
addi $r2 $$locbase i64        ; get offset to local __ptr [u8; 1]
sw   $$locbase $r2 i13        ; store word
addi $r2 $$locbase i104       ; get offset to local __ptr ptr
sw   $$locbase $one i10       ; store word
lw   $r3 $$locbase i9         ; load word
lw   $r4 $$locbase i10        ; load word
mul  $r3 $r3 $r4
addi $r4 $$locbase i16        ; get offset to local __ptr { ptr, u64 }
mcpi $r4 $r2 i8               ; copy memory
sw   $$locbase $r3 i3         ; store word
addi $r2 $$locbase i88        ; get offset to local __ptr { ptr, u64 }
mcpi $r2 $r4 i16              ; copy memory
addi $r2 $$locbase i88        ; get offset to local __ptr { ptr, u64 }
mcpi $$locbase $r2 i16        ; copy memory
addi $r2 $$locbase i32        ; get offset to local __ptr slice
mcpi $r2 $$locbase i16        ; copy memory
addi $r3 $$locbase i48        ; get offset to local __ptr slice
mcpi $r3 $r2 i16              ; copy memory
mcpi $r0 $r3 i16              ; copy memory
cfsi i112                     ; free 112 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function abi_decode_24
cfei i408                     ; allocate 408 bytes for locals and 0 slots for call arguments
move $r4 $$arg1               ; save argument 1 (__ret_value)
move $r3 $$reta               ; save return address
addi $r0 $$locbase i184       ; get offset to local __ptr slice
mcpi $r0 $$arg0 i16           ; copy memory
addi $r0 $$locbase i184       ; get offset to local __ptr slice
addi $r1 $$locbase i256       ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i256       ; get offset to local __ptr slice
addi $r1 $$locbase i352       ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i352       ; get offset to local __ptr slice
addi $r1 $$locbase i8         ; get offset to local __ptr { ptr, u64 }
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i88        ; get offset to local __ptr { ptr, u64 }
mcpi $r0 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local __ptr { ptr, u64 }
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i5         ; load word
addi $r1 $$locbase i184       ; get offset to local __ptr slice
addi $r2 $$locbase i272       ; get offset to local __ptr slice
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i272       ; get offset to local __ptr slice
addi $r2 $$locbase i368       ; get offset to local __ptr slice
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i368       ; get offset to local __ptr slice
addi $r2 $$locbase i24        ; get offset to local __ptr { ptr, u64 }
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i104       ; get offset to local __ptr { ptr, u64 }
mcpi $r1 $r2 i16              ; copy memory
addi $r2 $$locbase i56        ; get offset to local __ptr { ptr, u64 }
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $r2 i8               ; get offset to aggregate element
addi $r2 $$locbase i288       ; get offset to local __ptr u64
mcpi $r2 $r1 i8               ; copy memory
sw   $$locbase $one i27       ; store word
lw   $r1 $$locbase i36        ; load word
lw   $r2 $$locbase i27        ; load word
div  $r1 $r1 $r2
sw   $$locbase $r0 i31        ; store word
sw   $$locbase $r1 i17        ; store word
addi $r0 $$locbase i248       ; get offset to local __ptr ptr
addi $r1 $$locbase i72        ; get offset to local __ptr { ptr }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i120       ; get offset to local __ptr { ptr }
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i160       ; get offset to local __ptr { ptr }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i160       ; get offset to local __ptr { ptr }
sw   $$locbase $r0 i21        ; store word
sw   $$locbase $one i0        ; store word
addi $r0 $$locbase i80        ; get offset to local __ptr [u8; 1]
mcli $r0 i1                   ; clear memory [u8; 1], 1 bytes
addi $r1 $$locbase i144       ; get offset to local __ptr [u8; 1]
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i144       ; get offset to local __ptr [u8; 1]
sw   $$locbase $r0 i19        ; store word
sw   $$locbase $zero i25      ; store word
addi $r0 $$locbase i200       ; get offset to local __ptr u64
addi $r1 $$locbase i320       ; get offset to local __ptr u64
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i28       ; store word
lw   $r0 $$locbase i40        ; load word
lw   $r1 $$locbase i28        ; load word
lt   $r0 $r0 $r1
jnzf $r0 $zero i5
lw   $r0 $$locbase i19        ; load word
addi $r1 $$locbase i128       ; get offset to local __ptr [u8; 1]
mcpi $r1 $r0 i1               ; copy memory
mcpi $r4 $r1 i1               ; copy memory
jmpf $zero i65
lw   $r0 $$locbase i19        ; load word
lw   $r1 $$locbase i25        ; load word
mul  $r1 $r1 $one
add  $r0 $r0 $r1
sw   $$locbase $r0 i26        ; store word
addi $r0 $$locbase i168       ; get offset to local __ptr __ptr { ptr }
addi $r1 $$locbase i312       ; get offset to local __ptr __ptr { ptr }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i312       ; get offset to local __ptr __ptr { ptr }
addi $r1 $$locbase i176       ; get offset to local __ptr __ptr { ptr }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i176       ; get offset to local __ptr __ptr { ptr }
addi $r1 $$locbase i296       ; get offset to local __ptr __ptr { ptr }
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i43       ; store word
addi $r0 $$locbase i344       ; get offset to local __ptr u64
addi $r1 $$locbase i304       ; get offset to local __ptr u64
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i29       ; store word
lw   $r0 $$locbase i38        ; load word
lw   $r1 $$locbase i29        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i18
addi $r0 $$locbase i296       ; get offset to local __ptr __ptr { ptr }
addi $r1 $$locbase i328       ; get offset to local __ptr __ptr { ptr }
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i41        ; load word
lw   $r0 $r0 i0               ; load word
lw   $r0 $r0 i0               ; lw val ptr i0
addi $r1 $$locbase i392       ; get offset to local __ptr u8
sb   $r1 $r0 i0               ; store byte
lw   $r0 $$locbase i41        ; load word
lw   $r0 $r0 i0               ; load word
movi $r1 i8                   ; initialize constant into register
mul  $r1 $one $r1
add  $r0 $r0 $r1
lw   $r1 $$locbase i41        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i392       ; get offset to local __ptr u8
lb   $r0 $r0 i0               ; load byte
jmpf $zero i13
lw   $r0 $$locbase i37        ; load word
lw   $r0 $r0 i0               ; load word
lb   $r0 $r0 i0               ; lb val ptr i0
addi $r1 $$locbase i400       ; get offset to local __ptr u8
sb   $r1 $r0 i0               ; store byte
lw   $r0 $$locbase i37        ; load word
lw   $r0 $r0 i0               ; load word
mul  $r1 $one $one
add  $r0 $r0 $r1
lw   $r1 $$locbase i37        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i400       ; get offset to local __ptr u8
lb   $r0 $r0 i0               ; load byte
lw   $r1 $$locbase i26        ; load word
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i200       ; get offset to local __ptr u64
addi $r1 $$locbase i336       ; get offset to local __ptr u64
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i30       ; store word
lw   $r0 $$locbase i42        ; load word
lw   $r1 $$locbase i30        ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i25        ; store word
jmpb $zero i76
cfsi i408                     ; free 408 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i127                     ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function encode_43
cfei i424                     ; allocate 424 bytes for locals and 0 slots for call arguments
move $r6 $$arg1               ; save argument 1 (__ret_value)
move $r5 $$reta               ; save return address
addi $r0 $$locbase i384       ; get offset to local __ptr u8
sb   $r0 $$arg0 i0            ; store byte
addi $r0 $$locbase i384       ; get offset to local __ptr u8
movi $r1 i1024                ; initialize constant into register
aloc $r1
addi $r1 $$locbase i112       ; get offset to local __ptr { ptr, u64, u64 }
sw   $$locbase $hp i14        ; store word
movi $r2 i1024                ; initialize constant into register
sw   $$locbase $r2 i15        ; store word
sw   $$locbase $zero i16      ; store word
mcpi $$locbase $r1 i24        ; copy memory
addi $r1 $$locbase i184       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $$locbase i24        ; copy memory
addi $r2 $$locbase i272       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i392       ; get offset to local __ptr u8
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i360       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r2 i24              ; copy memory
addi $r0 $$locbase i360       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i24        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i136       ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r0 $r1 i24              ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r4 $$locbase i18        ; load word
lw   $r1 $$locbase i19        ; load word
addi $r2 $$locbase i392       ; get offset to local __ptr u8
lb   $r2 $r2 i0               ; load byte
add  $r3 $r1 $one
gt   $r3 $r3 $r4
jnzf $r3 $zero i1
jmpf $zero i6
movi $r3 i2                   ; initialize constant into register
mul  $r3 $r4 $r3
add  $r4 $r3 $one
aloc $r4
mcp  $hp $r0 $r1
move $r0 $hp                  ; move parameter from branch to block argument
add  $r3 $r0 $r1
sb   $r3 $r2 i0               ; store byte
add  $r1 $r1 $one
addi $r2 $$locbase i208       ; get offset to local __ptr { ptr, u64, u64 }
sw   $$locbase $r0 i26        ; store word
sw   $$locbase $r4 i27        ; store word
sw   $$locbase $r1 i28        ; store word
addi $r0 $$locbase i48        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r0 $r2 i24              ; copy memory
addi $r1 $$locbase i248       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i296       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $$locbase i336       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i336       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i400       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i400       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i72        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i160       ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $r0 i16              ; get offset to aggregate element
addi $r2 $$locbase i232       ; get offset to local __ptr { ptr, u64 }
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i96        ; get offset to local __ptr slice
mcpi $r0 $r2 i16              ; copy memory
addi $r1 $$locbase i320       ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
mcpi $r6 $r1 i16              ; copy memory
cfsi i424                     ; free 424 bytes for locals and 0 slots for extra call arguments
move $$reta $r5               ; restore return address
poph i524288                  ; restore registers 40..64
popl i127                     ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
.data:
data_NonConfigurable_0 .word 14454674236531057292
data_NonConfigurable_1 .word 18446744073709486083
data_NonConfigurable_2 .word 262145


;; --- START OF TARGET BYTECODE ---

0x00000000 MOVE R60 $pc                                    ;; [26, 240, 48, 0]
0x00000004 JMPF $zero 0x4                                  ;; [116, 0, 0, 4]
0x00000008                                                 ;; [0, 0, 0, 0, 0, 0, 11, 72]
0x00000010                                                 ;; [0, 0, 0, 0, 0, 0, 0, 0]
0x00000018 LW R63 R60 0x1                                  ;; [93, 255, 192, 1]
0x0000001c ADD R63 R63 R60                                 ;; [16, 255, 255, 0]
0x00000020 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000024 JAL R62 $pc 0x2                                 ;; [153, 248, 48, 2]
0x00000028 RETD $zero $zero                                ;; [37, 0, 0, 0]
0x0000002c PSHL 0xf                                        ;; [149, 0, 0, 15]
0x00000030 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000034 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000038 CFEI 0x40b40                                    ;; [145, 4, 11, 64]
0x0000003c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000040 ADDI $writable R59 0x20                         ;; [80, 67, 176, 32]
0x00000044 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000048 JAL R62 $pc 0x99                                ;; [153, 248, 48, 153]
0x0000004c ADDI $writable R59 0x28                         ;; [80, 67, 176, 40]
0x00000050 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000054 JAL R62 $pc 0xa3                                ;; [153, 248, 48, 163]
0x00000058 ADDI $writable R59 0x50                         ;; [80, 67, 176, 80]
0x0000005c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000060 JAL R62 $pc 0xad                                ;; [153, 248, 48, 173]
0x00000064 MOVI $writable 0x80e6                           ;; [114, 64, 128, 230]
0x00000068 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000006c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000070 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000074 JAL R62 $pc 0xb5                                ;; [153, 248, 48, 181]
0x00000078 MOVI $writable 0x80eb                           ;; [114, 64, 128, 235]
0x0000007c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000080 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000084 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000088 JAL R62 $pc 0xbd                                ;; [153, 248, 48, 189]
0x0000008c MOVI $writable 0x80ff                           ;; [114, 64, 128, 255]
0x00000090 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000094 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000098 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000009c JAL R62 $pc 0xc5                                ;; [153, 248, 48, 197]
0x000000a0 MOVI $writable 0x8113                           ;; [114, 64, 129, 19]
0x000000a4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000a8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000ac MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000000b0 JAL R62 $pc 0xcd                                ;; [153, 248, 48, 205]
0x000000b4 MOVI $writable 0x8114                           ;; [114, 64, 129, 20]
0x000000b8 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000bc ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000c0 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000000c4 JAL R62 $pc 0xd5                                ;; [153, 248, 48, 213]
0x000000c8 MOVI $writable 0x8118                           ;; [114, 64, 129, 24]
0x000000cc MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000d0 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000d4 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000000d8 JAL R62 $pc 0xdd                                ;; [153, 248, 48, 221]
0x000000dc MOVI $writable 0x8131                           ;; [114, 64, 129, 49]
0x000000e0 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000e4 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000e8 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000000ec JAL R62 $pc 0xe5                                ;; [153, 248, 48, 229]
0x000000f0 MOVI $writable 0x814a                           ;; [114, 64, 129, 74]
0x000000f4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000f8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000fc MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000100 JAL R62 $pc 0xed                                ;; [153, 248, 48, 237]
0x00000104 ADDI $writable R59 0x78                         ;; [80, 67, 176, 120]
0x00000108 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000010c JAL R62 $pc 0xf7                                ;; [153, 248, 48, 247]
0x00000110 ADDI $writable R59 0x398                        ;; [80, 67, 179, 152]
0x00000114 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000118 JAL R62 $pc 0x101                               ;; [153, 248, 49, 1]
0x0000011c ADDI $writable R59 0x6b8                        ;; [80, 67, 182, 184]
0x00000120 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000124 JAL R62 $pc 0x10b                               ;; [153, 248, 49, 11]
0x00000128 ADDI $writable R59 0x6d8                        ;; [80, 67, 182, 216]
0x0000012c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000130 JAL R62 $pc 0x115                               ;; [153, 248, 49, 21]
0x00000134 ADDI $writable R59 0x6e0                        ;; [80, 67, 182, 224]
0x00000138 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000013c JAL R62 $pc 0x130                               ;; [153, 248, 49, 48]
0x00000140 ADDI $writable R59 0x700                        ;; [80, 67, 183, 0]
0x00000144 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000148 JAL R62 $pc 0x141                               ;; [153, 248, 49, 65]
0x0000014c JAL R62 $pc 0x14f                               ;; [153, 248, 49, 79]
0x00000150 MOVI $writable 0x80e1                           ;; [114, 64, 128, 225]
0x00000154 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000158 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x0000015c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000160 JAL R62 $pc 0x15b                               ;; [153, 248, 49, 91]
0x00000164 MOVI R18 0x8163                                 ;; [114, 72, 129, 99]
0x00000168 MULI R18 R18 0x8                                ;; [85, 73, 32, 8]
0x0000016c ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x00000170 MCPI R18 $writable 0x1                          ;; [96, 73, 0, 1]
0x00000174 MOVI $writable 0x8163                           ;; [114, 64, 129, 99]
0x00000178 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000017c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000180 MUL R18 $zero $one                              ;; [27, 72, 0, 64]
0x00000184 ADD R18 $writable R18                           ;; [16, 73, 4, 128]
0x00000188 MOVI $writable 0x8166                           ;; [114, 64, 129, 102]
0x0000018c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000190 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000194 MCPI $writable R18 0x1                          ;; [96, 65, 32, 1]
0x00000198 MOVI $writable 0x8167                           ;; [114, 64, 129, 103]
0x0000019c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001a0 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001a4 MOVI R19 0xff                                   ;; [114, 76, 0, 255]
0x000001a8 SB $writable R19 0x0                            ;; [94, 65, 48, 0]
0x000001ac LB $writable R18 0x0                            ;; [92, 65, 32, 0]
0x000001b0 MOVI R18 0x8167                                 ;; [114, 72, 129, 103]
0x000001b4 MULI R18 R18 0x8                                ;; [85, 73, 32, 8]
0x000001b8 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000001bc LB R18 R18 0x0                                  ;; [92, 73, 32, 0]
0x000001c0 EQ $writable $writable R18                      ;; [19, 65, 4, 128]
0x000001c4 MOVI R18 0x8165                                 ;; [114, 72, 129, 101]
0x000001c8 MULI R18 R18 0x8                                ;; [85, 73, 32, 8]
0x000001cc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000001d0 SB R18 $writable 0x0                            ;; [94, 73, 0, 0]
0x000001d4 MOVI $writable 0x8165                           ;; [114, 64, 129, 101]
0x000001d8 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001dc ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001e0 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x000001e4 EQ $writable $writable $zero                    ;; [19, 65, 0, 0]
0x000001e8 JNZF $writable $zero 0x1                        ;; [118, 64, 0, 1]
0x000001ec JMPF $zero 0x2a                                 ;; [116, 0, 0, 42]
0x000001f0 MOVI $writable 0x8166                           ;; [114, 64, 129, 102]
0x000001f4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001f8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001fc LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000200 MOVI R17 0x80e2                                 ;; [114, 68, 128, 226]
0x00000204 MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x00000208 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x0000020c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000210 MOVE R57 R17                                    ;; [26, 229, 16, 0]
0x00000214 JAL R62 $pc 0x1fa                               ;; [153, 248, 49, 250]
0x00000218 MCPI R59 R17 0x10                               ;; [96, 237, 16, 16]
0x0000021c LW $writable R63 0x0                            ;; [93, 67, 240, 0]
0x00000220 LW R17 R59 0x0                                  ;; [93, 71, 176, 0]
0x00000224 LW R18 R59 0x1                                  ;; [93, 75, 176, 1]
0x00000228 LOGD $zero $writable R17 R18                    ;; [52, 1, 4, 82]
0x0000022c MOVI $writable 0x8167                           ;; [114, 64, 129, 103]
0x00000230 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000234 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000238 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x0000023c MOVI R17 0x80e4                                 ;; [114, 68, 128, 228]
0x00000240 MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x00000244 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x00000248 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000024c MOVE R57 R17                                    ;; [26, 229, 16, 0]
0x00000250 JAL R62 $pc 0x1eb                               ;; [153, 248, 49, 235]
0x00000254 ADDI $writable R59 0x10                         ;; [80, 67, 176, 16]
0x00000258 MCPI $writable R17 0x10                         ;; [96, 65, 16, 16]
0x0000025c LW $writable R63 0x0                            ;; [93, 67, 240, 0]
0x00000260 LW R17 R59 0x2                                  ;; [93, 71, 176, 2]
0x00000264 LW R18 R59 0x3                                  ;; [93, 75, 176, 3]
0x00000268 LOGD $zero $writable R17 R18                    ;; [52, 1, 4, 82]
0x0000026c MOVI $writable 0x8                              ;; [114, 64, 0, 8]
0x00000270 ADD $writable $writable R63                     ;; [16, 65, 15, 192]
0x00000274 MOVI R17 0x8164                                 ;; [114, 68, 129, 100]
0x00000278 MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x0000027c ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x00000280 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000284 MOVI $writable 0x8164                           ;; [114, 64, 129, 100]
0x00000288 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000028c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000290 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000294 RVRT $writable                                  ;; [54, 64, 0, 0]
0x00000298 CFSI 0x40b40                                    ;; [146, 4, 11, 64]
0x0000029c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000002a0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000002a4 POPL 0xf                                        ;; [151, 0, 0, 15]
0x000002a8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000002ac PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000002b0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000002b4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000002b8 CFEI 0x8                                        ;; [145, 0, 0, 8]
0x000002bc MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000002c0 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000002c4 MCLI R59 0x5                                    ;; [112, 236, 0, 5]
0x000002c8 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000002cc CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000002d0 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000002d4 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000002d8 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000002dc JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000002e0 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000002e4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000002e8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000002ec CFEI 0x28                                       ;; [145, 0, 0, 40]
0x000002f0 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000002f4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000002f8 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x000002fc MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x00000300 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x00000304 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000308 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000030c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000310 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000314 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000318 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000031c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000320 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000324 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000328 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000032c MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x00000330 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x00000334 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x00000338 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000033c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000340 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000344 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000348 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000034c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000350 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000354 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000358 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000035c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000360 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x00000364 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x00000368 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x0000036c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000370 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000374 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000378 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000037c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000380 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000384 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000388 CFEI 0xa0                                       ;; [145, 0, 0, 160]
0x0000038c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000390 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000394 MCLI R59 0xa0                                   ;; [112, 236, 0, 160]
0x00000398 MCPI $writable R59 0xa0                         ;; [96, 67, 176, 160]
0x0000039c CFSI 0xa0                                       ;; [146, 0, 0, 160]
0x000003a0 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000003a4 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000003a8 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000003ac JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000003b0 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000003b4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000003b8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000003bc CFEI 0xa0                                       ;; [145, 0, 0, 160]
0x000003c0 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000003c4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000003c8 MCLI R59 0xa0                                   ;; [112, 236, 0, 160]
0x000003cc MCPI $writable R59 0xa0                         ;; [96, 67, 176, 160]
0x000003d0 CFSI 0xa0                                       ;; [146, 0, 0, 160]
0x000003d4 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000003d8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000003dc POPL 0x3                                        ;; [151, 0, 0, 3]
0x000003e0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000003e4 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000003e8 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000003ec MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000003f0 CFEI 0x8                                        ;; [145, 0, 0, 8]
0x000003f4 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000003f8 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000003fc MCLI R59 0x5                                    ;; [112, 236, 0, 5]
0x00000400 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x00000404 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x00000408 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000040c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000410 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000414 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000418 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000041c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000420 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000424 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x00000428 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000042c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000430 MCLI R59 0x19                                   ;; [112, 236, 0, 25]
0x00000434 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x00000438 CFSI 0x20                                       ;; [146, 0, 0, 32]
0x0000043c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000440 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000444 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000448 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000044c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000450 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000454 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000458 CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x0000045c MOVE R17 R58                                    ;; [26, 71, 160, 0]
0x00000460 MOVE $writable R62                              ;; [26, 67, 224, 0]
0x00000464 MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x00000468 MCPI R17 R59 0xc8                               ;; [96, 71, 176, 200]
0x0000046c CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x00000470 MOVE R62 $writable                              ;; [26, 249, 0, 0]
0x00000474 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000478 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000047c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000480 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000484 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000488 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000048c CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x00000490 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000494 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000498 MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x0000049c MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x000004a0 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x000004a4 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000004a8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000004ac POPL 0x3                                        ;; [151, 0, 0, 3]
0x000004b0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000004b4 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000004b8 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000004bc MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000004c0 CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x000004c4 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000004c8 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000004cc MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x000004d0 MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x000004d4 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x000004d8 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000004dc POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000004e0 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000004e4 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000004e8 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000004ec PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000004f0 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000004f4 CFEI 0x320                                      ;; [145, 0, 3, 32]
0x000004f8 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000004fc MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000500 MCLI R59 0x320                                  ;; [112, 236, 3, 32]
0x00000504 MCPI $writable R59 0x320                        ;; [96, 67, 179, 32]
0x00000508 CFSI 0x320                                      ;; [146, 0, 3, 32]
0x0000050c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000510 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000514 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000518 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000051c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000520 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000524 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000528 CFEI 0x320                                      ;; [145, 0, 3, 32]
0x0000052c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000530 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000534 MCLI R59 0x320                                  ;; [112, 236, 3, 32]
0x00000538 MCPI $writable R59 0x320                        ;; [96, 67, 179, 32]
0x0000053c CFSI 0x320                                      ;; [146, 0, 3, 32]
0x00000540 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000544 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000548 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000054c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000550 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000554 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000558 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000055c CFEI 0x20                                       ;; [145, 0, 0, 32]
0x00000560 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000564 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000568 MCLI R59 0x19                                   ;; [112, 236, 0, 25]
0x0000056c MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x00000570 CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000574 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000578 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000057c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000580 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000584 PSHL 0x7                                        ;; [149, 0, 0, 7]
0x00000588 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000058c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000590 CFEI 0x8                                        ;; [145, 0, 0, 8]
0x00000594 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000598 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000059c MUL R18 $zero $one                              ;; [27, 72, 0, 64]
0x000005a0 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000005a4 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000005a8 MUL R18 $one $one                               ;; [27, 72, 16, 64]
0x000005ac ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000005b0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000005b4 MOVI R18 0x2                                    ;; [114, 72, 0, 2]
0x000005b8 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000005bc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000005c0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000005c4 MOVI R18 0x3                                    ;; [114, 72, 0, 3]
0x000005c8 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000005cc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000005d0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000005d4 MOVI R18 0x4                                    ;; [114, 72, 0, 4]
0x000005d8 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000005dc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000005e0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000005e4 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000005e8 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000005ec MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000005f0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000005f4 POPL 0x7                                        ;; [151, 0, 0, 7]
0x000005f8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000005fc PSHL 0xf                                        ;; [149, 0, 0, 15]
0x00000600 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000604 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000608 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x0000060c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000610 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000614 MOVE R19 $zero                                  ;; [26, 76, 0, 0]
0x00000618 MUL R18 R19 $one                                ;; [27, 73, 48, 64]
0x0000061c ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x00000620 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x00000624 ADD R19 R19 $one                                ;; [16, 77, 48, 64]
0x00000628 MOVI R18 0x19                                   ;; [114, 72, 0, 25]
0x0000062c LT R18 R19 R18                                  ;; [22, 73, 52, 128]
0x00000630 JNZB R18 $zero 0x5                              ;; [119, 72, 0, 5]
0x00000634 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x00000638 CFSI 0x20                                       ;; [146, 0, 0, 32]
0x0000063c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000640 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000644 POPL 0xf                                        ;; [151, 0, 0, 15]
0x00000648 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000064c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000650 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000654 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000658 CFEI 0x40008                                    ;; [145, 4, 0, 8]
0x0000065c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000660 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000664 LW R60 R63 0x2                                  ;; [93, 243, 240, 2]
0x00000668 MCL R59 R60                                     ;; [39, 239, 192, 0]
0x0000066c LW R60 R63 0x2                                  ;; [93, 243, 240, 2]
0x00000670 MCP $writable R59 R60                           ;; [40, 67, 191, 0]
0x00000674 CFSI 0x40008                                    ;; [146, 4, 0, 8]
0x00000678 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000067c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000680 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000684 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000688 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000068c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000690 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000694 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000698 MOVE $writable R62                              ;; [26, 67, 224, 0]
0x0000069c MCLI R59 0x8                                    ;; [112, 236, 0, 8]
0x000006a0 ADDI R17 R59 0x8                                ;; [80, 71, 176, 8]
0x000006a4 MCLI R17 0x8                                    ;; [112, 68, 0, 8]
0x000006a8 ADDI R17 R59 0x10                               ;; [80, 71, 176, 16]
0x000006ac MCLI R17 0x8                                    ;; [112, 68, 0, 8]
0x000006b0 ADDI R17 R59 0x18                               ;; [80, 71, 176, 24]
0x000006b4 MCLI R17 0x10                                   ;; [112, 68, 0, 16]
0x000006b8 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x000006bc MOVE R62 $writable                              ;; [26, 249, 0, 0]
0x000006c0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000006c4 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000006c8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000006cc PSHL 0xf                                        ;; [149, 0, 0, 15]
0x000006d0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000006d4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000006d8 CFEI 0x30                                       ;; [145, 0, 0, 48]
0x000006dc MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000006e0 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000006e4 MUL R18 $zero $one                              ;; [27, 72, 0, 64]
0x000006e8 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000006ec MOVI R19 0xff                                   ;; [114, 76, 0, 255]
0x000006f0 SB R18 R19 0x0                                  ;; [94, 73, 48, 0]
0x000006f4 ADDI R18 R59 0x8                                ;; [80, 75, 176, 8]
0x000006f8 MOVE R58 R59                                    ;; [26, 235, 176, 0]
0x000006fc MOVE R57 R18                                    ;; [26, 229, 32, 0]
0x00000700 JAL R62 $pc 0xe                                 ;; [153, 248, 48, 14]
0x00000704 ADDI R19 R59 0x20                               ;; [80, 79, 176, 32]
0x00000708 MCPI R19 R18 0x10                               ;; [96, 77, 32, 16]
0x0000070c ADDI R18 R59 0x20                               ;; [80, 75, 176, 32]
0x00000710 ADDI R19 R59 0x18                               ;; [80, 79, 176, 24]
0x00000714 MOVE R58 R18                                    ;; [26, 233, 32, 0]
0x00000718 MOVE R57 R19                                    ;; [26, 229, 48, 0]
0x0000071c JAL R62 $pc 0x28                                ;; [153, 248, 48, 40]
0x00000720 MCPI $writable R19 0x1                          ;; [96, 65, 48, 1]
0x00000724 CFSI 0x30                                       ;; [146, 0, 0, 48]
0x00000728 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000072c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000730 POPL 0xf                                        ;; [151, 0, 0, 15]
0x00000734 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000738 PSHL 0x1f                                       ;; [149, 0, 0, 31]
0x0000073c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000740 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000744 CFEI 0x70                                       ;; [145, 0, 0, 112]
0x00000748 MOVE $writable R57                              ;; [26, 67, 144, 0]
0x0000074c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000750 ADDI R18 R59 0x40                               ;; [80, 75, 176, 64]
0x00000754 MCPI R18 R58 0x1                                ;; [96, 75, 160, 1]
0x00000758 SW R59 $one 0x9                                 ;; [95, 236, 16, 9]
0x0000075c ADDI R18 R59 0x40                               ;; [80, 75, 176, 64]
0x00000760 SW R59 R18 0xd                                  ;; [95, 237, 32, 13]
0x00000764 ADDI R18 R59 0x68                               ;; [80, 75, 176, 104]
0x00000768 SW R59 $one 0xa                                 ;; [95, 236, 16, 10]
0x0000076c LW R19 R59 0x9                                  ;; [93, 79, 176, 9]
0x00000770 LW R20 R59 0xa                                  ;; [93, 83, 176, 10]
0x00000774 MUL R19 R19 R20                                 ;; [27, 77, 53, 0]
0x00000778 ADDI R20 R59 0x10                               ;; [80, 83, 176, 16]
0x0000077c MCPI R20 R18 0x8                                ;; [96, 81, 32, 8]
0x00000780 SW R59 R19 0x3                                  ;; [95, 237, 48, 3]
0x00000784 ADDI R18 R59 0x58                               ;; [80, 75, 176, 88]
0x00000788 MCPI R18 R20 0x10                               ;; [96, 73, 64, 16]
0x0000078c ADDI R18 R59 0x58                               ;; [80, 75, 176, 88]
0x00000790 MCPI R59 R18 0x10                               ;; [96, 237, 32, 16]
0x00000794 ADDI R18 R59 0x20                               ;; [80, 75, 176, 32]
0x00000798 MCPI R18 R59 0x10                               ;; [96, 75, 176, 16]
0x0000079c ADDI R19 R59 0x30                               ;; [80, 79, 176, 48]
0x000007a0 MCPI R19 R18 0x10                               ;; [96, 77, 32, 16]
0x000007a4 MCPI $writable R19 0x10                         ;; [96, 65, 48, 16]
0x000007a8 CFSI 0x70                                       ;; [146, 0, 0, 112]
0x000007ac MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000007b0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000007b4 POPL 0x1f                                       ;; [151, 0, 0, 31]
0x000007b8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000007bc PSHL 0x1f                                       ;; [149, 0, 0, 31]
0x000007c0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000007c4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000007c8 CFEI 0x198                                      ;; [145, 0, 1, 152]
0x000007cc MOVE R20 R57                                    ;; [26, 83, 144, 0]
0x000007d0 MOVE R19 R62                                    ;; [26, 79, 224, 0]
0x000007d4 ADDI $writable R59 0xb8                         ;; [80, 67, 176, 184]
0x000007d8 MCPI $writable R58 0x10                         ;; [96, 67, 160, 16]
0x000007dc ADDI $writable R59 0xb8                         ;; [80, 67, 176, 184]
0x000007e0 ADDI R17 R59 0x100                              ;; [80, 71, 177, 0]
0x000007e4 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x000007e8 ADDI $writable R59 0x100                        ;; [80, 67, 177, 0]
0x000007ec ADDI R17 R59 0x160                              ;; [80, 71, 177, 96]
0x000007f0 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x000007f4 ADDI $writable R59 0x160                        ;; [80, 67, 177, 96]
0x000007f8 ADDI R17 R59 0x8                                ;; [80, 71, 176, 8]
0x000007fc MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000800 ADDI $writable R59 0x58                         ;; [80, 67, 176, 88]
0x00000804 MCPI $writable R17 0x10                         ;; [96, 65, 16, 16]
0x00000808 ADDI R17 R59 0x28                               ;; [80, 71, 176, 40]
0x0000080c MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000810 LW $writable R59 0x5                            ;; [93, 67, 176, 5]
0x00000814 ADDI R17 R59 0xb8                               ;; [80, 71, 176, 184]
0x00000818 ADDI R18 R59 0x110                              ;; [80, 75, 177, 16]
0x0000081c MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000820 ADDI R17 R59 0x110                              ;; [80, 71, 177, 16]
0x00000824 ADDI R18 R59 0x170                              ;; [80, 75, 177, 112]
0x00000828 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x0000082c ADDI R17 R59 0x170                              ;; [80, 71, 177, 112]
0x00000830 ADDI R18 R59 0x18                               ;; [80, 75, 176, 24]
0x00000834 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000838 ADDI R17 R59 0x68                               ;; [80, 71, 176, 104]
0x0000083c MCPI R17 R18 0x10                               ;; [96, 69, 32, 16]
0x00000840 ADDI R18 R59 0x38                               ;; [80, 75, 176, 56]
0x00000844 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000848 ADDI R17 R18 0x8                                ;; [80, 69, 32, 8]
0x0000084c ADDI R18 R59 0x120                              ;; [80, 75, 177, 32]
0x00000850 MCPI R18 R17 0x8                                ;; [96, 73, 16, 8]
0x00000854 SW R59 $one 0x1b                                ;; [95, 236, 16, 27]
0x00000858 LW R17 R59 0x24                                 ;; [93, 71, 176, 36]
0x0000085c LW R18 R59 0x1b                                 ;; [93, 75, 176, 27]
0x00000860 DIV R17 R17 R18                                 ;; [18, 69, 20, 128]
0x00000864 SW R59 $writable 0x1f                           ;; [95, 237, 0, 31]
0x00000868 SW R59 R17 0x11                                 ;; [95, 237, 16, 17]
0x0000086c ADDI $writable R59 0xf8                         ;; [80, 67, 176, 248]
0x00000870 ADDI R17 R59 0x48                               ;; [80, 71, 176, 72]
0x00000874 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000878 ADDI $writable R59 0x78                         ;; [80, 67, 176, 120]
0x0000087c MCPI $writable R17 0x8                          ;; [96, 65, 16, 8]
0x00000880 ADDI R17 R59 0xa0                               ;; [80, 71, 176, 160]
0x00000884 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000888 ADDI $writable R59 0xa0                         ;; [80, 67, 176, 160]
0x0000088c SW R59 $writable 0x15                           ;; [95, 237, 0, 21]
0x00000890 SW R59 $one 0x0                                 ;; [95, 236, 16, 0]
0x00000894 ADDI $writable R59 0x50                         ;; [80, 67, 176, 80]
0x00000898 MCLI $writable 0x1                              ;; [112, 64, 0, 1]
0x0000089c ADDI R17 R59 0x90                               ;; [80, 71, 176, 144]
0x000008a0 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x000008a4 ADDI $writable R59 0x90                         ;; [80, 67, 176, 144]
0x000008a8 SW R59 $writable 0x13                           ;; [95, 237, 0, 19]
0x000008ac SW R59 $zero 0x19                               ;; [95, 236, 0, 25]
0x000008b0 ADDI $writable R59 0xc8                         ;; [80, 67, 176, 200]
0x000008b4 ADDI R17 R59 0x140                              ;; [80, 71, 177, 64]
0x000008b8 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x000008bc SW R59 $one 0x1c                                ;; [95, 236, 16, 28]
0x000008c0 LW $writable R59 0x28                           ;; [93, 67, 176, 40]
0x000008c4 LW R17 R59 0x1c                                 ;; [93, 71, 176, 28]
0x000008c8 LT $writable $writable R17                      ;; [22, 65, 4, 64]
0x000008cc JNZF $writable $zero 0x5                        ;; [118, 64, 0, 5]
0x000008d0 LW $writable R59 0x13                           ;; [93, 67, 176, 19]
0x000008d4 ADDI R17 R59 0x80                               ;; [80, 71, 176, 128]
0x000008d8 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x000008dc MCPI R20 R17 0x1                                ;; [96, 81, 16, 1]
0x000008e0 JMPF $zero 0x41                                 ;; [116, 0, 0, 65]
0x000008e4 LW $writable R59 0x13                           ;; [93, 67, 176, 19]
0x000008e8 LW R17 R59 0x19                                 ;; [93, 71, 176, 25]
0x000008ec MUL R17 R17 $one                                ;; [27, 69, 16, 64]
0x000008f0 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x000008f4 SW R59 $writable 0x1a                           ;; [95, 237, 0, 26]
0x000008f8 ADDI $writable R59 0xa8                         ;; [80, 67, 176, 168]
0x000008fc ADDI R17 R59 0x138                              ;; [80, 71, 177, 56]
0x00000900 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000904 ADDI $writable R59 0x138                        ;; [80, 67, 177, 56]
0x00000908 ADDI R17 R59 0xb0                               ;; [80, 71, 176, 176]
0x0000090c MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000910 ADDI $writable R59 0xb0                         ;; [80, 67, 176, 176]
0x00000914 ADDI R17 R59 0x128                              ;; [80, 71, 177, 40]
0x00000918 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x0000091c SW R59 $one 0x2b                                ;; [95, 236, 16, 43]
0x00000920 ADDI $writable R59 0x158                        ;; [80, 67, 177, 88]
0x00000924 ADDI R17 R59 0x130                              ;; [80, 71, 177, 48]
0x00000928 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x0000092c SW R59 $one 0x1d                                ;; [95, 236, 16, 29]
0x00000930 LW $writable R59 0x26                           ;; [93, 67, 176, 38]
0x00000934 LW R17 R59 0x1d                                 ;; [93, 71, 176, 29]
0x00000938 EQ $writable $writable R17                      ;; [19, 65, 4, 64]
0x0000093c JNZF $writable $zero 0x12                       ;; [118, 64, 0, 18]
0x00000940 ADDI $writable R59 0x128                        ;; [80, 67, 177, 40]
0x00000944 ADDI R17 R59 0x148                              ;; [80, 71, 177, 72]
0x00000948 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x0000094c LW $writable R59 0x29                           ;; [93, 67, 176, 41]
0x00000950 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000954 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000958 ADDI R17 R59 0x188                              ;; [80, 71, 177, 136]
0x0000095c SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x00000960 LW $writable R59 0x29                           ;; [93, 67, 176, 41]
0x00000964 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000968 MOVI R17 0x8                                    ;; [114, 68, 0, 8]
0x0000096c MUL R17 $one R17                                ;; [27, 68, 20, 64]
0x00000970 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x00000974 LW R17 R59 0x29                                 ;; [93, 71, 176, 41]
0x00000978 SW R17 $writable 0x0                            ;; [95, 69, 0, 0]
0x0000097c ADDI $writable R59 0x188                        ;; [80, 67, 177, 136]
0x00000980 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000984 JMPF $zero 0xd                                  ;; [116, 0, 0, 13]
0x00000988 LW $writable R59 0x25                           ;; [93, 67, 176, 37]
0x0000098c LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000990 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000994 ADDI R17 R59 0x190                              ;; [80, 71, 177, 144]
0x00000998 SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x0000099c LW $writable R59 0x25                           ;; [93, 67, 176, 37]
0x000009a0 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x000009a4 MUL R17 $one $one                               ;; [27, 68, 16, 64]
0x000009a8 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x000009ac LW R17 R59 0x25                                 ;; [93, 71, 176, 37]
0x000009b0 SW R17 $writable 0x0                            ;; [95, 69, 0, 0]
0x000009b4 ADDI $writable R59 0x190                        ;; [80, 67, 177, 144]
0x000009b8 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x000009bc LW R17 R59 0x1a                                 ;; [93, 71, 176, 26]
0x000009c0 SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x000009c4 ADDI $writable R59 0xc8                         ;; [80, 67, 176, 200]
0x000009c8 ADDI R17 R59 0x150                              ;; [80, 71, 177, 80]
0x000009cc MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x000009d0 SW R59 $one 0x1e                                ;; [95, 236, 16, 30]
0x000009d4 LW $writable R59 0x2a                           ;; [93, 67, 176, 42]
0x000009d8 LW R17 R59 0x1e                                 ;; [93, 71, 176, 30]
0x000009dc ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x000009e0 SW R59 $writable 0x19                           ;; [95, 237, 0, 25]
0x000009e4 JMPB $zero 0x4c                                 ;; [117, 0, 0, 76]
0x000009e8 CFSI 0x198                                      ;; [146, 0, 1, 152]
0x000009ec MOVE R62 R19                                    ;; [26, 249, 48, 0]
0x000009f0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000009f4 POPL 0x1f                                       ;; [151, 0, 0, 31]
0x000009f8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000009fc PSHL 0x7f                                       ;; [149, 0, 0, 127]
0x00000a00 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000a04 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000a08 CFEI 0x1a8                                      ;; [145, 0, 1, 168]
0x00000a0c MOVE R22 R57                                    ;; [26, 91, 144, 0]
0x00000a10 MOVE R21 R62                                    ;; [26, 87, 224, 0]
0x00000a14 ADDI $writable R59 0x180                        ;; [80, 67, 177, 128]
0x00000a18 SB $writable R58 0x0                            ;; [94, 67, 160, 0]
0x00000a1c ADDI $writable R59 0x180                        ;; [80, 67, 177, 128]
0x00000a20 MOVI R17 0x400                                  ;; [114, 68, 4, 0]
0x00000a24 ALOC R17                                        ;; [38, 68, 0, 0]
0x00000a28 ADDI R17 R59 0x70                               ;; [80, 71, 176, 112]
0x00000a2c SW R59 $hp 0xe                                  ;; [95, 236, 112, 14]
0x00000a30 MOVI R18 0x400                                  ;; [114, 72, 4, 0]
0x00000a34 SW R59 R18 0xf                                  ;; [95, 237, 32, 15]
0x00000a38 SW R59 $zero 0x10                               ;; [95, 236, 0, 16]
0x00000a3c MCPI R59 R17 0x18                               ;; [96, 237, 16, 24]
0x00000a40 ADDI R17 R59 0xb8                               ;; [80, 71, 176, 184]
0x00000a44 MCPI R17 R59 0x18                               ;; [96, 71, 176, 24]
0x00000a48 ADDI R18 R59 0x110                              ;; [80, 75, 177, 16]
0x00000a4c MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x00000a50 ADDI R17 R59 0x188                              ;; [80, 71, 177, 136]
0x00000a54 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x00000a58 ADDI $writable R59 0x168                        ;; [80, 67, 177, 104]
0x00000a5c MCPI $writable R18 0x18                         ;; [96, 65, 32, 24]
0x00000a60 ADDI $writable R59 0x168                        ;; [80, 67, 177, 104]
0x00000a64 ADDI R17 R59 0x18                               ;; [80, 71, 176, 24]
0x00000a68 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000a6c ADDI $writable R59 0x88                         ;; [80, 67, 176, 136]
0x00000a70 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000a74 LW $writable R59 0x11                           ;; [93, 67, 176, 17]
0x00000a78 LW R20 R59 0x12                                 ;; [93, 83, 176, 18]
0x00000a7c LW R17 R59 0x13                                 ;; [93, 71, 176, 19]
0x00000a80 ADDI R18 R59 0x188                              ;; [80, 75, 177, 136]
0x00000a84 LB R18 R18 0x0                                  ;; [92, 73, 32, 0]
0x00000a88 ADD R19 R17 $one                                ;; [16, 77, 16, 64]
0x00000a8c GT R19 R19 R20                                  ;; [21, 77, 53, 0]
0x00000a90 JNZF R19 $zero 0x1                              ;; [118, 76, 0, 1]
0x00000a94 JMPF $zero 0x6                                  ;; [116, 0, 0, 6]
0x00000a98 MOVI R19 0x2                                    ;; [114, 76, 0, 2]
0x00000a9c MUL R19 R20 R19                                 ;; [27, 77, 68, 192]
0x00000aa0 ADD R20 R19 $one                                ;; [16, 81, 48, 64]
0x00000aa4 ALOC R20                                        ;; [38, 80, 0, 0]
0x00000aa8 MCP $hp $writable R17                           ;; [40, 29, 4, 64]
0x00000aac MOVE $writable $hp                              ;; [26, 64, 112, 0]
0x00000ab0 ADD R19 $writable R17                           ;; [16, 77, 4, 64]
0x00000ab4 SB R19 R18 0x0                                  ;; [94, 77, 32, 0]
0x00000ab8 ADD R17 R17 $one                                ;; [16, 69, 16, 64]
0x00000abc ADDI R18 R59 0xd0                               ;; [80, 75, 176, 208]
0x00000ac0 SW R59 $writable 0x1a                           ;; [95, 237, 0, 26]
0x00000ac4 SW R59 R20 0x1b                                 ;; [95, 237, 64, 27]
0x00000ac8 SW R59 R17 0x1c                                 ;; [95, 237, 16, 28]
0x00000acc ADDI $writable R59 0x30                         ;; [80, 67, 176, 48]
0x00000ad0 MCPI $writable R18 0x18                         ;; [96, 65, 32, 24]
0x00000ad4 ADDI R17 R59 0xf8                               ;; [80, 71, 176, 248]
0x00000ad8 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000adc ADDI $writable R59 0x128                        ;; [80, 67, 177, 40]
0x00000ae0 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000ae4 ADDI R17 R59 0x150                              ;; [80, 71, 177, 80]
0x00000ae8 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000aec ADDI $writable R59 0x150                        ;; [80, 67, 177, 80]
0x00000af0 ADDI R17 R59 0x190                              ;; [80, 71, 177, 144]
0x00000af4 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000af8 ADDI $writable R59 0x190                        ;; [80, 67, 177, 144]
0x00000afc ADDI R17 R59 0x48                               ;; [80, 71, 176, 72]
0x00000b00 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000b04 ADDI $writable R59 0xa0                         ;; [80, 67, 176, 160]
0x00000b08 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000b0c ADDI R17 $writable 0x10                         ;; [80, 69, 0, 16]
0x00000b10 ADDI R18 R59 0xe8                               ;; [80, 75, 176, 232]
0x00000b14 MCPI R18 $writable 0x8                          ;; [96, 73, 0, 8]
0x00000b18 ADDI $writable R18 0x8                          ;; [80, 65, 32, 8]
0x00000b1c MCPI $writable R17 0x8                          ;; [96, 65, 16, 8]
0x00000b20 ADDI $writable R59 0x60                         ;; [80, 67, 176, 96]
0x00000b24 MCPI $writable R18 0x10                         ;; [96, 65, 32, 16]
0x00000b28 ADDI R17 R59 0x140                              ;; [80, 71, 177, 64]
0x00000b2c MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000b30 MCPI R22 R17 0x10                               ;; [96, 89, 16, 16]
0x00000b34 CFSI 0x1a8                                      ;; [146, 0, 1, 168]
0x00000b38 MOVE R62 R21                                    ;; [26, 249, 80, 0]
0x00000b3c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000b40 POPL 0x7f                                       ;; [151, 0, 0, 127]
0x00000b44 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
.data_section:
0x00000b48 .word i14454674236531057292, as hex be bytes ([C8, 99, 51, A2, 4C, 6C, A2, 8C])
0x00000b50 .word i18446744073709486083, as hex be bytes ([FF, FF, FF, FF, FF, FF, 00, 03])
0x00000b58 .word i262145, as hex be bytes ([00, 00, 00, 00, 00, 04, 00, 01])
;; --- END OF TARGET BYTECODE ---

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:155:24
    |
153 | trait IsZero { fn is_zero(self) -> bool; }
154 | 
155 | impl IsZero for bool { fn is_zero(self) -> bool { self == false }}
    |                        ------------------------------------------ This method is never called.
156 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
157 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:156:22
    |
154 | 
155 | impl IsZero for bool { fn is_zero(self) -> bool { self == false }}
156 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
    |                      -------------------------------------- This method is never called.
157 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
158 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:157:23
    |
155 | impl IsZero for bool { fn is_zero(self) -> bool { self == false }}
156 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
157 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
    |                       -------------------------------------- This method is never called.
158 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
159 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:158:23
    |
156 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
157 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
158 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
    |                       -------------------------------------- This method is never called.
159 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
160 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:159:23
    |
157 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
158 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
159 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
    |                       -------------------------------------- This method is never called.
160 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
161 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:160:24
    |
158 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
159 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
160 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
    |                        ----------------------------------------------------------------------------------------------------------- This method is never called.
161 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
162 | 
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:161:24
    |
159 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
160 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
161 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
    |                        ------------------------------------------------------------------------------------------------------- This method is never called.
162 | 
163 | fn is_all_zero<T, const N: u64>(array: [T; N], n: u64) where T: IsZero {
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:163:4
    |
161 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
162 | 
163 | fn is_all_zero<T, const N: u64>(array: [T; N], n: u64) where T: IsZero {
    |    ----------- This function is never called.
164 |     let mut i = 0;
165 |     while i < n {
    |
____

  Compiled script "array_repeat" with 8 warnings.
    Finished debug [unoptimized + fuel] target(s) [2.912 KB] in ???

> forc test --path test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat --experimental const_generics --verbose
exit status: 0
output:
    Building test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat
   Compiling library std (test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert)
warning: Returned value is ignored
    --> test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/codec.sw:3181:5
     |
...
3181 |     T::is_memcopy();
     |     --------------- This returns a value which is not assigned to anything and is ignored.
     |     --------------- help: The returned value has type "bool".
     |
     = help: If you want to intentionally ignore the returned value, use `let _ = ...`:
     = help:   let _ = T::is_memcopy();
____

  Compiled library "std" with 1 warning.
   Compiling script array_repeat (test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat)
<<<<<<< HEAD
    Finished debug [unoptimized + fuel] target(s) [7.064 KB] in ???
=======
    Finished debug [unoptimized + fuel] target(s) [7.072 KB] in ???
    script array_repeat
      Bytecode size: 7072 bytes (7.072 KB)
      Bytecode hash: 0x219d14849a80aedeb7c7eb544d4ca32ad257c99a51a713e943d1dd2596fcf797
>>>>>>> 150dba742 (optimize encoding for u64)
     Running 1 test, filtered 0 tests

tested -- array_repeat

      test test_array_repeat_zero ... ok (???, 22829177 gas)

test result: OK. 1 passed; 0 failed; finished in ???

    Finished in ???

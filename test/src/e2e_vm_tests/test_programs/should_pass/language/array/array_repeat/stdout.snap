---
source: test/src/snapshot/mod.rs
assertion_line: 162
---
> forc build  --path test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat --experimental const_generics --ir final --asm final --bytecode
exit status: 0
output:
    Building test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat
   Compiling library std (test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert)
// IR: Final
library {
}

;; --- START OF TARGET BYTECODE ---

0x00000000 MOVE R60 $pc                                    ;; [26, 240, 48, 0]
0x00000004 JMPF $zero 0x4                                  ;; [116, 0, 0, 4]
0x00000008                                                 ;; [0, 0, 0, 0, 0, 0, 0, 32]
0x00000010                                                 ;; [0, 0, 0, 0, 0, 0, 0, 0]
0x00000018 LW R63 R60 0x1                                  ;; [93, 255, 192, 1]
0x0000001c ADD R63 R63 R60                                 ;; [16, 255, 255, 0]
.data_section:
;; --- END OF TARGET BYTECODE ---

   Compiling script array_repeat (test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat)
// IR: Final
script {
    global std::error_signals::FAILED_ASSERT_EQ_SIGNAL : u64 = const u64 18446744073709486083

    pub entry fn __entry() -> __ptr slice, !3 {
        local mut slice __aggr_memcpy_0
        local { u64, u64 } __anon_0
        local slice __ret_value

        entry():
        v0 = get_local __ptr slice, __ret_value
        v1 = call main_0(), !6
        v2 = get_local __ptr { u64, u64 }, __anon_0, !7
        v3 = const u64 0
        v4 = get_elem_ptr v2, __ptr u64, v3, !7
        v5 = const u64 0, !8
        store v5 to v4, !7
        v6 = const u64 1
        v7 = get_elem_ptr v2, __ptr u64, v6, !7
        v8 = const u64 0, !9
        store v8 to v7, !7
        v9 = asm(s: v2) -> __ptr slice s {
        }
        v10 = get_local __ptr slice, __aggr_memcpy_0
        mem_copy_val v10, v9
        mem_copy_val v0, v10
        ret __ptr slice v0
    }

    entry_orig fn main_0() -> (), !13 {
        local [u8; 5] _
        local [u64; 5] __
        local [u64; 5] ___
        local [u64; 5] ____
        local [u256; 5] _____
        local [b256; 5] ______
        local [bool; 5] _______
        local [u8; 25] ________
        local [u64; 25] _________
        local [u64; 25] __________
        local [u64; 25] ___________
        local [u256; 25] ____________
        local [b256; 25] _____________
        local [bool; 25] ______________
        local [bool; 5] _______________
        local [bool; 25] ________________
        local [u8; 262145] _________________
        local mut [u8; 5] __aggr_memcpy_0
        local mut [u64; 5] __aggr_memcpy_00
        local mut [u64; 5] __aggr_memcpy_01
        local mut [u256; 25] __aggr_memcpy_010
        local mut [b256; 25] __aggr_memcpy_011
        local mut [bool; 25] __aggr_memcpy_012
        local mut [bool; 5] __aggr_memcpy_013
        local mut [bool; 25] __aggr_memcpy_014
        local mut [u8; 262145] __aggr_memcpy_015
        local mut [u8; 1] __aggr_memcpy_016
        local mut [u64; 5] __aggr_memcpy_02
        local mut [u256; 5] __aggr_memcpy_03
        local mut [b256; 5] __aggr_memcpy_04
        local mut [bool; 5] __aggr_memcpy_05
        local mut [u8; 25] __aggr_memcpy_06
        local mut [u64; 25] __aggr_memcpy_07
        local mut [u64; 25] __aggr_memcpy_08
        local mut [u64; 25] __aggr_memcpy_09
        local [u8; 5] __ret_val
        local [u64; 5] __ret_val0
        local [u64; 5] __ret_val1
        local [u256; 25] __ret_val10
        local [b256; 25] __ret_val11
        local [bool; 25] __ret_val12
        local [bool; 5] __ret_val13
        local [bool; 25] __ret_val14
        local [u8; 262145] __ret_val15
        local [u8; 1] __ret_val16
        local [u64; 5] __ret_val2
        local [u256; 5] __ret_val3
        local [b256; 5] __ret_val4
        local [bool; 5] __ret_val5
        local [u8; 25] __ret_val6
        local [u64; 25] __ret_val7
        local [u64; 25] __ret_val8
        local [u64; 25] __ret_val9
        local [u8; 1] array
        local u64 code_
        local bool self_1
        local u8 v1_
        local u8 v2_

        entry():
        v0 = get_local __ptr [u8; 5], __ret_val
        v1 = call array_repeat_zero_small_u8_1(v0)
        v2 = get_local __ptr [u8; 5], __aggr_memcpy_0
        mem_copy_val v2, v1
        v3 = get_local __ptr [u8; 5], _, !14
        mem_copy_val v3, v2
        v4 = get_local __ptr [u64; 5], __ret_val0
        v5 = call array_repeat_zero_small_u16_2(v4)
        v6 = get_local __ptr [u64; 5], __aggr_memcpy_00
        mem_copy_val v6, v5
        v7 = get_local __ptr [u64; 5], __, !15
        mem_copy_val v7, v6
        v8 = get_local __ptr [u64; 5], __ret_val1
        v9 = call array_repeat_zero_small_u32_3(v8)
        v10 = get_local __ptr [u64; 5], __aggr_memcpy_01
        mem_copy_val v10, v9
        v11 = get_local __ptr [u64; 5], ___, !16
        mem_copy_val v11, v10
        v12 = get_local __ptr [u64; 5], __ret_val2
        v13 = call array_repeat_zero_small_u64_4(v12)
        v14 = get_local __ptr [u64; 5], __aggr_memcpy_02
        mem_copy_val v14, v13
        v15 = get_local __ptr [u64; 5], ____, !17
        mem_copy_val v15, v14
        v16 = get_local __ptr [u256; 5], __ret_val3
        v17 = call array_repeat_zero_small_u256_5(v16)
        v18 = get_local __ptr [u256; 5], __aggr_memcpy_03
        mem_copy_val v18, v17
        v19 = get_local __ptr [u256; 5], _____, !18
        mem_copy_val v19, v18
        v20 = get_local __ptr [b256; 5], __ret_val4
        v21 = call array_repeat_zero_small_b256_6(v20)
        v22 = get_local __ptr [b256; 5], __aggr_memcpy_04
        mem_copy_val v22, v21
        v23 = get_local __ptr [b256; 5], ______, !19
        mem_copy_val v23, v22
        v24 = get_local __ptr [bool; 5], __ret_val5
        v25 = call array_repeat_zero_small_bool_7(v24)
        v26 = get_local __ptr [bool; 5], __aggr_memcpy_05
        mem_copy_val v26, v25
        v27 = get_local __ptr [bool; 5], _______, !20
        mem_copy_val v27, v26
        v28 = get_local __ptr [u8; 25], __ret_val6
        v29 = call array_repeat_zero_big_u8_8(v28)
        v30 = get_local __ptr [u8; 25], __aggr_memcpy_06
        mem_copy_val v30, v29
        v31 = get_local __ptr [u8; 25], ________, !21
        mem_copy_val v31, v30
        v32 = get_local __ptr [u64; 25], __ret_val7
        v33 = call array_repeat_zero_big_u16_9(v32)
        v34 = get_local __ptr [u64; 25], __aggr_memcpy_07
        mem_copy_val v34, v33
        v35 = get_local __ptr [u64; 25], _________, !22
        mem_copy_val v35, v34
        v36 = get_local __ptr [u64; 25], __ret_val8
        v37 = call array_repeat_zero_big_u32_10(v36)
        v38 = get_local __ptr [u64; 25], __aggr_memcpy_08
        mem_copy_val v38, v37
        v39 = get_local __ptr [u64; 25], __________, !23
        mem_copy_val v39, v38
        v40 = get_local __ptr [u64; 25], __ret_val9
        v41 = call array_repeat_zero_big_u64_11(v40)
        v42 = get_local __ptr [u64; 25], __aggr_memcpy_09
        mem_copy_val v42, v41
        v43 = get_local __ptr [u64; 25], ___________, !24
        mem_copy_val v43, v42
        v44 = get_local __ptr [u256; 25], __ret_val10
        v45 = call array_repeat_zero_big_u256_12(v44)
        v46 = get_local __ptr [u256; 25], __aggr_memcpy_010
        mem_copy_val v46, v45
        v47 = get_local __ptr [u256; 25], ____________, !25
        mem_copy_val v47, v46
        v48 = get_local __ptr [b256; 25], __ret_val11
        v49 = call array_repeat_zero_big_b256_13(v48)
        v50 = get_local __ptr [b256; 25], __aggr_memcpy_011
        mem_copy_val v50, v49
        v51 = get_local __ptr [b256; 25], _____________, !26
        mem_copy_val v51, v50
        v52 = get_local __ptr [bool; 25], __ret_val12
        v53 = call array_repeat_zero_big_bool_14(v52)
        v54 = get_local __ptr [bool; 25], __aggr_memcpy_012
        mem_copy_val v54, v53
        v55 = get_local __ptr [bool; 25], ______________, !27
        mem_copy_val v55, v54
        v56 = get_local __ptr [bool; 5], __ret_val13
        v57 = call small_array_repeat_15(v56)
        v58 = get_local __ptr [bool; 5], __aggr_memcpy_013
        mem_copy_val v58, v57
        v59 = get_local __ptr [bool; 5], _______________, !28
        mem_copy_val v59, v58
        v60 = get_local __ptr [bool; 25], __ret_val14
        v61 = call big_array_repeat_16(v60)
        v62 = get_local __ptr [bool; 25], __aggr_memcpy_014
        mem_copy_val v62, v61
        v63 = get_local __ptr [bool; 25], ________________, !29
        mem_copy_val v63, v62
        v64 = get_local __ptr [u8; 262145], __ret_val15
        v65 = call u8_array_bigger_than_18_bits_17(v64)
        v66 = get_local __ptr [u8; 262145], __aggr_memcpy_015
        mem_copy_val v66, v65
        v67 = get_local __ptr [u8; 262145], _________________, !30
        mem_copy_val v67, v66
        v68 = get_local __ptr [u8; 1], __ret_val16
        v69 = call decode_array_18(v68)
        v70 = get_local __ptr [u8; 1], __aggr_memcpy_016
        mem_copy_val v70, v69
        v71 = get_local __ptr [u8; 1], array, !31
        mem_copy_val v71, v70
        v72 = get_local __ptr [u8; 1], array, !32
        v73 = const u64 0, !33
        v74 = get_elem_ptr v72, __ptr u8, v73, !34
        v75 = get_local __ptr u8, v1_, !37
        mem_copy_val v75, v74
        v76 = get_local __ptr u8, v2_, !37
        v77 = const u8 255, !38
        store v77 to v76, !37
        v78 = load v74, !45
        v79 = get_local __ptr u8, v2_, !47
        v80 = load v79, !48
        v81 = cmp eq v78 v80, !49
        v82 = get_local __ptr bool, self_1, !52
        store v81 to v82, !53
        v83 = get_local __ptr bool, self_1, !55
        v84 = load v83, !56
        v85 = const bool false, !57
        v86 = cmp eq v84 v85, !58
        cbr v86, assert_eq_37_block0(), assert_eq_37_block1(), !59

        assert_eq_37_block0():
        v87 = get_local __ptr u8, v1_, !61
        v88 = load v87, !37
        v89 = call log_41(v88), !64
        v90 = get_local __ptr u8, v2_, !66
        v91 = load v90, !37
        v92 = call log_41(v91), !69
        v93 = get_global __ptr u64, std::error_signals::FAILED_ASSERT_EQ_SIGNAL, !71
        v94 = load v93, !37
        v95 = get_local __ptr u64, code_, !74
        store v94 to v95, !75
        v96 = get_local __ptr u64, code_, !78
        v97 = load v96, !79
        revert v97, !81

        assert_eq_37_block1():
        v98 = const unit ()
        ret () v98
    }

    fn array_repeat_zero_small_u8_1(__ret_value: __ptr [u8; 5]) -> __ptr [u8; 5], !85 {
        local [u8; 5] __anon_0

        entry(__ret_value: __ptr [u8; 5]):
        v0 = get_local __ptr [u8; 5], __anon_0, !86
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u8; 5] __ret_value
    }

    fn array_repeat_zero_small_u16_2(__ret_value: __ptr [u64; 5]) -> __ptr [u64; 5], !89 {
        local [u64; 5] __anon_0

        entry(__ret_value: __ptr [u64; 5]):
        v0 = get_local __ptr [u64; 5], __anon_0, !90
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u64; 5] __ret_value
    }

    fn array_repeat_zero_small_u32_3(__ret_value: __ptr [u64; 5]) -> __ptr [u64; 5], !93 {
        local [u64; 5] __anon_0

        entry(__ret_value: __ptr [u64; 5]):
        v0 = get_local __ptr [u64; 5], __anon_0, !94
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u64; 5] __ret_value
    }

    fn array_repeat_zero_small_u64_4(__ret_value: __ptr [u64; 5]) -> __ptr [u64; 5], !97 {
        local [u64; 5] __anon_0

        entry(__ret_value: __ptr [u64; 5]):
        v0 = get_local __ptr [u64; 5], __anon_0, !98
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u64; 5] __ret_value
    }

    fn array_repeat_zero_small_u256_5(__ret_value: __ptr [u256; 5]) -> __ptr [u256; 5], !101 {
        local [u256; 5] __anon_0

        entry(__ret_value: __ptr [u256; 5]):
        v0 = get_local __ptr [u256; 5], __anon_0, !102
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u256; 5] __ret_value
    }

    fn array_repeat_zero_small_b256_6(__ret_value: __ptr [b256; 5]) -> __ptr [b256; 5], !105 {
        local [b256; 5] __anon_0

        entry(__ret_value: __ptr [b256; 5]):
        v0 = get_local __ptr [b256; 5], __anon_0, !106
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [b256; 5] __ret_value
    }

    fn array_repeat_zero_small_bool_7(__ret_value: __ptr [bool; 5]) -> __ptr [bool; 5], !109 {
        local [bool; 5] __anon_0

        entry(__ret_value: __ptr [bool; 5]):
        v0 = get_local __ptr [bool; 5], __anon_0, !110
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [bool; 5] __ret_value
    }

    fn array_repeat_zero_big_u8_8(__ret_value: __ptr [u8; 25]) -> __ptr [u8; 25], !113 {
        local [u8; 25] __anon_0

        entry(__ret_value: __ptr [u8; 25]):
        v0 = get_local __ptr [u8; 25], __anon_0, !114
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u8; 25] __ret_value
    }

    fn array_repeat_zero_big_u16_9(__ret_value: __ptr [u64; 25]) -> __ptr [u64; 25], !117 {
        local [u64; 25] __anon_0

        entry(__ret_value: __ptr [u64; 25]):
        v0 = get_local __ptr [u64; 25], __anon_0, !118
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u64; 25] __ret_value
    }

    fn array_repeat_zero_big_u32_10(__ret_value: __ptr [u64; 25]) -> __ptr [u64; 25], !121 {
        local [u64; 25] __anon_0

        entry(__ret_value: __ptr [u64; 25]):
        v0 = get_local __ptr [u64; 25], __anon_0, !122
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u64; 25] __ret_value
    }

    fn array_repeat_zero_big_u64_11(__ret_value: __ptr [u64; 25]) -> __ptr [u64; 25], !125 {
        local [u64; 25] __anon_0

        entry(__ret_value: __ptr [u64; 25]):
        v0 = get_local __ptr [u64; 25], __anon_0, !126
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u64; 25] __ret_value
    }

    fn array_repeat_zero_big_u256_12(__ret_value: __ptr [u256; 25]) -> __ptr [u256; 25], !129 {
        local [u256; 25] __anon_0

        entry(__ret_value: __ptr [u256; 25]):
        v0 = get_local __ptr [u256; 25], __anon_0, !130
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u256; 25] __ret_value
    }

    fn array_repeat_zero_big_b256_13(__ret_value: __ptr [b256; 25]) -> __ptr [b256; 25], !133 {
        local [b256; 25] __anon_0

        entry(__ret_value: __ptr [b256; 25]):
        v0 = get_local __ptr [b256; 25], __anon_0, !134
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [b256; 25] __ret_value
    }

    fn array_repeat_zero_big_bool_14(__ret_value: __ptr [bool; 25]) -> __ptr [bool; 25], !137 {
        local [bool; 25] __anon_0

        entry(__ret_value: __ptr [bool; 25]):
        v0 = get_local __ptr [bool; 25], __anon_0, !138
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [bool; 25] __ret_value
    }

    fn small_array_repeat_15(__ret_value: __ptr [bool; 5]) -> __ptr [bool; 5], !141 {
        local [bool; 5] __anon_0

        entry(__ret_value: __ptr [bool; 5]):
        v0 = get_local __ptr [bool; 5], __anon_0, !142
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr bool, v1
        v3 = const bool true, !143
        store v3 to v2, !142
        v4 = const u64 1
        v5 = get_elem_ptr v0, __ptr bool, v4
        store v3 to v5, !142
        v6 = const u64 2
        v7 = get_elem_ptr v0, __ptr bool, v6
        store v3 to v7, !142
        v8 = const u64 3
        v9 = get_elem_ptr v0, __ptr bool, v8
        store v3 to v9, !142
        v10 = const u64 4
        v11 = get_elem_ptr v0, __ptr bool, v10
        store v3 to v11, !142
        mem_copy_val __ret_value, v0
        ret __ptr [bool; 5] __ret_value
    }

    fn big_array_repeat_16(__ret_value: __ptr [bool; 25]) -> __ptr [bool; 25], !146 {
        local [bool; 25] __anon_0

        entry(__ret_value: __ptr [bool; 25]):
        v0 = get_local __ptr [bool; 25], __anon_0, !147
        v1 = const u64 0
        br array_init_loop(v1)

        array_init_loop(v2: u64):
        v3 = get_elem_ptr v0, __ptr bool, v2
        v4 = const bool true, !148
        store v4 to v3, !147
        v5 = const u64 1
        v6 = add v2, v5
        v7 = const u64 25
        v8 = cmp lt v6 v7
        cbr v8, array_init_loop(v6), array_init_exit()

        array_init_exit():
        mem_copy_val __ret_value, v0
        ret __ptr [bool; 25] __ret_value
    }

    fn u8_array_bigger_than_18_bits_17(__ret_value: __ptr [u8; 262145]) -> __ptr [u8; 262145], !151 {
        local [u8; 262145] __anon_0

        entry(__ret_value: __ptr [u8; 262145]):
        v0 = get_local __ptr [u8; 262145], __anon_0, !152
        mem_clear_val v0
        mem_copy_val __ret_value, v0
        ret __ptr [u8; 262145] __ret_value
    }

    fn decode_array_18(__ret_value: __ptr [u8; 1]) -> __ptr [u8; 1], !155 {
        local mut slice __aggr_memcpy_0
        local mut [u8; 1] __aggr_memcpy_00
        local [u8; 1] __anon_0
        local slice __ret_val
        local [u8; 1] __ret_val0
        local [u8; 1] __tmp_arg
        local slice __tmp_arg0
        local slice s

        entry(__ret_value: __ptr [u8; 1]):
        v0 = get_local __ptr [u8; 1], __anon_0, !156
        v1 = const u64 0
        v2 = get_elem_ptr v0, __ptr u8, v1
        v3 = const u8 255, !157
        store v3 to v2, !156
        v4 = get_local __ptr [u8; 1], __tmp_arg
        mem_copy_val v4, v0
        v5 = get_local __ptr slice, __ret_val
        v6 = call to_slice_19(v4, v5)
        v7 = get_local __ptr slice, __aggr_memcpy_0
        mem_copy_val v7, v6
        v8 = get_local __ptr slice, s, !158
        mem_copy_val v8, v7
        v9 = get_local __ptr slice, __tmp_arg0
        mem_copy_val v9, v7
        v10 = get_local __ptr [u8; 1], __ret_val0
        v11 = call abi_decode_23(v9, v10)
        v12 = get_local __ptr [u8; 1], __aggr_memcpy_00
        mem_copy_val v12, v11
        mem_copy_val __ret_value, v12
        ret __ptr [u8; 1] __ret_value
    }

    fn to_slice_19(array: __ptr [u8; 1], __ret_value: __ptr slice) -> __ptr slice, !161 {
        local mut slice __aggr_memcpy_0
        local { ptr, u64 } __anon_0
        local slice __tmp_block_arg
        local slice __tmp_block_arg0
        local [u8; 1] array_
        local u64 len
        local u64 other_
        local { ptr, u64 } parts_
        local ptr ptr_

        entry(array: __ptr [u8; 1], __ret_value: __ptr slice):
        v0 = get_local __ptr [u8; 1], array_
        mem_copy_val v0, array
        v1 = get_local __ptr u64, len, !162
        v2 = const u64 1
        store v2 to v1, !162
        v3 = get_local __ptr [u8; 1], array_, !163
        v4 = cast_ptr v3 to ptr, !164
        v5 = get_local __ptr ptr, ptr_, !167
        store v4 to v5, !167
        v6 = get_local __ptr ptr, ptr_, !170
        v7 = get_local __ptr u64, other_, !173
        v8 = const u64 1
        store v8 to v7, !174
        v9 = get_local __ptr u64, len, !176
        v10 = load v9, !177
        v11 = get_local __ptr u64, other_, !179
        v12 = load v11, !180
        v13 = mul v10, v12, !181
        v14 = get_local __ptr { ptr, u64 }, __anon_0, !183
        v15 = const u64 0
        v16 = get_elem_ptr v14, __ptr ptr, v15, !184
        mem_copy_val v16, v6
        v17 = const u64 1
        v18 = get_elem_ptr v14, __ptr u64, v17, !185
        store v13 to v18, !186
        v19 = get_local __ptr { ptr, u64 }, parts_, !189
        mem_copy_val v19, v14
        v20 = get_local __ptr { ptr, u64 }, parts_, !191
        v21 = asm(ptr: v20) -> __ptr slice ptr {
        }
        v22 = get_local __ptr slice, __aggr_memcpy_0
        mem_copy_val v22, v21
        v23 = get_local __ptr slice, __tmp_block_arg
        mem_copy_val v23, v22
        v24 = get_local __ptr slice, __tmp_block_arg0
        mem_copy_val v24, v23
        mem_copy_val __ret_value, v24
        ret __ptr slice __ret_value
    }

    pub fn abi_decode_23(data: __ptr slice, __ret_value: __ptr [u8; 1]) -> __ptr [u8; 1], !195 {
        local u64 LENGTH
        local mut { ptr, u64 } __aggr_memcpy_0
        local mut { ptr, u64 } __aggr_memcpy_00
        local { ptr, u64 } __anon_0
        local { ptr, u64 } __anon_00
        local { ptr } __anon_01
        local [u8; 1] __anon_02
        local __ptr [u8; 1] __anon_1
        local { ptr, u64 } __tmp_block_arg
        local { ptr, u64 } __tmp_block_arg0
        local { ptr } __tmp_block_arg1
        local [u8; 1] __tmp_block_arg2
        local u64 _len_
        local mut [u8; 1] array
        local __ptr [u8; 1] array_
        local mut { ptr } buffer
        local __ptr { ptr } buffer_
        local __ptr { ptr } buffer_0
        local slice data_
        local mut u64 i
        local __ptr u8 item
        local u64 other_
        local u64 other_0
        local u64 other_00
        local u64 other_1
        local ptr ptr_
        local slice self_
        local slice self_0
        local u64 self_00
        local __ptr { ptr } self_000
        local u64 self_0000
        local __ptr { ptr } self_01
        local u64 self_1
        local __ptr { ptr } self_10
        local u64 self_2
        local u64 size
        local slice slice_
        local slice slice_0
        local u8 v
        local u8 v0
        local u8 v_

        entry(data: __ptr slice, __ret_value: __ptr [u8; 1]):
        v0 = get_local __ptr slice, data_
        mem_copy_val v0, data
        v1 = get_local __ptr slice, data_, !196
        v2 = get_local __ptr slice, self_, !199
        mem_copy_val v2, v1
        v3 = get_local __ptr slice, self_, !201
        v4 = get_local __ptr slice, slice_, !204
        mem_copy_val v4, v3
        v5 = get_local __ptr slice, slice_, !206
        v6 = asm(ptr: v5) -> __ptr { ptr, u64 } ptr {
        }
        v7 = get_local __ptr { ptr, u64 }, __aggr_memcpy_0
        mem_copy_val v7, v6
        v8 = get_local __ptr { ptr, u64 }, __tmp_block_arg
        mem_copy_val v8, v7
        v9 = get_local __ptr { ptr, u64 }, __anon_0, !199
        mem_copy_val v9, v8
        v10 = const u64 0
        v11 = get_elem_ptr v9, __ptr ptr, v10, !208
        v12 = load v11, !199
        v13 = get_local __ptr slice, data_, !209
        v14 = get_local __ptr slice, self_0, !212
        mem_copy_val v14, v13
        v15 = get_local __ptr slice, self_0, !214
        v16 = get_local __ptr slice, slice_0, !217
        mem_copy_val v16, v15
        v17 = get_local __ptr slice, slice_0, !218
        v18 = asm(ptr: v17) -> __ptr { ptr, u64 } ptr {
        }
        v19 = get_local __ptr { ptr, u64 }, __aggr_memcpy_00
        mem_copy_val v19, v18
        v20 = get_local __ptr { ptr, u64 }, __tmp_block_arg0
        mem_copy_val v20, v19
        v21 = get_local __ptr { ptr, u64 }, __anon_00, !212
        mem_copy_val v21, v20
        v22 = const u64 1
        v23 = get_elem_ptr v21, __ptr u64, v22, !220
        v24 = get_local __ptr u64, self_00, !223
        mem_copy_val v24, v23
        v25 = get_local __ptr u64, other_, !224
        v26 = const u64 1
        store v26 to v25, !225
        v27 = get_local __ptr u64, self_00, !227
        v28 = load v27, !228
        v29 = get_local __ptr u64, other_, !230
        v30 = load v29, !231
        v31 = div v28, v30, !232
        v32 = get_local __ptr ptr, ptr_, !235
        store v12 to v32, !235
        v33 = get_local __ptr u64, _len_, !235
        store v31 to v33, !235
        v34 = get_local __ptr ptr, ptr_, !237
        v35 = get_local __ptr { ptr }, __anon_01, !239
        v36 = const u64 0
        v37 = get_elem_ptr v35, __ptr ptr, v36, !235
        mem_copy_val v37, v34
        v38 = get_local __ptr { ptr }, __tmp_block_arg1
        mem_copy_val v38, v35
        v39 = get_local __ptr { ptr }, buffer, !240
        mem_copy_val v39, v38
        v40 = get_local __ptr { ptr }, buffer, !241
        v41 = get_local __ptr __ptr { ptr }, buffer_, !244
        store v40 to v41, !244
        v42 = get_local __ptr u64, LENGTH, !246
        v43 = const u64 1, !247
        store v43 to v42, !248
        v44 = get_local __ptr [u8; 1], __anon_02, !250
        mem_clear_val v44, !244
        v45 = get_local __ptr [u8; 1], array, !252
        mem_copy_val v45, v44
        v46 = get_local __ptr [u8; 1], array, !254
        v47 = get_local __ptr __ptr [u8; 1], __anon_1, !244
        store v46 to v47, !244
        v48 = cast_ptr v47 to __ptr __ptr [u8; 1], !244
        v49 = get_local __ptr __ptr [u8; 1], array_, !256
        mem_copy_val v49, v48
        v50 = get_local __ptr u64, i, !258
        v51 = const u64 0, !259
        store v51 to v50, !260
        br abi_decode_29_while(), !244

        abi_decode_29_while():
        v52 = get_local __ptr u64, i, !262
        v53 = get_local __ptr u64, self_1, !265
        mem_copy_val v53, v52
        v54 = get_local __ptr u64, other_0, !266
        v55 = const u64 1
        store v55 to v54, !267
        v56 = get_local __ptr u64, self_1, !269
        v57 = load v56, !270
        v58 = get_local __ptr u64, other_0, !272
        v59 = load v58, !273
        v60 = cmp lt v57 v59, !274
        cbr v60, abi_decode_29_while_body(), abi_decode_29_end_while(), !244

        abi_decode_29_while_body():
        v61 = get_local __ptr __ptr [u8; 1], array_, !276
        v62 = load v61, !244
        v63 = get_local __ptr u64, i, !278
        v64 = load v63, !244
        v65 = const u64 1
        v66 = asm(idx: v64, elem_ir_type_size: v65, ptr: v62, offset_temp, ptr_out) -> __ptr u8 ptr_out, !244 {
            mul    offset_temp idx elem_ir_type_size
            add    ptr_out ptr offset_temp
        }
        v67 = get_local __ptr __ptr u8, item, !280
        store v66 to v67, !281
        v68 = get_local __ptr __ptr { ptr }, buffer_, !283
        v69 = get_local __ptr __ptr { ptr }, self_01, !286
        mem_copy_val v69, v68
        v70 = get_local __ptr __ptr { ptr }, self_01, !288
        v71 = get_local __ptr __ptr { ptr }, buffer_0, !291
        mem_copy_val v71, v70
        v72 = get_local __ptr __ptr { ptr }, buffer_0, !293
        v73 = get_local __ptr __ptr { ptr }, self_000, !296
        mem_copy_val v73, v72
        v74 = get_local __ptr u64, size, !298
        v75 = const u64 1
        store v75 to v74, !299
        v76 = const bool false
        cbr v76, abi_decode_29_decode_31_abi_decode_32_read_33_block0(), abi_decode_29_decode_31_abi_decode_32_read_33_block1(), !301

        abi_decode_29_decode_31_abi_decode_32_read_33_block0():
        v77 = get_local __ptr __ptr { ptr }, self_000, !303
        v78 = load v77, !304
        v79 = const u64 0
        v80 = get_elem_ptr v78, __ptr ptr, v79, !306
        v81 = load v80, !307
        v82 = asm(ptr: v81) -> u8 ptr, !309 {
        }
        v83 = get_local __ptr u8, v, !311
        store v82 to v83, !312
        v84 = get_local __ptr __ptr { ptr }, self_000, !314
        v85 = load v84, !315
        v86 = const u64 0
        v87 = get_elem_ptr v85, __ptr ptr, v86, !316
        v88 = load v87, !317
        v89 = get_local __ptr u64, size, !319
        v90 = load v89, !320
        v91 = const u64 1
        v92 = mul v91, v90, !321
        v93 = add v88, v92, !322
        v94 = get_local __ptr __ptr { ptr }, self_000, !324
        v95 = load v94, !325
        v96 = const u64 0
        v97 = get_elem_ptr v95, __ptr ptr, v96, !326
        store v93 to v97, !327
        v98 = get_local __ptr u8, v, !329
        v99 = load v98, !330
        br abi_decode_29_decode_31_abi_decode_32_read_33_block5(v99), !331

        abi_decode_29_decode_31_abi_decode_32_read_33_block1():
        v100 = get_local __ptr u64, size, !333
        v101 = get_local __ptr u64, self_0000, !336
        mem_copy_val v101, v100
        v102 = get_local __ptr u64, other_00, !337
        v103 = const u64 1, !338
        store v103 to v102, !339
        v104 = get_local __ptr u64, self_0000, !341
        v105 = load v104, !342
        v106 = get_local __ptr u64, other_00, !344
        v107 = load v106, !345
        v108 = cmp eq v105 v107, !346
        cbr v108, abi_decode_29_decode_31_abi_decode_32_read_33_block2(), abi_decode_29_decode_31_abi_decode_32_read_33_block3(), !347

        abi_decode_29_decode_31_abi_decode_32_read_33_block2():
        v109 = get_local __ptr __ptr { ptr }, self_000, !349
        v110 = load v109, !350
        v111 = const u64 0
        v112 = get_elem_ptr v110, __ptr ptr, v111, !351
        v113 = load v112, !352
        v114 = asm(ptr: v113, val) -> u8 val, !354 {
            lb     val ptr i0, !355
        }
        v115 = get_local __ptr u8, v_, !357
        store v114 to v115, !358
        v116 = get_local __ptr __ptr { ptr }, self_000, !360
        v117 = load v116, !361
        v118 = const u64 0
        v119 = get_elem_ptr v117, __ptr ptr, v118, !362
        v120 = load v119, !363
        v121 = const u64 1
        v122 = const u64 1, !364
        v123 = mul v121, v122, !365
        v124 = add v120, v123, !366
        v125 = get_local __ptr __ptr { ptr }, self_000, !368
        v126 = load v125, !369
        v127 = const u64 0
        v128 = get_elem_ptr v126, __ptr ptr, v127, !370
        store v124 to v128, !371
        v129 = get_local __ptr u8, v_, !373
        v130 = load v129, !374
        br abi_decode_29_decode_31_abi_decode_32_read_33_block4(v130), !375

        abi_decode_29_decode_31_abi_decode_32_read_33_block3():
        v131 = get_local __ptr __ptr { ptr }, self_000, !377
        v132 = get_local __ptr __ptr { ptr }, self_10, !380
        mem_copy_val v132, v131
        v133 = get_local __ptr __ptr { ptr }, self_10, !382
        v134 = load v133, !383
        v135 = const u64 0
        v136 = get_elem_ptr v134, __ptr ptr, v135, !384
        v137 = load v136, !385
        v138 = asm(ptr: v137, val) -> u8 val, !387 {
            lw     val ptr i0, !388
        }
        v139 = get_local __ptr u8, v0, !390
        store v138 to v139, !391
        v140 = get_local __ptr __ptr { ptr }, self_10, !393
        v141 = load v140, !394
        v142 = const u64 0
        v143 = get_elem_ptr v141, __ptr ptr, v142, !395
        v144 = load v143, !396
        v145 = const u64 1
        v146 = const u64 8, !397
        v147 = mul v145, v146, !398
        v148 = add v144, v147, !399
        v149 = get_local __ptr __ptr { ptr }, self_10, !401
        v150 = load v149, !402
        v151 = const u64 0
        v152 = get_elem_ptr v150, __ptr ptr, v151, !403
        store v148 to v152, !404
        v153 = get_local __ptr u8, v0, !406
        v154 = load v153, !407
        br abi_decode_29_decode_31_abi_decode_32_read_33_block4(v154), !408

        abi_decode_29_decode_31_abi_decode_32_read_33_block4(v155: u8):
        br abi_decode_29_decode_31_abi_decode_32_read_33_block5(v155), !409

        abi_decode_29_decode_31_abi_decode_32_read_33_block5(v156: u8):
        v157 = get_local __ptr __ptr u8, item, !411
        v158 = load v157, !244
        store v156 to v158, !413
        v159 = get_local __ptr u64, i, !415
        v160 = get_local __ptr u64, self_2, !418
        mem_copy_val v160, v159
        v161 = get_local __ptr u64, other_1, !419
        v162 = const u64 1, !420
        store v162 to v161, !421
        v163 = get_local __ptr u64, self_2, !423
        v164 = load v163, !424
        v165 = get_local __ptr u64, other_1, !426
        v166 = load v165, !427
        v167 = add v164, v166, !428
        v168 = get_local __ptr u64, i, !429
        store v167 to v168, !430
        br abi_decode_29_while(), !244

        abi_decode_29_end_while():
        v169 = get_local __ptr __ptr [u8; 1], array_, !432
        v170 = load v169, !244
        v171 = get_local __ptr [u8; 1], __tmp_block_arg2
        mem_copy_val v171, v170
        mem_copy_val __ret_value, v171
        ret __ptr [u8; 1] __ret_value
    }

    pub fn log_41(value !434: u8) -> (), !437 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local mut { ptr, u64, u64 } __aggr_memcpy_00
        local mut { ptr, u64, u64 } __aggr_memcpy_01
        local mut { ptr, u64, u64 } __aggr_memcpy_02
        local mut slice __aggr_memcpy_03
        local { ptr, u64, u64 } __anon_0
        local { ptr, u64, u64 } __anon_00
        local { ptr, u64, u64 } __anon_01
        local { { ptr, u64, u64 } } __anon_1
        local { ptr, u64, u64 } __anon_10
        local { ptr, u64 } __anon_11
        local { { ptr, u64, u64 } } __anon_2
        local slice __log_arg
        local { { ptr, u64, u64 } } __tmp_block_arg
        local { { ptr, u64, u64 } } __tmp_block_arg0
        local slice __tmp_block_arg1
        local slice __tmp_block_arg2
        local { { ptr, u64, u64 } } buffer
        local { { ptr, u64, u64 } } buffer_
        local u8 item_
        local u8 self_
        local { { ptr, u64, u64 } } self_0
        local u8 value_

        entry(value: u8):
        v0 = get_local __ptr u8, value_
        store value to v0
        v1 = get_local __ptr u8, value_, !438
        v2 = get_local __ptr u8, item_, !438
        mem_copy_val v2, v1
        v3 = get_local __ptr u8, item_, !440
        v4 = const u64 1024
        v5 = asm(cap: v4) -> ptr hp, !443 {
            aloc   cap
        }
        v6 = get_local __ptr { ptr, u64, u64 }, __anon_0, !444
        v7 = const u64 0
        v8 = get_elem_ptr v6, __ptr ptr, v7, !445
        store v5 to v8, !446
        v9 = const u64 1
        v10 = get_elem_ptr v6, __ptr u64, v9, !447
        store v4 to v10, !448
        v11 = const u64 2
        v12 = get_elem_ptr v6, __ptr u64, v11, !449
        v13 = const u64 0
        store v13 to v12, !450
        v14 = asm(buffer: v6) -> __ptr { ptr, u64, u64 } buffer {
        }
        v15 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v15, v14
        v16 = get_local __ptr { { ptr, u64, u64 } }, __anon_1, !452
        v17 = const u64 0
        v18 = get_elem_ptr v16, __ptr { ptr, u64, u64 }, v17, !453
        mem_copy_val v18, v15
        v19 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg
        mem_copy_val v19, v16
        v20 = get_local __ptr u8, self_, !456
        mem_copy_val v20, v3
        v21 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !457
        mem_copy_val v21, v19
        v22 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !459
        v23 = const u64 0
        v24 = get_elem_ptr v22, __ptr { ptr, u64, u64 }, v23, !461
        v25 = asm(buffer: v24) -> __ptr { ptr, u64, u64 } buffer {
        }
        v26 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v26, v25
        v27 = get_local __ptr { ptr, u64, u64 }, __anon_00, !462
        mem_copy_val v27, v26
        v28 = const u64 0
        v29 = get_elem_ptr v27, __ptr ptr, v28, !463
        v30 = load v29, !464
        v31 = const u64 1
        v32 = get_elem_ptr v27, __ptr u64, v31, !465
        v33 = load v32, !466
        v34 = const u64 2
        v35 = get_elem_ptr v27, __ptr u64, v34, !467
        v36 = load v35, !468
        v37 = get_local __ptr u8, self_, !470
        v38 = load v37, !471
        v39 = const u64 1
        v40 = add v36, v39, !472
        v41 = cmp gt v40 v33, !473
        cbr v41, encode_42_abi_encode_43_block1(), encode_42_abi_encode_43_block0(v30, v33), !474

        encode_42_abi_encode_43_block0(v42: ptr, v43: u64):
        v44 = add v42, v36, !475
        v45 = cast_ptr v44 to __ptr u8, !476
        store v38 to v45, !477
        v46 = const u64 1
        v47 = add v36, v46, !478
        v48 = get_local __ptr { ptr, u64, u64 }, __anon_10, !479
        v49 = const u64 0
        v50 = get_elem_ptr v48, __ptr ptr, v49, !480
        store v42 to v50, !481
        v51 = const u64 1
        v52 = get_elem_ptr v48, __ptr u64, v51, !482
        store v43 to v52, !483
        v53 = const u64 2
        v54 = get_elem_ptr v48, __ptr u64, v53, !484
        store v47 to v54, !485
        v55 = asm(buffer: v48) -> __ptr { ptr, u64, u64 } buffer {
        }
        v56 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_01
        mem_copy_val v56, v55
        v57 = get_local __ptr { { ptr, u64, u64 } }, __anon_2, !487
        v58 = const u64 0
        v59 = get_elem_ptr v57, __ptr { ptr, u64, u64 }, v58, !488
        mem_copy_val v59, v56
        v60 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg0
        mem_copy_val v60, v57
        v61 = get_local __ptr { { ptr, u64, u64 } }, buffer, !490
        mem_copy_val v61, v60
        v62 = get_local __ptr { { ptr, u64, u64 } }, buffer, !492
        v63 = get_local __ptr { { ptr, u64, u64 } }, self_0, !495
        mem_copy_val v63, v62
        v64 = get_local __ptr { { ptr, u64, u64 } }, self_0, !497
        v65 = const u64 0
        v66 = get_elem_ptr v64, __ptr { ptr, u64, u64 }, v65, !498
        v67 = asm(buffer: v66) -> __ptr { ptr, u64, u64 } buffer {
        }
        v68 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_02
        mem_copy_val v68, v67
        v69 = get_local __ptr { ptr, u64, u64 }, __anon_01, !499
        mem_copy_val v69, v68
        v70 = const u64 0
        v71 = get_elem_ptr v69, __ptr ptr, v70, !500
        v72 = const u64 2
        v73 = get_elem_ptr v69, __ptr u64, v72, !501
        v74 = get_local __ptr { ptr, u64 }, __anon_11, !502
        v75 = const u64 0
        v76 = get_elem_ptr v74, __ptr ptr, v75, !503
        mem_copy_val v76, v71
        v77 = const u64 1
        v78 = get_elem_ptr v74, __ptr u64, v77, !504
        mem_copy_val v78, v73
        v79 = asm(s: v74) -> __ptr slice s {
        }
        v80 = get_local __ptr slice, __aggr_memcpy_03
        mem_copy_val v80, v79
        v81 = get_local __ptr slice, __tmp_block_arg1
        mem_copy_val v81, v80
        v82 = get_local __ptr slice, __tmp_block_arg2
        mem_copy_val v82, v81
        v83 = get_local __ptr slice, __log_arg
        mem_copy_val v83, v82
        v84 = const u64 14454674236531057292
        log __ptr slice v83, v84
        v85 = const unit ()
        ret () v85

        encode_42_abi_encode_43_block1():
        v86 = const u64 2
        v87 = mul v33, v86, !505
        v88 = add v87, v39, !506
        v89 = asm(new_cap: v88, old_ptr: v30, len: v36) -> __ptr u8 hp, !507 {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br encode_42_abi_encode_43_block0(v89, v88), !508
    }
}

!0 = "test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.<autogenerated>.sw"
!1 = span !0 0 135
!2 = fn_name_span !0 7 14
!3 = (!1 !2)
!4 = span !0 66 72
!5 = fn_call_path_span !0 66 70
!6 = (!4 !5)
!7 = span !0 97 103
!8 = span !0 98 99
!9 = span !0 101 102
!10 = "test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw"
!11 = span !10 1854 2666
!12 = fn_name_span !10 1857 1861
!13 = (!11 !12)
!14 = span !10 1870 1907
!15 = span !10 1912 1950
!16 = span !10 1955 1993
!17 = span !10 1998 2036
!18 = span !10 2041 2080
!19 = span !10 2085 2124
!20 = span !10 2129 2168
!21 = span !10 2174 2209
!22 = span !10 2214 2250
!23 = span !10 2255 2291
!24 = span !10 2296 2332
!25 = span !10 2337 2374
!26 = span !10 2379 2416
!27 = span !10 2421 2458
!28 = span !10 2464 2493
!29 = span !10 2498 2525
!30 = span !10 2531 2570
!31 = span !10 2596 2632
!32 = span !10 2647 2652
!33 = span !10 2653 2654
!34 = span !10 2647 2655
!35 = span !10 2637 2663
!36 = fn_call_path_span !10 2637 2646
!37 = (!35 !36)
!38 = span !10 2657 2662
!39 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/assert.sw"
!40 = span !39 1863 1871
!41 = fn_call_path_span !39 1866 1868
!42 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/ops.sw"
!43 = span !42 15555 15569
!44 = fn_call_path_span !42 15560 15562
!45 = (!35 !36 !40 !41 !43 !44)
!46 = span !42 17195 17200
!47 = (!35 !36 !40 !41 !43 !44 !46)
!48 = (!35 !36 !40 !41 !43 !44)
!49 = (!35 !36 !40 !41 !43 !44)
!50 = span !42 15554 15576
!51 = fn_call_path_span !42 15571 15574
!52 = (!35 !36 !40 !41 !50 !51)
!53 = (!35 !36 !40 !41 !50 !51)
!54 = span !42 12567 12571
!55 = (!35 !36 !40 !41 !50 !51 !54)
!56 = (!35 !36 !40 !41 !50 !51)
!57 = span !42 12573 12578
!58 = (!35 !36 !40 !41 !50 !51)
!59 = (!35 !36 !40)
!60 = span !39 1887 1889
!61 = (!35 !36 !60)
!62 = span !39 1883 1890
!63 = fn_call_path_span !39 1883 1886
!64 = (!35 !36 !62 !63)
!65 = span !39 1904 1906
!66 = (!35 !36 !65)
!67 = span !39 1900 1907
!68 = fn_call_path_span !39 1900 1903
!69 = (!35 !36 !67 !68)
!70 = span !39 1924 1947
!71 = (!35 !36 !70)
!72 = span !39 1917 1948
!73 = fn_call_path_span !39 1917 1923
!74 = (!35 !36 !72 !73)
!75 = (!35 !36 !72 !73)
!76 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/revert.sw"
!77 = span !76 766 770
!78 = (!35 !36 !72 !73 !77)
!79 = (!35 !36 !72 !73)
!80 = span !76 757 771
!81 = (!35 !36 !72 !73 !80)
!82 = span !10 58 117
!83 = fn_name_span !10 61 87
!84 = inline "never"
!85 = (!82 !83 !84)
!86 = span !10 107 115
!87 = span !10 220 282
!88 = fn_name_span !10 223 250
!89 = (!87 !88 !84)
!90 = span !10 271 280
!91 = span !10 388 450
!92 = fn_name_span !10 391 418
!93 = (!91 !92 !84)
!94 = span !10 439 448
!95 = span !10 556 618
!96 = fn_name_span !10 559 586
!97 = (!95 !96 !84)
!98 = span !10 607 616
!99 = span !10 725 855
!100 = fn_name_span !10 728 756
!101 = (!99 !100 !84)
!102 = span !10 778 853
!103 = span !10 1030 1156
!104 = fn_name_span !10 1033 1061
!105 = (!103 !104 !84)
!106 = span !10 1083 1154
!107 = span !10 1327 1392
!108 = fn_name_span !10 1330 1358
!109 = (!107 !108 !84)
!110 = span !10 1380 1390
!111 = span !10 135 194
!112 = fn_name_span !10 138 162
!113 = (!111 !112 !84)
!114 = span !10 183 192
!115 = span !10 300 362
!116 = fn_name_span !10 303 328
!117 = (!115 !116 !84)
!118 = span !10 350 360
!119 = span !10 468 530
!120 = fn_name_span !10 471 496
!121 = (!119 !120 !84)
!122 = span !10 518 528
!123 = span !10 636 698
!124 = fn_name_span !10 639 664
!125 = (!123 !124 !84)
!126 = span !10 686 696
!127 = span !10 873 1003
!128 = fn_name_span !10 876 902
!129 = (!127 !128 !84)
!130 = span !10 925 1001
!131 = span !10 1174 1300
!132 = fn_name_span !10 1177 1203
!133 = (!131 !132 !84)
!134 = span !10 1226 1298
!135 = span !10 1410 1475
!136 = fn_name_span !10 1413 1439
!137 = (!135 !136 !84)
!138 = span !10 1462 1473
!139 = span !10 1536 1590
!140 = fn_name_span !10 1539 1557
!141 = (!139 !140 !84)
!142 = span !10 1579 1588
!143 = span !10 1580 1584
!144 = span !10 1633 1687
!145 = fn_name_span !10 1636 1652
!146 = (!144 !145 !84)
!147 = span !10 1675 1685
!148 = span !10 1676 1680
!149 = span !10 1781 1852
!150 = fn_name_span !10 1784 1812
!151 = (!149 !150 !84)
!152 = span !10 1837 1850
!153 = span !10 2685 2788
!154 = fn_name_span !10 2688 2700
!155 = (!153 !154 !84)
!156 = span !10 2748 2755
!157 = span !10 2749 2754
!158 = span !10 2720 2757
!159 = span !10 2807 2935
!160 = fn_name_span !10 2810 2818
!161 = (!159 !160 !84)
!162 = span !10 2851 2878
!163 = span !10 2921 2926
!164 = span !10 2911 2927
!165 = span !10 2883 2933
!166 = fn_call_path_span !10 2883 2904
!167 = (!165 !166)
!168 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/raw_slice.sw"
!169 = span !168 2363 2366
!170 = (!165 !166 !169)
!171 = span !168 2368 2392
!172 = fn_call_path_span !168 2374 2375
!173 = (!165 !166 !171 !172)
!174 = (!165 !166 !171 !172)
!175 = span !42 7076 7080
!176 = (!165 !166 !171 !172 !175)
!177 = (!165 !166 !171 !172)
!178 = span !42 7082 7087
!179 = (!165 !166 !171 !172 !178)
!180 = (!165 !166 !171 !172)
!181 = (!165 !166 !171 !172)
!182 = span !168 2362 2393
!183 = (!165 !166 !182)
!184 = (!165 !166 !182)
!185 = (!165 !166 !182)
!186 = (!165 !166 !182)
!187 = span !168 2351 2394
!188 = fn_call_path_span !168 2351 2361
!189 = (!165 !166 !187 !188)
!190 = span !168 1257 1262
!191 = (!165 !166 !187 !188 !190)
!192 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/codec.sw"
!193 = span !192 70930 71103
!194 = fn_name_span !192 70937 70947
!195 = (!193 !194 !84)
!196 = span !192 71045 71049
!197 = span !192 71045 71055
!198 = fn_call_path_span !192 71050 71053
!199 = (!197 !198)
!200 = span !168 2922 2926
!201 = (!197 !198 !200)
!202 = span !168 2911 2927
!203 = fn_call_path_span !168 2911 2921
!204 = (!197 !198 !202 !203)
!205 = span !168 1633 1638
!206 = (!197 !198 !202 !203 !205)
!207 = span !168 2928 2929
!208 = (!197 !198 !207)
!209 = span !192 71057 71061
!210 = span !192 71057 71073
!211 = fn_call_path_span !192 71062 71065
!212 = (!210 !211)
!213 = span !168 3420 3424
!214 = (!210 !211 !213)
!215 = span !168 3409 3425
!216 = fn_call_path_span !168 3409 3419
!217 = (!210 !211 !215 !216)
!218 = (!210 !211 !215 !216 !205)
!219 = span !168 3426 3427
!220 = (!210 !211 !219)
!221 = span !168 3409 3446
!222 = fn_call_path_span !168 3428 3429
!223 = (!210 !211 !221 !222)
!224 = (!210 !211 !221 !222)
!225 = (!210 !211 !221 !222)
!226 = span !42 9973 9977
!227 = (!210 !211 !221 !222 !226)
!228 = (!210 !211 !221 !222)
!229 = span !42 9979 9984
!230 = (!210 !211 !221 !222 !229)
!231 = (!210 !211 !221 !222)
!232 = (!210 !211 !221 !222)
!233 = span !192 71020 71074
!234 = fn_call_path_span !192 71020 71044
!235 = (!233 !234)
!236 = span !192 750 753
!237 = (!233 !234 !236)
!238 = span !192 735 755
!239 = (!233 !234 !238)
!240 = span !192 71003 71075
!241 = span !192 71094 71100
!242 = span !192 71080 71101
!243 = fn_call_path_span !192 71080 71093
!244 = (!242 !243)
!245 = span !192 89587 89627
!246 = (!242 !243 !245)
!247 = span !192 89607 89627
!248 = (!242 !243 !245)
!249 = span !192 89653 89666
!250 = (!242 !243 !249)
!251 = span !192 89637 89667
!252 = (!242 !243 !251)
!253 = span !192 89752 89757
!254 = (!242 !243 !253)
!255 = span !192 89676 89759
!256 = (!242 !243 !255)
!257 = span !192 89769 89783
!258 = (!242 !243 !257)
!259 = span !192 89781 89782
!260 = (!242 !243 !257)
!261 = span !192 89807 89808
!262 = (!242 !243 !261)
!263 = span !192 89807 89812
!264 = fn_call_path_span !192 89809 89810
!265 = (!242 !243 !263 !264)
!266 = (!242 !243 !263 !264)
!267 = (!242 !243 !263 !264)
!268 = span !42 21076 21080
!269 = (!242 !243 !263 !264 !268)
!270 = (!242 !243 !263 !264)
!271 = span !42 21082 21087
!272 = (!242 !243 !263 !264 !271)
!273 = (!242 !243 !263 !264)
!274 = (!242 !243 !263 !264)
!275 = span !192 89856 89861
!276 = (!242 !243 !275)
!277 = span !192 89863 89864
!278 = (!242 !243 !277)
!279 = span !192 89827 89866
!280 = (!242 !243 !279)
!281 = (!242 !243 !279)
!282 = span !192 89887 89893
!283 = (!242 !243 !282)
!284 = span !192 89887 89907
!285 = fn_call_path_span !192 89894 89900
!286 = (!242 !243 !284 !285)
!287 = span !192 3973 3977
!288 = (!242 !243 !284 !285 !287)
!289 = span !192 3959 3978
!290 = fn_call_path_span !192 3959 3972
!291 = (!242 !243 !284 !285 !289 !290)
!292 = span !192 72720 72726
!293 = (!242 !243 !284 !285 !289 !290 !292)
!294 = span !192 72720 72739
!295 = fn_call_path_span !192 72727 72731
!296 = (!242 !243 !284 !285 !289 !290 !294 !295)
!297 = span !192 3371 3399
!298 = (!242 !243 !284 !285 !289 !290 !294 !295 !297)
!299 = (!242 !243 !284 !285 !289 !290 !294 !295 !297)
!300 = span !192 3412 3438
!301 = (!242 !243 !284 !285 !289 !290 !294 !295 !300)
!302 = span !192 3470 3474
!303 = (!242 !243 !284 !285 !289 !290 !294 !295 !302)
!304 = (!242 !243 !284 !285 !289 !290 !294 !295)
!305 = span !192 625 637
!306 = (!242 !243 !284 !285 !289 !290 !294 !295 !305)
!307 = (!242 !243 !284 !285 !289 !290 !294 !295)
!308 = span !192 3461 3518
!309 = (!242 !243 !284 !285 !289 !290 !294 !295 !308)
!310 = span !192 3453 3519
!311 = (!242 !243 !284 !285 !289 !290 !294 !295 !310)
!312 = (!242 !243 !284 !285 !289 !290 !294 !295 !310)
!313 = span !192 3559 3563
!314 = (!242 !243 !284 !285 !289 !290 !294 !295 !313)
!315 = (!242 !243 !284 !285 !289 !290 !294 !295)
!316 = (!242 !243 !284 !285 !289 !290 !294 !295 !305)
!317 = (!242 !243 !284 !285 !289 !290 !294 !295)
!318 = span !192 3569 3573
!319 = (!242 !243 !284 !285 !289 !290 !294 !295 !318)
!320 = (!242 !243 !284 !285 !289 !290 !294 !295)
!321 = (!242 !243 !284 !285 !289 !290 !294 !295)
!322 = (!242 !243 !284 !285 !289 !290 !294 !295)
!323 = span !192 3532 3574
!324 = (!242 !243 !284 !285 !289 !290 !294 !295 !323)
!325 = (!242 !243 !284 !285 !289 !290 !294 !295)
!326 = (!242 !243 !284 !285 !289 !290 !294 !295 !323)
!327 = (!242 !243 !284 !285 !289 !290 !294 !295 !323)
!328 = span !192 3588 3589
!329 = (!242 !243 !284 !285 !289 !290 !294 !295 !328)
!330 = (!242 !243 !284 !285 !289 !290 !294 !295)
!331 = (!242 !243 !284 !285 !289 !290 !294 !295)
!332 = span !192 3608 3612
!333 = (!242 !243 !284 !285 !289 !290 !294 !295 !332)
!334 = span !192 3608 3617
!335 = fn_call_path_span !192 3613 3615
!336 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335)
!337 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335)
!338 = span !192 3616 3617
!339 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335)
!340 = span !42 16833 16837
!341 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335 !340)
!342 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335)
!343 = span !42 16839 16844
!344 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335 !343)
!345 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335)
!346 = (!242 !243 !284 !285 !289 !290 !294 !295 !334 !335)
!347 = (!242 !243 !284 !285 !289 !290 !294 !295 !334)
!348 = span !192 3649 3653
!349 = (!242 !243 !284 !285 !289 !290 !294 !295 !348)
!350 = (!242 !243 !284 !285 !289 !290 !294 !295)
!351 = (!242 !243 !284 !285 !289 !290 !294 !295 !305)
!352 = (!242 !243 !284 !285 !289 !290 !294 !295)
!353 = span !192 3640 3733
!354 = (!242 !243 !284 !285 !289 !290 !294 !295 !353)
!355 = span !192 3682 3695
!356 = span !192 3632 3734
!357 = (!242 !243 !284 !285 !289 !290 !294 !295 !356)
!358 = (!242 !243 !284 !285 !289 !290 !294 !295 !356)
!359 = span !192 3774 3778
!360 = (!242 !243 !284 !285 !289 !290 !294 !295 !359)
!361 = (!242 !243 !284 !285 !289 !290 !294 !295)
!362 = (!242 !243 !284 !285 !289 !290 !294 !295 !305)
!363 = (!242 !243 !284 !285 !289 !290 !294 !295)
!364 = span !192 3784 3785
!365 = (!242 !243 !284 !285 !289 !290 !294 !295)
!366 = (!242 !243 !284 !285 !289 !290 !294 !295)
!367 = span !192 3747 3786
!368 = (!242 !243 !284 !285 !289 !290 !294 !295 !367)
!369 = (!242 !243 !284 !285 !289 !290 !294 !295)
!370 = (!242 !243 !284 !285 !289 !290 !294 !295 !367)
!371 = (!242 !243 !284 !285 !289 !290 !294 !295 !367)
!372 = span !192 3800 3801
!373 = (!242 !243 !284 !285 !289 !290 !294 !295 !372)
!374 = (!242 !243 !284 !285 !289 !290 !294 !295)
!375 = (!242 !243 !284 !285 !289 !290 !294 !295)
!376 = span !192 3831 3835
!377 = (!242 !243 !284 !285 !289 !290 !294 !295 !376)
!378 = span !192 3831 3855
!379 = fn_call_path_span !192 3836 3848
!380 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!381 = span !192 2775 2779
!382 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !381)
!383 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!384 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !305)
!385 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!386 = span !192 2766 2847
!387 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !386)
!388 = span !192 2804 2817
!389 = span !192 2758 2848
!390 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !389)
!391 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !389)
!392 = span !192 2884 2888
!393 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !392)
!394 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!395 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !305)
!396 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!397 = span !192 2894 2895
!398 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!399 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!400 = span !192 2857 2896
!401 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !400)
!402 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!403 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !400)
!404 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !400)
!405 = span !192 2906 2907
!406 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379 !405)
!407 = (!242 !243 !284 !285 !289 !290 !294 !295 !378 !379)
!408 = (!242 !243 !284 !285 !289 !290 !294 !295)
!409 = (!242 !243 !284 !285 !289 !290 !294 !295)
!410 = span !192 89880 89884
!411 = (!242 !243 !410)
!412 = span !192 89879 89907
!413 = (!242 !243 !412)
!414 = span !192 89921 89922
!415 = (!242 !243 !414)
!416 = span !192 89921 89927
!417 = fn_call_path_span !192 89923 89925
!418 = (!242 !243 !416 !417)
!419 = (!242 !243 !416 !417)
!420 = span !192 89926 89927
!421 = (!242 !243 !416 !417)
!422 = span !42 1322 1326
!423 = (!242 !243 !416 !417 !422)
!424 = (!242 !243 !416 !417)
!425 = span !42 1328 1333
!426 = (!242 !243 !416 !417 !425)
!427 = (!242 !243 !416 !417)
!428 = (!242 !243 !416 !417)
!429 = (!242 !243 !416)
!430 = (!242 !243 !416)
!431 = span !192 89957 89962
!432 = (!242 !243 !431)
!433 = "test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert/src/logging.sw"
!434 = span !433 591 596
!435 = span !433 577 651
!436 = fn_name_span !433 584 587
!437 = (!435 !436)
!438 = span !433 642 647
!439 = span !192 70852 70856
!440 = (!438 !439)
!441 = span !192 70868 70881
!442 = fn_call_path_span !192 70868 70879
!443 = (!438 !441 !442)
!444 = (!438 !441 !442)
!445 = (!438 !441 !442)
!446 = (!438 !441 !442)
!447 = (!438 !441 !442)
!448 = (!438 !441 !442)
!449 = (!438 !441 !442)
!450 = (!438 !441 !442)
!451 = span !192 191 254
!452 = (!438 !441 !442 !451)
!453 = (!438 !441 !442)
!454 = span !192 70852 70882
!455 = fn_call_path_span !192 70857 70867
!456 = (!438 !454 !455)
!457 = (!438 !454 !455)
!458 = span !192 5301 5307
!459 = (!438 !454 !455 !458)
!460 = span !192 87 114
!461 = (!438 !454 !455 !460)
!462 = (!438 !454 !455)
!463 = (!438 !454 !455)
!464 = (!438 !454 !455)
!465 = (!438 !454 !455)
!466 = (!438 !454 !455)
!467 = (!438 !454 !455)
!468 = (!438 !454 !455)
!469 = span !192 5316 5320
!470 = (!438 !454 !455 !469)
!471 = (!438 !454 !455)
!472 = (!438 !454 !455)
!473 = (!438 !454 !455)
!474 = (!438 !454 !455)
!475 = (!438 !454 !455)
!476 = (!438 !454 !455)
!477 = (!438 !454 !455)
!478 = (!438 !454 !455)
!479 = (!438 !454 !455)
!480 = (!438 !454 !455)
!481 = (!438 !454 !455)
!482 = (!438 !454 !455)
!483 = (!438 !454 !455)
!484 = (!438 !454 !455)
!485 = (!438 !454 !455)
!486 = span !192 5249 5332
!487 = (!438 !454 !455 !486)
!488 = (!438 !454 !455)
!489 = span !192 70839 70883
!490 = (!438 !489)
!491 = span !192 70888 70894
!492 = (!438 !491)
!493 = span !192 70888 70909
!494 = fn_call_path_span !192 70895 70907
!495 = (!438 !493 !494)
!496 = span !192 573 577
!497 = (!438 !493 !494 !496)
!498 = (!438 !493 !494 !460)
!499 = (!438 !493 !494)
!500 = (!438 !493 !494)
!501 = (!438 !493 !494)
!502 = (!438 !493 !494)
!503 = (!438 !493 !494)
!504 = (!438 !493 !494)
!505 = (!438 !454 !455)
!506 = (!438 !454 !455)
!507 = (!438 !454 !455)
!508 = (!438 !454 !455)

;; ASM: Final program
;; Program kind: Script
.program:
move $$tmp $pc
jmpf $zero i4
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
CONFIGURABLES_OFFSET[0..32]
CONFIGURABLES_OFFSET[32..64]
lw   $$ds $$tmp i1
add  $$ds $$ds $$tmp
cfei i0                       ; allocate stack space for globals
move $$locbase $sp            ; save locals base register for function __entry
cfei i48                      ; allocate 48 bytes for locals and 0 slots for call arguments
addi $r0 $$locbase i32        ; get offset to local
jal  $$reta $pc i9            ; [call]: call main_0
addi $r1 $$locbase i16        ; get offset to local
sw   $$locbase $zero i2       ; store word
sw   $$locbase $zero i3       ; store word
mcpi $$locbase $r1 i16        ; copy memory
mcpi $r0 $$locbase i16        ; copy memory
lw   $r1 $r0 i1               ; load size of returned slice
lw   $r0 $r0 i0               ; load pointer to returned slice
retd  $r0 $r1
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function main_0
cfei i794792                  ; allocate 794792 bytes for locals and 0 slots for call arguments
move $r2 $$reta               ; save return address
movi $r0 i66229               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i259          ; [call]: call array_repeat_zero_small_u8_1
movi $r0 i33114               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i5            ; copy memory
mcpi $$locbase $r0 i5         ; copy memory
movi $r0 i66230               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i263          ; [call]: call array_repeat_zero_small_u16_2
movi $r0 i33115               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i40           ; copy memory
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i66235               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i266          ; [call]: call array_repeat_zero_small_u32_3
movi $r0 i33120               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i40           ; copy memory
addi $r1 $$locbase i48        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i99219               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i269          ; [call]: call array_repeat_zero_small_u64_4
movi $r0 i66104               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i40           ; copy memory
addi $r1 $$locbase i88        ; get offset to local
mcpi $r1 $r0 i40              ; copy memory
movi $r0 i99224               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i272          ; [call]: call array_repeat_zero_small_u256_5
movi $r0 i66109               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i160          ; copy memory
addi $r1 $$locbase i128       ; get offset to local
mcpi $r1 $r0 i160             ; copy memory
movi $r0 i99244               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i275          ; [call]: call array_repeat_zero_small_b256_6
movi $r0 i66129               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i160          ; copy memory
addi $r1 $$locbase i288       ; get offset to local
mcpi $r1 $r0 i160             ; copy memory
movi $r0 i99264               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i278          ; [call]: call array_repeat_zero_small_bool_7
movi $r0 i66149               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i5            ; copy memory
addi $r1 $$locbase i448       ; get offset to local
mcpi $r1 $r0 i5               ; copy memory
movi $r0 i99265               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i281          ; [call]: call array_repeat_zero_big_u8_8
movi $r0 i66150               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i25           ; copy memory
addi $r1 $$locbase i456       ; get offset to local
mcpi $r1 $r0 i25              ; copy memory
movi $r0 i99269               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i284          ; [call]: call array_repeat_zero_big_u16_9
movi $r0 i66154               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i200          ; copy memory
addi $r1 $$locbase i488       ; get offset to local
mcpi $r1 $r0 i200             ; copy memory
movi $r0 i99294               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i287          ; [call]: call array_repeat_zero_big_u32_10
movi $r0 i66179               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i200          ; copy memory
addi $r1 $$locbase i688       ; get offset to local
mcpi $r1 $r0 i200             ; copy memory
movi $r0 i99319               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i290          ; [call]: call array_repeat_zero_big_u64_11
movi $r0 i66204               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i200          ; copy memory
addi $r1 $$locbase i888       ; get offset to local
mcpi $r1 $r0 i200             ; copy memory
movi $r0 i66240               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i293          ; [call]: call array_repeat_zero_big_u256_12
movi $r0 i33125               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i800          ; copy memory
addi $r1 $$locbase i1088      ; get offset to local
mcpi $r1 $r0 i800             ; copy memory
movi $r0 i66340               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i296          ; [call]: call array_repeat_zero_big_b256_13
movi $r0 i33225               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i800          ; copy memory
addi $r1 $$locbase i1888      ; get offset to local
mcpi $r1 $r0 i800             ; copy memory
movi $r0 i66440               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i299          ; [call]: call array_repeat_zero_big_bool_14
movi $r0 i33325               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i25           ; copy memory
addi $r1 $$locbase i2688      ; get offset to local
mcpi $r1 $r0 i25              ; copy memory
movi $r0 i66444               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i302          ; [call]: call small_array_repeat_15
movi $r0 i33329               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i5            ; copy memory
addi $r1 $$locbase i2720      ; get offset to local
mcpi $r1 $r0 i5               ; copy memory
movi $r0 i66445               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i322          ; [call]: call big_array_repeat_16
movi $r0 i33330               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i25           ; copy memory
addi $r1 $$locbase i2728      ; get offset to local
mcpi $r1 $r0 i25              ; copy memory
movi $r0 i66449               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i332          ; [call]: call u8_array_bigger_than_18_bits_17
move $r0 $$retv               ; [call]: copy the return value
movi $r1 i33334               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
load $$tmp data_NonConfigurable_0; loading copy size in bytes
mcp  $r1 $r0 $$tmp            ; copy memory
addi $r0 $$locbase i2760      ; get offset to local
load $$tmp data_NonConfigurable_0; loading copy size in bytes
mcp  $r0 $r1 $$tmp            ; copy memory
movi $r0 i99218               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i334          ; [call]: call decode_array_18
movi $r0 i66103               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $$retv i1            ; copy memory
movi $r1 i99344               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
mcpi $r1 $r0 i1               ; copy memory
movi $r0 i99344               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mul  $r1 $zero $one           ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
movi $r0 i99347               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
mcpi $r0 $r1 i1               ; copy memory
movi $r0 i99348               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
movi $r3 i255                 ; initialize constant into register
sb   $r0 $r3 i0               ; store byte
lb   $r0 $r1 i0               ; load byte
movi $r1 i99348               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
lb   $r1 $r1 i0               ; load byte
eq   $r0 $r0 $r1
movi $r1 i99346               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
sb   $r1 $r0 i0               ; store byte
movi $r0 i99346               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lb   $r0 $r0 i0               ; load byte
eq   $r0 $r0 $zero
jnzf $r0 $zero i2
move $$retv $zero             ; set return value
jmpf $zero i24
movi $r0 i99347               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i505          ; [call]: call log_41
movi $r0 i99348               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lb   $r0 $r0 i0               ; load byte
move $$arg0 $r0               ; [call]: pass argument 0
jal  $$reta $pc i499          ; [call]: call log_41
addr $r0 data_NonConfigurable_1; get constant's address in data section
lw   $r0 $r0 i0               ; load word
movi $r1 i99345               ; get word offset to local from base
muli $r1 $r1 i8               ; get byte offset to local from base
add  $r1 $$locbase $r1        ; get absolute byte offset to local
sw   $r1 $r0 i0               ; store word
movi $r0 i99345               ; get word offset to local from base
muli $r0 $r0 i8               ; get byte offset to local from base
add  $r0 $$locbase $r0        ; get absolute byte offset to local
lw   $r0 $r0 i0               ; load word
rvrt $r0
cfsi i794792                  ; free 794792 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u8_1
cfei i8                       ; allocate 8 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i5             ; clear memory [u8; 5], 5 bytes
mcpi $r0 $$locbase i5         ; copy memory
move $$retv $r0               ; set return value
cfsi i8                       ; free 8 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u16_2
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i40            ; clear memory [u64; 5], 40 bytes
mcpi $r0 $$locbase i40        ; copy memory
move $$retv $r0               ; set return value
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u32_3
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i40            ; clear memory [u64; 5], 40 bytes
mcpi $r0 $$locbase i40        ; copy memory
move $$retv $r0               ; set return value
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u64_4
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i40            ; clear memory [u64; 5], 40 bytes
mcpi $r0 $$locbase i40        ; copy memory
move $$retv $r0               ; set return value
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_u256_5
cfei i160                     ; allocate 160 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i160           ; clear memory [u256; 5], 160 bytes
mcpi $r0 $$locbase i160       ; copy memory
move $$retv $r0               ; set return value
cfsi i160                     ; free 160 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_b256_6
cfei i160                     ; allocate 160 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i160           ; clear memory [b256; 5], 160 bytes
mcpi $r0 $$locbase i160       ; copy memory
move $$retv $r0               ; set return value
cfsi i160                     ; free 160 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_small_bool_7
cfei i8                       ; allocate 8 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i5             ; clear memory [bool; 5], 5 bytes
mcpi $r0 $$locbase i5         ; copy memory
move $$retv $r0               ; set return value
cfsi i8                       ; free 8 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u8_8
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i25            ; clear memory [u8; 25], 25 bytes
mcpi $r0 $$locbase i25        ; copy memory
move $$retv $r0               ; set return value
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u16_9
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i200           ; clear memory [u64; 25], 200 bytes
mcpi $r0 $$locbase i200       ; copy memory
move $$retv $r0               ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u32_10
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i200           ; clear memory [u64; 25], 200 bytes
mcpi $r0 $$locbase i200       ; copy memory
move $$retv $r0               ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u64_11
cfei i200                     ; allocate 200 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i200           ; clear memory [u64; 25], 200 bytes
mcpi $r0 $$locbase i200       ; copy memory
move $$retv $r0               ; set return value
cfsi i200                     ; free 200 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_u256_12
cfei i800                     ; allocate 800 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i800           ; clear memory [u256; 25], 800 bytes
mcpi $r0 $$locbase i800       ; copy memory
move $$retv $r0               ; set return value
cfsi i800                     ; free 800 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_b256_13
cfei i800                     ; allocate 800 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i800           ; clear memory [b256; 25], 800 bytes
mcpi $r0 $$locbase i800       ; copy memory
move $$retv $r0               ; set return value
cfsi i800                     ; free 800 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i3                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function array_repeat_zero_big_bool_14
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mcli $$locbase i25            ; clear memory [bool; 25], 25 bytes
mcpi $r0 $$locbase i25        ; copy memory
move $$retv $r0               ; set return value
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i3                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i7                       ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function small_array_repeat_15
cfei i8                       ; allocate 8 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
mul  $r2 $zero $one           ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
mul  $r2 $one $one            ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i2                   ; initialize constant into register
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i3                   ; initialize constant into register
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
movi $r2 i4                   ; initialize constant into register
mul  $r2 $r2 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
mcpi $r0 $$locbase i5         ; copy memory
move $$retv $r0               ; set return value
cfsi i8                       ; free 8 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i7                       ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function big_array_repeat_16
cfei i32                      ; allocate 32 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
move $r3 $zero                ; move parameter from branch to block argument
mul  $r2 $r3 $one             ; get offset to array element
add  $r2 $$locbase $r2        ; add array element offset to array base
sb   $r2 $one i0              ; store byte
add  $r3 $r3 $one
movi $r2 i25                  ; initialize constant into register
lt   $r2 $r3 $r2
jnzb $r2 $zero i5
mcpi $r0 $$locbase i25        ; copy memory
move $$retv $r0               ; set return value
cfsi i32                      ; free 32 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
<<<<<<< HEAD
<<<<<<< HEAD
pshl i3                       ; save registers 16..40
=======
<<<<<<< HEAD
<<<<<<< HEAD
pshl i3                       ; save registers 16..40
=======
pshl i7                       ; save registers 16..40
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
=======
pshl i3                       ; save registers 16..40
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
=======
pshl i3                       ; save registers 16..40
>>>>>>> 586981b65 (update tests)
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function u8_array_bigger_than_18_bits_17
cfei i262152                  ; allocate 262152 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
load $$tmp data_NonConfigurable_0; loading clear size in bytes
mcl  $$locbase $$tmp          ; clear memory [u8; 262145]
<<<<<<< HEAD
<<<<<<< HEAD
load $$tmp data_NonConfigurable_0; loading copy size in bytes
mcp  $r0 $$locbase $$tmp      ; copy memory
=======
<<<<<<< HEAD
<<<<<<< HEAD
load $$tmp data_NonConfigurable_0; loading copy size in bytes
mcp  $r0 $$locbase $$tmp      ; copy memory
=======
movi $r2 i262145              ; get data length for memory copy
mcp  $r0 $$locbase $r2        ; copy memory
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
=======
load $$tmp data_NonConfigurable_0; loading copy size in bytes
mcp  $r0 $$locbase $$tmp      ; copy memory
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
=======
load $$tmp data_NonConfigurable_0; loading copy size in bytes
mcp  $r0 $$locbase $$tmp      ; copy memory
>>>>>>> 586981b65 (update tests)
move $$retv $r0               ; set return value
cfsi i262152                  ; free 262152 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
<<<<<<< HEAD
<<<<<<< HEAD
popl i3                       ; restore registers 16..40
=======
<<<<<<< HEAD
<<<<<<< HEAD
popl i3                       ; restore registers 16..40
=======
popl i7                       ; restore registers 16..40
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
=======
popl i3                       ; restore registers 16..40
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
=======
popl i3                       ; restore registers 16..40
>>>>>>> 586981b65 (update tests)
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function decode_array_18
cfei i96                      ; allocate 96 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i24        ; get offset to local
mul  $r3 $zero $one           ; get offset to array element
add  $r3 $r2 $r3              ; add array element offset to array base
movi $r4 i255                 ; initialize constant into register
sb   $r3 $r4 i0               ; store byte
addi $r3 $$locbase i56        ; get offset to local
mcpi $r3 $r2 i1               ; copy memory
addi $r2 $$locbase i32        ; get offset to local
move $$arg0 $r3               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
jal  $$reta $pc i19           ; [call]: call to_slice_19
mcpi $$locbase $$retv i16     ; copy memory
addi $r2 $$locbase i80        ; get offset to local
mcpi $r2 $$locbase i16        ; copy memory
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $$locbase i16        ; copy memory
addi $r3 $$locbase i48        ; get offset to local
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r3               ; [call]: pass argument 1
jal  $$reta $pc i44           ; [call]: call abi_decode_23
addi $r2 $$locbase i16        ; get offset to local
mcpi $r2 $$retv i1            ; copy memory
mcpi $r0 $r2 i1               ; copy memory
move $$retv $r0               ; set return value
cfsi i96                      ; free 96 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function to_slice_19
cfei i112                     ; allocate 112 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (__ret_value)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i64        ; get offset to local
mcpi $r2 $$arg0 i1            ; copy memory
sw   $$locbase $one i9        ; store word
addi $r2 $$locbase i64        ; get offset to local
sw   $$locbase $r2 i13        ; store word
addi $r2 $$locbase i104       ; get offset to local
sw   $$locbase $one i10       ; store word
lw   $r3 $$locbase i9         ; load word
lw   $r4 $$locbase i10        ; load word
mul  $r3 $r3 $r4
addi $r4 $$locbase i16        ; get offset to local
mcpi $r4 $r2 i8               ; copy memory
sw   $$locbase $r3 i3         ; store word
addi $r2 $$locbase i88        ; get offset to local
mcpi $r2 $r4 i16              ; copy memory
addi $r2 $$locbase i88        ; get offset to local
mcpi $$locbase $r2 i16        ; copy memory
addi $r2 $$locbase i32        ; get offset to local
mcpi $r2 $$locbase i16        ; copy memory
addi $r3 $$locbase i48        ; get offset to local
mcpi $r3 $r2 i16              ; copy memory
mcpi $r0 $r3 i16              ; copy memory
move $$retv $r0               ; set return value
cfsi i112                     ; free 112 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function abi_decode_23
cfei i416                     ; allocate 416 bytes for locals and 0 slots for call arguments
move $r4 $$arg1               ; save argument 1 (__ret_value)
move $r3 $$reta               ; save return address
addi $r0 $$locbase i192       ; get offset to local
mcpi $r0 $$arg0 i16           ; copy memory
addi $r0 $$locbase i192       ; get offset to local
addi $r1 $$locbase i264       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i264       ; get offset to local
addi $r1 $$locbase i360       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i360       ; get offset to local
addi $r1 $$locbase i8         ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i96        ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i5         ; load word
addi $r1 $$locbase i192       ; get offset to local
addi $r2 $$locbase i280       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i280       ; get offset to local
addi $r2 $$locbase i376       ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i376       ; get offset to local
addi $r2 $$locbase i24        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i112       ; get offset to local
mcpi $r1 $r2 i16              ; copy memory
addi $r2 $$locbase i56        ; get offset to local
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $r2 i8               ; get offset to aggregate element
addi $r2 $$locbase i296       ; get offset to local
mcpi $r2 $r1 i8               ; copy memory
sw   $$locbase $one i28       ; store word
lw   $r1 $$locbase i37        ; load word
lw   $r2 $$locbase i28        ; load word
div  $r1 $r1 $r2
sw   $$locbase $r0 i32        ; store word
sw   $$locbase $r1 i18        ; store word
addi $r0 $$locbase i256       ; get offset to local
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i128       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
addi $r1 $$locbase i168       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i168       ; get offset to local
sw   $$locbase $r0 i22        ; store word
sw   $$locbase $one i0        ; store word
addi $r0 $$locbase i80        ; get offset to local
mcli $r0 i1                   ; clear memory [u8; 1], 1 bytes
addi $r1 $$locbase i152       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i152       ; get offset to local
addi $r1 $$locbase i88        ; get offset to local
sw   $$locbase $r0 i11        ; store word
addi $r0 $$locbase i160       ; get offset to local
mcpi $r0 $r1 i8               ; copy memory
sw   $$locbase $zero i26      ; store word
addi $r0 $$locbase i208       ; get offset to local
addi $r1 $$locbase i328       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i29       ; store word
lw   $r0 $$locbase i41        ; load word
lw   $r1 $$locbase i29        ; load word
lt   $r0 $r0 $r1
jnzf $r0 $zero i6
lw   $r0 $$locbase i20        ; load word
addi $r1 $$locbase i136       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
mcpi $r4 $r1 i1               ; copy memory
move $$retv $r4               ; set return value
jmpf $zero i65
lw   $r0 $$locbase i20        ; load word
lw   $r1 $$locbase i26        ; load word
mul  $r1 $r1 $one
add  $r0 $r0 $r1
sw   $$locbase $r0 i27        ; store word
addi $r0 $$locbase i176       ; get offset to local
addi $r1 $$locbase i320       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i320       ; get offset to local
addi $r1 $$locbase i184       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i184       ; get offset to local
addi $r1 $$locbase i304       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i44       ; store word
addi $r0 $$locbase i352       ; get offset to local
addi $r1 $$locbase i312       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i30       ; store word
lw   $r0 $$locbase i39        ; load word
lw   $r1 $$locbase i30        ; load word
eq   $r0 $r0 $r1
jnzf $r0 $zero i18
addi $r0 $$locbase i304       ; get offset to local
addi $r1 $$locbase i336       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
lw   $r0 $$locbase i42        ; load word
lw   $r0 $r0 i0               ; load word
lw   $r0 $r0 i0               ; lw val ptr i0
addi $r1 $$locbase i400       ; get offset to local
sb   $r1 $r0 i0               ; store byte
lw   $r0 $$locbase i42        ; load word
lw   $r0 $r0 i0               ; load word
movi $r1 i8                   ; initialize constant into register
mul  $r1 $one $r1
add  $r0 $r0 $r1
lw   $r1 $$locbase i42        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i400       ; get offset to local
lb   $r0 $r0 i0               ; load byte
jmpf $zero i13
lw   $r0 $$locbase i38        ; load word
lw   $r0 $r0 i0               ; load word
lb   $r0 $r0 i0               ; lb val ptr i0
addi $r1 $$locbase i408       ; get offset to local
sb   $r1 $r0 i0               ; store byte
lw   $r0 $$locbase i38        ; load word
lw   $r0 $r0 i0               ; load word
mul  $r1 $one $one
add  $r0 $r0 $r1
lw   $r1 $$locbase i38        ; load word
sw   $r1 $r0 i0               ; store word
addi $r0 $$locbase i408       ; get offset to local
lb   $r0 $r0 i0               ; load byte
lw   $r1 $$locbase i27        ; load word
sb   $r1 $r0 i0               ; store byte
addi $r0 $$locbase i208       ; get offset to local
addi $r1 $$locbase i344       ; get offset to local
mcpi $r1 $r0 i8               ; copy memory
sw   $$locbase $one i31       ; store word
lw   $r0 $$locbase i43        ; load word
lw   $r1 $$locbase i31        ; load word
add  $r0 $r0 $r1
sw   $$locbase $r0 i26        ; store word
jmpb $zero i77
cfsi i416                     ; free 416 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function log_41
cfei i464                     ; allocate 464 bytes for locals and 0 slots for call arguments
move $r5 $$reta               ; save return address
addi $r0 $$locbase i456       ; get offset to local
sb   $r0 $$arg0 i0            ; store byte
addi $r0 $$locbase i456       ; get offset to local
addi $r1 $$locbase i416       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i416       ; get offset to local
movi $r1 i1024                ; initialize constant into register
aloc $r1
addi $r1 $$locbase i112       ; get offset to local
sw   $$locbase $hp i14        ; store word
movi $r2 i1024                ; initialize constant into register
sw   $$locbase $r2 i15        ; store word
sw   $$locbase $zero i16      ; store word
mcpi $$locbase $r1 i24        ; copy memory
addi $r1 $$locbase i184       ; get offset to local
mcpi $r1 $$locbase i24        ; copy memory
addi $r2 $$locbase i288       ; get offset to local
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i424       ; get offset to local
mcpi $r1 $r0 i1               ; copy memory
addi $r0 $$locbase i392       ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
addi $r0 $$locbase i392       ; get offset to local
addi $r1 $$locbase i24        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i136       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
lw   $r0 $$locbase i17        ; load word
lw   $r4 $$locbase i18        ; load word
lw   $r1 $$locbase i19        ; load word
addi $r2 $$locbase i424       ; get offset to local
lb   $r2 $r2 i0               ; load byte
add  $r3 $r1 $one
gt   $r3 $r3 $r4
jnzf $r3 $zero i1
jmpf $zero i6
movi $r3 i2                   ; initialize constant into register
mul  $r3 $r4 $r3
add  $r4 $r3 $one
aloc $r4
mcp  $hp $r0 $r1
move $r0 $hp                  ; move parameter from branch to block argument
add  $r3 $r0 $r1
sb   $r3 $r2 i0               ; store byte
add  $r1 $r1 $one
addi $r2 $$locbase i208       ; get offset to local
sw   $$locbase $r0 i26        ; store word
sw   $$locbase $r4 i27        ; store word
sw   $$locbase $r1 i28        ; store word
addi $r0 $$locbase i48        ; get offset to local
mcpi $r0 $r2 i24              ; copy memory
addi $r1 $$locbase i248       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i312       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $$locbase i368       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i368       ; get offset to local
addi $r1 $$locbase i432       ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i432       ; get offset to local
addi $r1 $$locbase i72        ; get offset to local
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i160       ; get offset to local
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $r0 i16              ; get offset to aggregate element
addi $r2 $$locbase i232       ; get offset to local
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $r2 i8               ; get offset to aggregate element
mcpi $r0 $r1 i8               ; copy memory
addi $r0 $$locbase i96        ; get offset to local
mcpi $r0 $r2 i16              ; copy memory
addi $r1 $$locbase i336       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i352       ; get offset to local
mcpi $r0 $r1 i16              ; copy memory
addi $r1 $$locbase i272       ; get offset to local
mcpi $r1 $r0 i16              ; copy memory
load $r0 data_NonConfigurable_2; load constant from data section
lw   $r1 $$locbase i34        ; load slice pointer for logging data
lw   $r2 $$locbase i35        ; load slice size for logging data
logd $zero $r0 $r1 $r2        ; log slice
move $$retv $zero             ; set return value
cfsi i464                     ; free 464 bytes for locals and 0 slots for extra call arguments
move $$reta $r5               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
.data:
data_NonConfigurable_0 .word 262145
data_NonConfigurable_1 .word 18446744073709486083
data_NonConfigurable_2 .word 14454674236531057292


;; --- START OF TARGET BYTECODE ---

0x00000000 MOVE R60 $pc                                    ;; [26, 240, 48, 0]
0x00000004 JMPF $zero 0x4                                  ;; [116, 0, 0, 4]
0x00000008                                                 ;; [0, 0, 0, 0, 0, 0, 13, 120]
0x00000010                                                 ;; [0, 0, 0, 0, 0, 0, 0, 0]
0x00000018 LW R63 R60 0x1                                  ;; [93, 255, 192, 1]
0x0000001c ADD R63 R63 R60                                 ;; [16, 255, 255, 0]
0x00000020 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000024 CFEI 0x30                                       ;; [145, 0, 0, 48]
0x00000028 ADDI $writable R59 0x20                         ;; [80, 67, 176, 32]
0x0000002c JAL R62 $pc 0x9                                 ;; [153, 248, 48, 9]
0x00000030 ADDI R17 R59 0x10                               ;; [80, 71, 176, 16]
0x00000034 SW R59 $zero 0x2                                ;; [95, 236, 0, 2]
0x00000038 SW R59 $zero 0x3                                ;; [95, 236, 0, 3]
0x0000003c MCPI R59 R17 0x10                               ;; [96, 237, 16, 16]
0x00000040 MCPI $writable R59 0x10                         ;; [96, 67, 176, 16]
0x00000044 LW R17 $writable 0x1                            ;; [93, 69, 0, 1]
0x00000048 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x0000004c RETD $writable R17                              ;; [37, 65, 16, 0]
0x00000050 PSHL 0xf                                        ;; [149, 0, 0, 15]
0x00000054 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000058 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000005c CFEI 0xc20a8                                    ;; [145, 12, 32, 168]
0x00000060 MOVE R18 R62                                    ;; [26, 75, 224, 0]
0x00000064 MOVI $writable 0x102b5                          ;; [114, 65, 2, 181]
0x00000068 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000006c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000070 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000074 JAL R62 $pc 0x103                               ;; [153, 248, 49, 3]
0x00000078 MOVI $writable 0x815a                           ;; [114, 64, 129, 90]
0x0000007c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000080 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000084 MCPI $writable R61 0x5                          ;; [96, 67, 208, 5]
0x00000088 MCPI R59 $writable 0x5                          ;; [96, 237, 0, 5]
0x0000008c MOVI $writable 0x102b6                          ;; [114, 65, 2, 182]
0x00000090 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000094 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000098 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000009c JAL R62 $pc 0x107                               ;; [153, 248, 49, 7]
0x000000a0 MOVI $writable 0x815b                           ;; [114, 64, 129, 91]
0x000000a4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000a8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000ac MCPI $writable R61 0x28                         ;; [96, 67, 208, 40]
0x000000b0 ADDI R17 R59 0x8                                ;; [80, 71, 176, 8]
0x000000b4 MCPI R17 $writable 0x28                         ;; [96, 69, 0, 40]
0x000000b8 MOVI $writable 0x102bb                          ;; [114, 65, 2, 187]
0x000000bc MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000c0 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000c4 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000000c8 JAL R62 $pc 0x10a                               ;; [153, 248, 49, 10]
0x000000cc MOVI $writable 0x8160                           ;; [114, 64, 129, 96]
0x000000d0 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000d4 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000d8 MCPI $writable R61 0x28                         ;; [96, 67, 208, 40]
0x000000dc ADDI R17 R59 0x30                               ;; [80, 71, 176, 48]
0x000000e0 MCPI R17 $writable 0x28                         ;; [96, 69, 0, 40]
0x000000e4 MOVI $writable 0x18393                          ;; [114, 65, 131, 147]
0x000000e8 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000000ec ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000000f0 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000000f4 JAL R62 $pc 0x10d                               ;; [153, 248, 49, 13]
0x000000f8 MOVI $writable 0x10238                          ;; [114, 65, 2, 56]
0x000000fc MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000100 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000104 MCPI $writable R61 0x28                         ;; [96, 67, 208, 40]
0x00000108 ADDI R17 R59 0x58                               ;; [80, 71, 176, 88]
0x0000010c MCPI R17 $writable 0x28                         ;; [96, 69, 0, 40]
0x00000110 MOVI $writable 0x18398                          ;; [114, 65, 131, 152]
0x00000114 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000118 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x0000011c MOVE R58 $writable                              ;; [26, 233, 0, 0]
<<<<<<< HEAD
<<<<<<< HEAD
0x00000120 JAL R62 $pc 0xa5                                ;; [153, 248, 48, 165]
0x00000124 ADDI $writable R59 0x58                         ;; [80, 67, 176, 88]
0x00000128 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000012c JAL R62 $pc 0xb0                                ;; [153, 248, 48, 176]
0x00000130 ADDI $writable R59 0x378                        ;; [80, 67, 179, 120]
0x00000134 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000138 JAL R62 $pc 0xbb                                ;; [153, 248, 48, 187]
0x0000013c ADDI $writable R59 0x698                        ;; [80, 67, 182, 152]
0x00000140 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000144 JAL R62 $pc 0xc6                                ;; [153, 248, 48, 198]
0x00000148 ADDI $writable R59 0x6b8                        ;; [80, 67, 182, 184]
0x0000014c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000150 JAL R62 $pc 0xd1                                ;; [153, 248, 48, 209]
0x00000154 ADDI $writable R59 0x6c0                        ;; [80, 67, 182, 192]
0x00000158 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000015c JAL R62 $pc 0xed                                ;; [153, 248, 48, 237]
0x00000160 ADDI $writable R59 0x6e0                        ;; [80, 67, 182, 224]
0x00000164 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000168 JAL R62 $pc 0xff                                ;; [153, 248, 48, 255]
0x0000016c MOVE R61 $zero                                  ;; [26, 244, 0, 0]
0x00000170 CFSI 0x40ad0                                    ;; [146, 4, 10, 208]
0x00000174 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000178 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000017c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000180 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000184 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000188 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000018c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000190 CFEI 0x8                                        ;; [145, 0, 0, 8]
0x00000194 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000198 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000019c MCLI R59 0x5                                    ;; [112, 236, 0, 5]
0x000001a0 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000001a4 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000001a8 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000001ac MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000001b0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000001b4 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000001b8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000001bc PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000001c0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000001c4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000001c8 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x000001cc MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000001d0 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000001d4 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x000001d8 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x000001dc MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000001e0 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x000001e4 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000001e8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000001ec POPL 0x3                                        ;; [151, 0, 0, 3]
0x000001f0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000001f4 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000001f8 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000001fc MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000200 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000204 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000208 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000020c MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x00000210 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x00000214 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000218 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x0000021c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000220 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000224 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000228 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000022c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000230 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000234 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000238 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x0000023c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000240 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000244 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x00000248 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x0000024c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000250 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x00000254 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000258 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000025c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000260 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000264 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000268 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000026c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000270 CFEI 0xa0                                       ;; [145, 0, 0, 160]
0x00000274 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000278 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000027c MCLI R59 0xa0                                   ;; [112, 236, 0, 160]
0x00000280 MCPI $writable R59 0xa0                         ;; [96, 67, 176, 160]
0x00000284 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000288 CFSI 0xa0                                       ;; [146, 0, 0, 160]
0x0000028c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000290 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000294 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000298 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000029c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000002a0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000002a4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000002a8 CFEI 0xa0                                       ;; [145, 0, 0, 160]
0x000002ac MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000002b0 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000002b4 MCLI R59 0xa0                                   ;; [112, 236, 0, 160]
0x000002b8 MCPI $writable R59 0xa0                         ;; [96, 67, 176, 160]
0x000002bc MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000002c0 CFSI 0xa0                                       ;; [146, 0, 0, 160]
0x000002c4 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000002c8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000002cc POPL 0x3                                        ;; [151, 0, 0, 3]
0x000002d0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000002d4 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000002d8 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000002dc MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000002e0 CFEI 0x8                                        ;; [145, 0, 0, 8]
0x000002e4 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000002e8 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000002ec MCLI R59 0x5                                    ;; [112, 236, 0, 5]
0x000002f0 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000002f4 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000002f8 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000002fc MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000300 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000304 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000308 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000030c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000310 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000314 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000318 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x0000031c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000320 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000324 MCLI R59 0x19                                   ;; [112, 236, 0, 25]
0x00000328 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x0000032c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000330 CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000334 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000338 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000033c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000340 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000344 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000348 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000034c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000350 CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x00000354 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000358 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000035c MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x00000360 MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x00000364 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000368 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x0000036c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000370 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000374 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000378 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000037c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000380 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000384 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000388 CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x0000038c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000390 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000394 MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x00000398 MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x0000039c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000003a0 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x000003a4 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000003a8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000003ac POPL 0x3                                        ;; [151, 0, 0, 3]
0x000003b0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000003b4 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000003b8 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000003bc MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000003c0 CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x000003c4 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000003c8 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000003cc MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x000003d0 MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x000003d4 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000003d8 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x000003dc MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000003e0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000003e4 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000003e8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000003ec PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000003f0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000003f4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000003f8 CFEI 0x320                                      ;; [145, 0, 3, 32]
0x000003fc MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000400 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000404 MCLI R59 0x320                                  ;; [112, 236, 3, 32]
0x00000408 MCPI $writable R59 0x320                        ;; [96, 67, 179, 32]
0x0000040c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000410 CFSI 0x320                                      ;; [146, 0, 3, 32]
0x00000414 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000418 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000041c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000420 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000424 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000428 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000042c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000430 CFEI 0x320                                      ;; [145, 0, 3, 32]
0x00000434 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000438 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000043c MCLI R59 0x320                                  ;; [112, 236, 3, 32]
0x00000440 MCPI $writable R59 0x320                        ;; [96, 67, 179, 32]
0x00000444 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000448 CFSI 0x320                                      ;; [146, 0, 3, 32]
0x0000044c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000450 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000454 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000458 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000045c PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000460 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000464 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000468 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x0000046c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000470 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000474 MCLI R59 0x19                                   ;; [112, 236, 0, 25]
0x00000478 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x0000047c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000480 CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000484 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000488 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000048c POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000490 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000494 PSHL 0x7                                        ;; [149, 0, 0, 7]
0x00000498 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000049c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000004a0 CFEI 0x8                                        ;; [145, 0, 0, 8]
0x000004a4 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000004a8 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000004ac MUL R18 $zero $one                              ;; [27, 72, 0, 64]
0x000004b0 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000004b4 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000004b8 MUL R18 $one $one                               ;; [27, 72, 16, 64]
0x000004bc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000004c0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000004c4 MOVI R18 0x2                                    ;; [114, 72, 0, 2]
0x000004c8 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000004cc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000004d0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000004d4 MOVI R18 0x3                                    ;; [114, 72, 0, 3]
0x000004d8 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000004dc ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000004e0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000004e4 MOVI R18 0x4                                    ;; [114, 72, 0, 4]
0x000004e8 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000004ec ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000004f0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000004f4 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000004f8 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000004fc CFSI 0x8                                        ;; [146, 0, 0, 8]
0x00000500 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000504 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000508 POPL 0x7                                        ;; [151, 0, 0, 7]
0x0000050c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000510 PSHL 0xf                                        ;; [149, 0, 0, 15]
0x00000514 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000518 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000051c CFEI 0x20                                       ;; [145, 0, 0, 32]
0x00000520 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000524 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000528 MOVE R19 $zero                                  ;; [26, 76, 0, 0]
0x0000052c MUL R18 R19 $one                                ;; [27, 73, 48, 64]
0x00000530 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x00000534 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x00000538 ADD R19 R19 $one                                ;; [16, 77, 48, 64]
0x0000053c MOVI R18 0x19                                   ;; [114, 72, 0, 25]
0x00000540 LT R18 R19 R18                                  ;; [22, 73, 52, 128]
0x00000544 JNZB R18 $zero 0x5                              ;; [119, 72, 0, 5]
0x00000548 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x0000054c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000550 CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000554 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000558 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x0000055c POPL 0xf                                        ;; [151, 0, 0, 15]
0x00000560 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
<<<<<<< HEAD
0x00000564 PSHL 0x3                                        ;; [149, 0, 0, 3]
=======
<<<<<<< HEAD
<<<<<<< HEAD
0x00000564 PSHL 0x3                                        ;; [149, 0, 0, 3]
=======
0x00000564 PSHL 0x7                                        ;; [149, 0, 0, 7]
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
=======
0x00000564 PSHL 0x3                                        ;; [149, 0, 0, 3]
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
0x00000568 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x0000056c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000570 CFEI 0x40008                                    ;; [145, 4, 0, 8]
0x00000574 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000578 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x0000057c LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000580 MCL R59 R60                                     ;; [39, 239, 192, 0]
<<<<<<< HEAD
0x00000584 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000588 MCP $writable R59 R60                           ;; [40, 67, 191, 0]
=======
<<<<<<< HEAD
<<<<<<< HEAD
0x00000584 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000588 MCP $writable R59 R60                           ;; [40, 67, 191, 0]
=======
0x00000584 MOVI R18 0x1                                    ;; [114, 72, 0, 1]
0x00000588 MCP $writable R59 R18                           ;; [40, 67, 180, 128]
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
=======
0x00000584 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000588 MCP $writable R59 R60                           ;; [40, 67, 191, 0]
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
0x0000058c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000590 CFSI 0x40008                                    ;; [146, 4, 0, 8]
0x00000594 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000598 POPH 0x80000                                    ;; [152, 8, 0, 0]
<<<<<<< HEAD
0x0000059c POPL 0x3                                        ;; [151, 0, 0, 3]
=======
<<<<<<< HEAD
<<<<<<< HEAD
0x0000059c POPL 0x3                                        ;; [151, 0, 0, 3]
=======
0x0000059c POPL 0x7                                        ;; [151, 0, 0, 7]
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
=======
0x0000059c POPL 0x3                                        ;; [151, 0, 0, 3]
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
0x000005a0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000005a4 NOOP                                            ;; [71, 0, 0, 0]
=======
=======
>>>>>>> 586981b65 (update tests)
0x00000120 JAL R62 $pc 0x110                               ;; [153, 248, 49, 16]
0x00000124 MOVI $writable 0x1023d                          ;; [114, 65, 2, 61]
0x00000128 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000012c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000130 MCPI $writable R61 0xa0                         ;; [96, 67, 208, 160]
0x00000134 ADDI R17 R59 0x80                               ;; [80, 71, 176, 128]
0x00000138 MCPI R17 $writable 0xa0                         ;; [96, 69, 0, 160]
0x0000013c MOVI $writable 0x183ac                          ;; [114, 65, 131, 172]
0x00000140 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000144 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000148 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000014c JAL R62 $pc 0x113                               ;; [153, 248, 49, 19]
0x00000150 MOVI $writable 0x10251                          ;; [114, 65, 2, 81]
0x00000154 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000158 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x0000015c MCPI $writable R61 0xa0                         ;; [96, 67, 208, 160]
0x00000160 ADDI R17 R59 0x120                              ;; [80, 71, 177, 32]
0x00000164 MCPI R17 $writable 0xa0                         ;; [96, 69, 0, 160]
0x00000168 MOVI $writable 0x183c0                          ;; [114, 65, 131, 192]
0x0000016c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000170 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000174 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000178 JAL R62 $pc 0x116                               ;; [153, 248, 49, 22]
0x0000017c MOVI $writable 0x10265                          ;; [114, 65, 2, 101]
0x00000180 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000184 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000188 MCPI $writable R61 0x5                          ;; [96, 67, 208, 5]
0x0000018c ADDI R17 R59 0x1c0                              ;; [80, 71, 177, 192]
0x00000190 MCPI R17 $writable 0x5                          ;; [96, 69, 0, 5]
0x00000194 MOVI $writable 0x183c1                          ;; [114, 65, 131, 193]
0x00000198 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000019c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001a0 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000001a4 JAL R62 $pc 0x119                               ;; [153, 248, 49, 25]
0x000001a8 MOVI $writable 0x10266                          ;; [114, 65, 2, 102]
0x000001ac MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001b0 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001b4 MCPI $writable R61 0x19                         ;; [96, 67, 208, 25]
0x000001b8 ADDI R17 R59 0x1c8                              ;; [80, 71, 177, 200]
0x000001bc MCPI R17 $writable 0x19                         ;; [96, 69, 0, 25]
0x000001c0 MOVI $writable 0x183c5                          ;; [114, 65, 131, 197]
0x000001c4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001c8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001cc MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000001d0 JAL R62 $pc 0x11c                               ;; [153, 248, 49, 28]
0x000001d4 MOVI $writable 0x1026a                          ;; [114, 65, 2, 106]
0x000001d8 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001dc ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001e0 MCPI $writable R61 0xc8                         ;; [96, 67, 208, 200]
0x000001e4 ADDI R17 R59 0x1e8                              ;; [80, 71, 177, 232]
0x000001e8 MCPI R17 $writable 0xc8                         ;; [96, 69, 0, 200]
0x000001ec MOVI $writable 0x183de                          ;; [114, 65, 131, 222]
0x000001f0 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000001f4 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000001f8 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000001fc JAL R62 $pc 0x11f                               ;; [153, 248, 49, 31]
0x00000200 MOVI $writable 0x10283                          ;; [114, 65, 2, 131]
0x00000204 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000208 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x0000020c MCPI $writable R61 0xc8                         ;; [96, 67, 208, 200]
0x00000210 ADDI R17 R59 0x2b0                              ;; [80, 71, 178, 176]
0x00000214 MCPI R17 $writable 0xc8                         ;; [96, 69, 0, 200]
0x00000218 MOVI $writable 0x183f7                          ;; [114, 65, 131, 247]
0x0000021c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000220 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000224 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000228 JAL R62 $pc 0x122                               ;; [153, 248, 49, 34]
0x0000022c MOVI $writable 0x1029c                          ;; [114, 65, 2, 156]
0x00000230 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000234 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000238 MCPI $writable R61 0xc8                         ;; [96, 67, 208, 200]
0x0000023c ADDI R17 R59 0x378                              ;; [80, 71, 179, 120]
0x00000240 MCPI R17 $writable 0xc8                         ;; [96, 69, 0, 200]
0x00000244 MOVI $writable 0x102c0                          ;; [114, 65, 2, 192]
0x00000248 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000024c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000250 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000254 JAL R62 $pc 0x125                               ;; [153, 248, 49, 37]
0x00000258 MOVI $writable 0x8165                           ;; [114, 64, 129, 101]
0x0000025c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000260 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000264 MCPI $writable R61 0x320                        ;; [96, 67, 211, 32]
0x00000268 ADDI R17 R59 0x440                              ;; [80, 71, 180, 64]
0x0000026c MCPI R17 $writable 0x320                        ;; [96, 69, 3, 32]
0x00000270 MOVI $writable 0x10324                          ;; [114, 65, 3, 36]
0x00000274 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000278 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x0000027c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000280 JAL R62 $pc 0x128                               ;; [153, 248, 49, 40]
0x00000284 MOVI $writable 0x81c9                           ;; [114, 64, 129, 201]
0x00000288 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000028c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000290 MCPI $writable R61 0x320                        ;; [96, 67, 211, 32]
0x00000294 ADDI R17 R59 0x760                              ;; [80, 71, 183, 96]
0x00000298 MCPI R17 $writable 0x320                        ;; [96, 69, 3, 32]
0x0000029c MOVI $writable 0x10388                          ;; [114, 65, 3, 136]
0x000002a0 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000002a4 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000002a8 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000002ac JAL R62 $pc 0x12b                               ;; [153, 248, 49, 43]
0x000002b0 MOVI $writable 0x822d                           ;; [114, 64, 130, 45]
0x000002b4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000002b8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000002bc MCPI $writable R61 0x19                         ;; [96, 67, 208, 25]
0x000002c0 ADDI R17 R59 0xa80                              ;; [80, 71, 186, 128]
0x000002c4 MCPI R17 $writable 0x19                         ;; [96, 69, 0, 25]
0x000002c8 MOVI $writable 0x1038c                          ;; [114, 65, 3, 140]
0x000002cc MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000002d0 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000002d4 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000002d8 JAL R62 $pc 0x12e                               ;; [153, 248, 49, 46]
0x000002dc MOVI $writable 0x8231                           ;; [114, 64, 130, 49]
0x000002e0 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000002e4 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000002e8 MCPI $writable R61 0x5                          ;; [96, 67, 208, 5]
0x000002ec ADDI R17 R59 0xaa0                              ;; [80, 71, 186, 160]
0x000002f0 MCPI R17 $writable 0x5                          ;; [96, 69, 0, 5]
0x000002f4 MOVI $writable 0x1038d                          ;; [114, 65, 3, 141]
0x000002f8 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000002fc ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000300 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000304 JAL R62 $pc 0x142                               ;; [153, 248, 49, 66]
0x00000308 MOVI $writable 0x8232                           ;; [114, 64, 130, 50]
0x0000030c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000310 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000314 MCPI $writable R61 0x19                         ;; [96, 67, 208, 25]
0x00000318 ADDI R17 R59 0xaa8                              ;; [80, 71, 186, 168]
0x0000031c MCPI R17 $writable 0x19                         ;; [96, 69, 0, 25]
0x00000320 MOVI $writable 0x10391                          ;; [114, 65, 3, 145]
0x00000324 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000328 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x0000032c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000330 JAL R62 $pc 0x14c                               ;; [153, 248, 49, 76]
0x00000334 MOVE $writable R61                              ;; [26, 67, 208, 0]
0x00000338 MOVI R17 0x8236                                 ;; [114, 68, 130, 54]
0x0000033c MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x00000340 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x00000344 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000348 MCP R17 $writable R60                           ;; [40, 69, 15, 0]
0x0000034c ADDI $writable R59 0xac8                        ;; [80, 67, 186, 200]
0x00000350 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000354 MCP $writable R17 R60                           ;; [40, 65, 31, 0]
0x00000358 MOVI $writable 0x18392                          ;; [114, 65, 131, 146]
0x0000035c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000360 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000364 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000368 JAL R62 $pc 0x14e                               ;; [153, 248, 49, 78]
0x0000036c MOVI $writable 0x10237                          ;; [114, 65, 2, 55]
0x00000370 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000374 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000378 MCPI $writable R61 0x1                          ;; [96, 67, 208, 1]
0x0000037c MOVI R17 0x18410                                ;; [114, 69, 132, 16]
0x00000380 MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x00000384 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x00000388 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x0000038c MOVI $writable 0x18410                          ;; [114, 65, 132, 16]
0x00000390 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000394 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000398 MUL R17 $zero $one                              ;; [27, 68, 0, 64]
0x0000039c ADD R17 $writable R17                           ;; [16, 69, 4, 64]
0x000003a0 MOVI $writable 0x18413                          ;; [114, 65, 132, 19]
0x000003a4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000003a8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000003ac MCPI $writable R17 0x1                          ;; [96, 65, 16, 1]
0x000003b0 MOVI $writable 0x18414                          ;; [114, 65, 132, 20]
0x000003b4 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000003b8 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000003bc MOVI R19 0xff                                   ;; [114, 76, 0, 255]
0x000003c0 SB $writable R19 0x0                            ;; [94, 65, 48, 0]
0x000003c4 LB $writable R17 0x0                            ;; [92, 65, 16, 0]
0x000003c8 MOVI R17 0x18414                                ;; [114, 69, 132, 20]
0x000003cc MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x000003d0 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x000003d4 LB R17 R17 0x0                                  ;; [92, 69, 16, 0]
0x000003d8 EQ $writable $writable R17                      ;; [19, 65, 4, 64]
0x000003dc MOVI R17 0x18412                                ;; [114, 69, 132, 18]
0x000003e0 MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x000003e4 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x000003e8 SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x000003ec MOVI $writable 0x18412                          ;; [114, 65, 132, 18]
0x000003f0 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x000003f4 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x000003f8 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x000003fc EQ $writable $writable $zero                    ;; [19, 65, 0, 0]
0x00000400 JNZF $writable $zero 0x2                        ;; [118, 64, 0, 2]
0x00000404 MOVE R61 $zero                                  ;; [26, 244, 0, 0]
0x00000408 JMPF $zero 0x18                                 ;; [116, 0, 0, 24]
0x0000040c MOVI $writable 0x18413                          ;; [114, 65, 132, 19]
0x00000410 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000414 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000418 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x0000041c MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000420 JAL R62 $pc 0x1f9                               ;; [153, 248, 49, 249]
0x00000424 MOVI $writable 0x18414                          ;; [114, 65, 132, 20]
0x00000428 MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x0000042c ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000430 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000434 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x00000438 JAL R62 $pc 0x1f3                               ;; [153, 248, 49, 243]
0x0000043c MOVI $writable 0x8                              ;; [114, 64, 0, 8]
0x00000440 ADD $writable $writable R63                     ;; [16, 65, 15, 192]
0x00000444 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000448 MOVI R17 0x18411                                ;; [114, 69, 132, 17]
0x0000044c MULI R17 R17 0x8                                ;; [85, 69, 16, 8]
0x00000450 ADD R17 R59 R17                                 ;; [16, 71, 180, 64]
0x00000454 SW R17 $writable 0x0                            ;; [95, 69, 0, 0]
0x00000458 MOVI $writable 0x18411                          ;; [114, 65, 132, 17]
0x0000045c MULI $writable $writable 0x8                    ;; [85, 65, 0, 8]
0x00000460 ADD $writable R59 $writable                     ;; [16, 67, 180, 0]
0x00000464 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000468 RVRT $writable                                  ;; [54, 64, 0, 0]
0x0000046c CFSI 0xc20a8                                    ;; [146, 12, 32, 168]
0x00000470 MOVE R62 R18                                    ;; [26, 249, 32, 0]
0x00000474 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000478 POPL 0xf                                        ;; [151, 0, 0, 15]
0x0000047c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000480 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000484 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000488 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000048c CFEI 0x8                                        ;; [145, 0, 0, 8]
0x00000490 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000494 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000498 MCLI R59 0x5                                    ;; [112, 236, 0, 5]
0x0000049c MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000004a0 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000004a4 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000004a8 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000004ac POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000004b0 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000004b4 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000004b8 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000004bc PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000004c0 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000004c4 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x000004c8 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000004cc MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000004d0 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x000004d4 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x000004d8 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000004dc CFSI 0x28                                       ;; [146, 0, 0, 40]
0x000004e0 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000004e4 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000004e8 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000004ec JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000004f0 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000004f4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000004f8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000004fc CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000500 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000504 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000508 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x0000050c MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x00000510 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000514 CFSI 0x28                                       ;; [146, 0, 0, 40]
0x00000518 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000051c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000520 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000524 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000528 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000052c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000530 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000534 CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000538 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000053c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000540 MCLI R59 0x28                                   ;; [112, 236, 0, 40]
0x00000544 MCPI $writable R59 0x28                         ;; [96, 67, 176, 40]
0x00000548 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000054c CFSI 0x28                                       ;; [146, 0, 0, 40]
0x00000550 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000554 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000558 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000055c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000560 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000564 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000568 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000056c CFEI 0xa0                                       ;; [145, 0, 0, 160]
0x00000570 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000574 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000578 MCLI R59 0xa0                                   ;; [112, 236, 0, 160]
0x0000057c MCPI $writable R59 0xa0                         ;; [96, 67, 176, 160]
0x00000580 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000584 CFSI 0xa0                                       ;; [146, 0, 0, 160]
0x00000588 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000058c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000590 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000594 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000598 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000059c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000005a0 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000005a4 CFEI 0xa0                                       ;; [145, 0, 0, 160]
0x000005a8 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000005ac MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000005b0 MCLI R59 0xa0                                   ;; [112, 236, 0, 160]
0x000005b4 MCPI $writable R59 0xa0                         ;; [96, 67, 176, 160]
0x000005b8 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000005bc CFSI 0xa0                                       ;; [146, 0, 0, 160]
0x000005c0 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000005c4 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000005c8 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000005cc JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000005d0 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000005d4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000005d8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000005dc CFEI 0x8                                        ;; [145, 0, 0, 8]
0x000005e0 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000005e4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000005e8 MCLI R59 0x5                                    ;; [112, 236, 0, 5]
0x000005ec MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000005f0 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000005f4 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000005f8 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000005fc POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000600 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000604 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000608 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000060c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000610 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000614 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x00000618 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000061c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000620 MCLI R59 0x19                                   ;; [112, 236, 0, 25]
0x00000624 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x00000628 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000062c CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000630 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000634 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000638 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000063c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000640 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000644 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000648 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000064c CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x00000650 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000654 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000658 MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x0000065c MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x00000660 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000664 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x00000668 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000066c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000670 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000674 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000678 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000067c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000680 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000684 CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x00000688 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000068c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000690 MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x00000694 MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x00000698 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000069c CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x000006a0 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000006a4 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000006a8 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000006ac JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000006b0 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000006b4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000006b8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000006bc CFEI 0xc8                                       ;; [145, 0, 0, 200]
0x000006c0 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000006c4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000006c8 MCLI R59 0xc8                                   ;; [112, 236, 0, 200]
0x000006cc MCPI $writable R59 0xc8                         ;; [96, 67, 176, 200]
0x000006d0 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000006d4 CFSI 0xc8                                       ;; [146, 0, 0, 200]
0x000006d8 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000006dc POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000006e0 POPL 0x3                                        ;; [151, 0, 0, 3]
0x000006e4 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000006e8 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x000006ec PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000006f0 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000006f4 CFEI 0x320                                      ;; [145, 0, 3, 32]
0x000006f8 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000006fc MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000700 MCLI R59 0x320                                  ;; [112, 236, 3, 32]
0x00000704 MCPI $writable R59 0x320                        ;; [96, 67, 179, 32]
0x00000708 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000070c CFSI 0x320                                      ;; [146, 0, 3, 32]
0x00000710 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000714 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000718 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000071c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000720 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000724 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000728 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000072c CFEI 0x320                                      ;; [145, 0, 3, 32]
0x00000730 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000734 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000738 MCLI R59 0x320                                  ;; [112, 236, 3, 32]
0x0000073c MCPI $writable R59 0x320                        ;; [96, 67, 179, 32]
0x00000740 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000744 CFSI 0x320                                      ;; [146, 0, 3, 32]
0x00000748 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x0000074c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000750 POPL 0x3                                        ;; [151, 0, 0, 3]
0x00000754 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000758 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x0000075c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000760 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000764 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x00000768 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000076c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000770 MCLI R59 0x19                                   ;; [112, 236, 0, 25]
0x00000774 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x00000778 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000077c CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000780 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000784 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000788 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000078c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000790 PSHL 0x7                                        ;; [149, 0, 0, 7]
0x00000794 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000798 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000079c CFEI 0x8                                        ;; [145, 0, 0, 8]
0x000007a0 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000007a4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000007a8 MUL R18 $zero $one                              ;; [27, 72, 0, 64]
0x000007ac ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000007b0 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000007b4 MUL R18 $one $one                               ;; [27, 72, 16, 64]
0x000007b8 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000007bc SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000007c0 MOVI R18 0x2                                    ;; [114, 72, 0, 2]
0x000007c4 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000007c8 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000007cc SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000007d0 MOVI R18 0x3                                    ;; [114, 72, 0, 3]
0x000007d4 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000007d8 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000007dc SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000007e0 MOVI R18 0x4                                    ;; [114, 72, 0, 4]
0x000007e4 MUL R18 R18 $one                                ;; [27, 73, 32, 64]
0x000007e8 ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x000007ec SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x000007f0 MCPI $writable R59 0x5                          ;; [96, 67, 176, 5]
0x000007f4 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000007f8 CFSI 0x8                                        ;; [146, 0, 0, 8]
0x000007fc MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000800 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000804 POPL 0x7                                        ;; [151, 0, 0, 7]
0x00000808 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000080c PSHL 0xf                                        ;; [149, 0, 0, 15]
0x00000810 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000814 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000818 CFEI 0x20                                       ;; [145, 0, 0, 32]
0x0000081c MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000820 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000824 MOVE R19 $zero                                  ;; [26, 76, 0, 0]
0x00000828 MUL R18 R19 $one                                ;; [27, 73, 48, 64]
0x0000082c ADD R18 R59 R18                                 ;; [16, 75, 180, 128]
0x00000830 SB R18 $one 0x0                                 ;; [94, 72, 16, 0]
0x00000834 ADD R19 R19 $one                                ;; [16, 77, 48, 64]
0x00000838 MOVI R18 0x19                                   ;; [114, 72, 0, 25]
0x0000083c LT R18 R19 R18                                  ;; [22, 73, 52, 128]
0x00000840 JNZB R18 $zero 0x5                              ;; [119, 72, 0, 5]
0x00000844 MCPI $writable R59 0x19                         ;; [96, 67, 176, 25]
0x00000848 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000084c CFSI 0x20                                       ;; [146, 0, 0, 32]
0x00000850 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000854 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000858 POPL 0xf                                        ;; [151, 0, 0, 15]
0x0000085c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000860 PSHL 0x3                                        ;; [149, 0, 0, 3]
0x00000864 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000868 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x0000086c CFEI 0x40008                                    ;; [145, 4, 0, 8]
0x00000870 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x00000874 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000878 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x0000087c MCL R59 R60                                     ;; [39, 239, 192, 0]
0x00000880 LW R60 R63 0x0                                  ;; [93, 243, 240, 0]
0x00000884 MCP $writable R59 R60                           ;; [40, 67, 191, 0]
0x00000888 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000088c CFSI 0x40008                                    ;; [146, 4, 0, 8]
0x00000890 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000894 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000898 POPL 0x3                                        ;; [151, 0, 0, 3]
0x0000089c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000008a0 PSHL 0x1f                                       ;; [149, 0, 0, 31]
0x000008a4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000008a8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000008ac CFEI 0x60                                       ;; [145, 0, 0, 96]
0x000008b0 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000008b4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000008b8 ADDI R18 R59 0x18                               ;; [80, 75, 176, 24]
0x000008bc MUL R19 $zero $one                              ;; [27, 76, 0, 64]
0x000008c0 ADD R19 R18 R19                                 ;; [16, 77, 36, 192]
0x000008c4 MOVI R20 0xff                                   ;; [114, 80, 0, 255]
0x000008c8 SB R19 R20 0x0                                  ;; [94, 77, 64, 0]
0x000008cc ADDI R19 R59 0x38                               ;; [80, 79, 176, 56]
0x000008d0 MCPI R19 R18 0x1                                ;; [96, 77, 32, 1]
0x000008d4 ADDI R18 R59 0x20                               ;; [80, 75, 176, 32]
0x000008d8 MOVE R58 R19                                    ;; [26, 233, 48, 0]
0x000008dc MOVE R57 R18                                    ;; [26, 229, 32, 0]
0x000008e0 JAL R62 $pc 0x13                                ;; [153, 248, 48, 19]
0x000008e4 MCPI R59 R61 0x10                               ;; [96, 239, 208, 16]
0x000008e8 ADDI R18 R59 0x50                               ;; [80, 75, 176, 80]
0x000008ec MCPI R18 R59 0x10                               ;; [96, 75, 176, 16]
0x000008f0 ADDI R18 R59 0x40                               ;; [80, 75, 176, 64]
0x000008f4 MCPI R18 R59 0x10                               ;; [96, 75, 176, 16]
0x000008f8 ADDI R19 R59 0x30                               ;; [80, 79, 176, 48]
0x000008fc MOVE R58 R18                                    ;; [26, 233, 32, 0]
0x00000900 MOVE R57 R19                                    ;; [26, 229, 48, 0]
0x00000904 JAL R62 $pc 0x2c                                ;; [153, 248, 48, 44]
0x00000908 ADDI R18 R59 0x10                               ;; [80, 75, 176, 16]
0x0000090c MCPI R18 R61 0x1                                ;; [96, 75, 208, 1]
0x00000910 MCPI $writable R18 0x1                          ;; [96, 65, 32, 1]
0x00000914 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x00000918 CFSI 0x60                                       ;; [146, 0, 0, 96]
0x0000091c MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000920 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000924 POPL 0x1f                                       ;; [151, 0, 0, 31]
0x00000928 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000092c PSHL 0x1f                                       ;; [149, 0, 0, 31]
0x00000930 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000934 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000938 CFEI 0x70                                       ;; [145, 0, 0, 112]
0x0000093c MOVE $writable R57                              ;; [26, 67, 144, 0]
0x00000940 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000944 ADDI R18 R59 0x40                               ;; [80, 75, 176, 64]
0x00000948 MCPI R18 R58 0x1                                ;; [96, 75, 160, 1]
0x0000094c SW R59 $one 0x9                                 ;; [95, 236, 16, 9]
0x00000950 ADDI R18 R59 0x40                               ;; [80, 75, 176, 64]
0x00000954 SW R59 R18 0xd                                  ;; [95, 237, 32, 13]
0x00000958 ADDI R18 R59 0x68                               ;; [80, 75, 176, 104]
0x0000095c SW R59 $one 0xa                                 ;; [95, 236, 16, 10]
0x00000960 LW R19 R59 0x9                                  ;; [93, 79, 176, 9]
0x00000964 LW R20 R59 0xa                                  ;; [93, 83, 176, 10]
0x00000968 MUL R19 R19 R20                                 ;; [27, 77, 53, 0]
0x0000096c ADDI R20 R59 0x10                               ;; [80, 83, 176, 16]
0x00000970 MCPI R20 R18 0x8                                ;; [96, 81, 32, 8]
0x00000974 SW R59 R19 0x3                                  ;; [95, 237, 48, 3]
0x00000978 ADDI R18 R59 0x58                               ;; [80, 75, 176, 88]
0x0000097c MCPI R18 R20 0x10                               ;; [96, 73, 64, 16]
0x00000980 ADDI R18 R59 0x58                               ;; [80, 75, 176, 88]
0x00000984 MCPI R59 R18 0x10                               ;; [96, 237, 32, 16]
0x00000988 ADDI R18 R59 0x20                               ;; [80, 75, 176, 32]
0x0000098c MCPI R18 R59 0x10                               ;; [96, 75, 176, 16]
0x00000990 ADDI R19 R59 0x30                               ;; [80, 79, 176, 48]
0x00000994 MCPI R19 R18 0x10                               ;; [96, 77, 32, 16]
0x00000998 MCPI $writable R19 0x10                         ;; [96, 65, 48, 16]
0x0000099c MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x000009a0 CFSI 0x70                                       ;; [146, 0, 0, 112]
0x000009a4 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000009a8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000009ac POPL 0x1f                                       ;; [151, 0, 0, 31]
0x000009b0 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000009b4 PSHL 0x1f                                       ;; [149, 0, 0, 31]
0x000009b8 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000009bc MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000009c0 CFEI 0x1a0                                      ;; [145, 0, 1, 160]
0x000009c4 MOVE R20 R57                                    ;; [26, 83, 144, 0]
0x000009c8 MOVE R19 R62                                    ;; [26, 79, 224, 0]
0x000009cc ADDI $writable R59 0xc0                         ;; [80, 67, 176, 192]
0x000009d0 MCPI $writable R58 0x10                         ;; [96, 67, 160, 16]
0x000009d4 ADDI $writable R59 0xc0                         ;; [80, 67, 176, 192]
0x000009d8 ADDI R17 R59 0x108                              ;; [80, 71, 177, 8]
0x000009dc MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x000009e0 ADDI $writable R59 0x108                        ;; [80, 67, 177, 8]
0x000009e4 ADDI R17 R59 0x168                              ;; [80, 71, 177, 104]
0x000009e8 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x000009ec ADDI $writable R59 0x168                        ;; [80, 67, 177, 104]
0x000009f0 ADDI R17 R59 0x8                                ;; [80, 71, 176, 8]
0x000009f4 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x000009f8 ADDI $writable R59 0x60                         ;; [80, 67, 176, 96]
0x000009fc MCPI $writable R17 0x10                         ;; [96, 65, 16, 16]
0x00000a00 ADDI R17 R59 0x28                               ;; [80, 71, 176, 40]
0x00000a04 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000a08 LW $writable R59 0x5                            ;; [93, 67, 176, 5]
0x00000a0c ADDI R17 R59 0xc0                               ;; [80, 71, 176, 192]
0x00000a10 ADDI R18 R59 0x118                              ;; [80, 75, 177, 24]
0x00000a14 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000a18 ADDI R17 R59 0x118                              ;; [80, 71, 177, 24]
0x00000a1c ADDI R18 R59 0x178                              ;; [80, 75, 177, 120]
0x00000a20 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000a24 ADDI R17 R59 0x178                              ;; [80, 71, 177, 120]
0x00000a28 ADDI R18 R59 0x18                               ;; [80, 75, 176, 24]
0x00000a2c MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000a30 ADDI R17 R59 0x70                               ;; [80, 71, 176, 112]
0x00000a34 MCPI R17 R18 0x10                               ;; [96, 69, 32, 16]
0x00000a38 ADDI R18 R59 0x38                               ;; [80, 75, 176, 56]
0x00000a3c MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000a40 ADDI R17 R18 0x8                                ;; [80, 69, 32, 8]
0x00000a44 ADDI R18 R59 0x128                              ;; [80, 75, 177, 40]
0x00000a48 MCPI R18 R17 0x8                                ;; [96, 73, 16, 8]
0x00000a4c SW R59 $one 0x1c                                ;; [95, 236, 16, 28]
0x00000a50 LW R17 R59 0x25                                 ;; [93, 71, 176, 37]
0x00000a54 LW R18 R59 0x1c                                 ;; [93, 75, 176, 28]
0x00000a58 DIV R17 R17 R18                                 ;; [18, 69, 20, 128]
0x00000a5c SW R59 $writable 0x20                           ;; [95, 237, 0, 32]
0x00000a60 SW R59 R17 0x12                                 ;; [95, 237, 16, 18]
0x00000a64 ADDI $writable R59 0x100                        ;; [80, 67, 177, 0]
0x00000a68 ADDI R17 R59 0x48                               ;; [80, 71, 176, 72]
0x00000a6c MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000a70 ADDI $writable R59 0x80                         ;; [80, 67, 176, 128]
0x00000a74 MCPI $writable R17 0x8                          ;; [96, 65, 16, 8]
0x00000a78 ADDI R17 R59 0xa8                               ;; [80, 71, 176, 168]
0x00000a7c MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000a80 ADDI $writable R59 0xa8                         ;; [80, 67, 176, 168]
0x00000a84 SW R59 $writable 0x16                           ;; [95, 237, 0, 22]
0x00000a88 SW R59 $one 0x0                                 ;; [95, 236, 16, 0]
0x00000a8c ADDI $writable R59 0x50                         ;; [80, 67, 176, 80]
0x00000a90 MCLI $writable 0x1                              ;; [112, 64, 0, 1]
0x00000a94 ADDI R17 R59 0x98                               ;; [80, 71, 176, 152]
0x00000a98 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x00000a9c ADDI $writable R59 0x98                         ;; [80, 67, 176, 152]
0x00000aa0 ADDI R17 R59 0x58                               ;; [80, 71, 176, 88]
0x00000aa4 SW R59 $writable 0xb                            ;; [95, 237, 0, 11]
0x00000aa8 ADDI $writable R59 0xa0                         ;; [80, 67, 176, 160]
0x00000aac MCPI $writable R17 0x8                          ;; [96, 65, 16, 8]
0x00000ab0 SW R59 $zero 0x1a                               ;; [95, 236, 0, 26]
0x00000ab4 ADDI $writable R59 0xd0                         ;; [80, 67, 176, 208]
0x00000ab8 ADDI R17 R59 0x148                              ;; [80, 71, 177, 72]
0x00000abc MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000ac0 SW R59 $one 0x1d                                ;; [95, 236, 16, 29]
0x00000ac4 LW $writable R59 0x29                           ;; [93, 67, 176, 41]
0x00000ac8 LW R17 R59 0x1d                                 ;; [93, 71, 176, 29]
0x00000acc LT $writable $writable R17                      ;; [22, 65, 4, 64]
0x00000ad0 JNZF $writable $zero 0x6                        ;; [118, 64, 0, 6]
0x00000ad4 LW $writable R59 0x14                           ;; [93, 67, 176, 20]
0x00000ad8 ADDI R17 R59 0x88                               ;; [80, 71, 176, 136]
0x00000adc MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x00000ae0 MCPI R20 R17 0x1                                ;; [96, 81, 16, 1]
0x00000ae4 MOVE R61 R20                                    ;; [26, 245, 64, 0]
0x00000ae8 JMPF $zero 0x41                                 ;; [116, 0, 0, 65]
0x00000aec LW $writable R59 0x14                           ;; [93, 67, 176, 20]
0x00000af0 LW R17 R59 0x1a                                 ;; [93, 71, 176, 26]
0x00000af4 MUL R17 R17 $one                                ;; [27, 69, 16, 64]
0x00000af8 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x00000afc SW R59 $writable 0x1b                           ;; [95, 237, 0, 27]
0x00000b00 ADDI $writable R59 0xb0                         ;; [80, 67, 176, 176]
0x00000b04 ADDI R17 R59 0x140                              ;; [80, 71, 177, 64]
0x00000b08 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000b0c ADDI $writable R59 0x140                        ;; [80, 67, 177, 64]
0x00000b10 ADDI R17 R59 0xb8                               ;; [80, 71, 176, 184]
0x00000b14 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000b18 ADDI $writable R59 0xb8                         ;; [80, 67, 176, 184]
0x00000b1c ADDI R17 R59 0x130                              ;; [80, 71, 177, 48]
0x00000b20 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000b24 SW R59 $one 0x2c                                ;; [95, 236, 16, 44]
0x00000b28 ADDI $writable R59 0x160                        ;; [80, 67, 177, 96]
0x00000b2c ADDI R17 R59 0x138                              ;; [80, 71, 177, 56]
0x00000b30 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000b34 SW R59 $one 0x1e                                ;; [95, 236, 16, 30]
0x00000b38 LW $writable R59 0x27                           ;; [93, 67, 176, 39]
0x00000b3c LW R17 R59 0x1e                                 ;; [93, 71, 176, 30]
0x00000b40 EQ $writable $writable R17                      ;; [19, 65, 4, 64]
0x00000b44 JNZF $writable $zero 0x12                       ;; [118, 64, 0, 18]
0x00000b48 ADDI $writable R59 0x130                        ;; [80, 67, 177, 48]
0x00000b4c ADDI R17 R59 0x150                              ;; [80, 71, 177, 80]
0x00000b50 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000b54 LW $writable R59 0x2a                           ;; [93, 67, 176, 42]
0x00000b58 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000b5c LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000b60 ADDI R17 R59 0x190                              ;; [80, 71, 177, 144]
0x00000b64 SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x00000b68 LW $writable R59 0x2a                           ;; [93, 67, 176, 42]
0x00000b6c LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000b70 MOVI R17 0x8                                    ;; [114, 68, 0, 8]
0x00000b74 MUL R17 $one R17                                ;; [27, 68, 20, 64]
0x00000b78 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x00000b7c LW R17 R59 0x2a                                 ;; [93, 71, 176, 42]
0x00000b80 SW R17 $writable 0x0                            ;; [95, 69, 0, 0]
0x00000b84 ADDI $writable R59 0x190                        ;; [80, 67, 177, 144]
0x00000b88 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000b8c JMPF $zero 0xd                                  ;; [116, 0, 0, 13]
0x00000b90 LW $writable R59 0x26                           ;; [93, 67, 176, 38]
0x00000b94 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000b98 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000b9c ADDI R17 R59 0x198                              ;; [80, 71, 177, 152]
0x00000ba0 SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x00000ba4 LW $writable R59 0x26                           ;; [93, 67, 176, 38]
0x00000ba8 LW $writable $writable 0x0                      ;; [93, 65, 0, 0]
0x00000bac MUL R17 $one $one                               ;; [27, 68, 16, 64]
0x00000bb0 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x00000bb4 LW R17 R59 0x26                                 ;; [93, 71, 176, 38]
0x00000bb8 SW R17 $writable 0x0                            ;; [95, 69, 0, 0]
0x00000bbc ADDI $writable R59 0x198                        ;; [80, 67, 177, 152]
0x00000bc0 LB $writable $writable 0x0                      ;; [92, 65, 0, 0]
0x00000bc4 LW R17 R59 0x1b                                 ;; [93, 71, 176, 27]
0x00000bc8 SB R17 $writable 0x0                            ;; [94, 69, 0, 0]
0x00000bcc ADDI $writable R59 0xd0                         ;; [80, 67, 176, 208]
0x00000bd0 ADDI R17 R59 0x158                              ;; [80, 71, 177, 88]
0x00000bd4 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000bd8 SW R59 $one 0x1f                                ;; [95, 236, 16, 31]
0x00000bdc LW $writable R59 0x2b                           ;; [93, 67, 176, 43]
0x00000be0 LW R17 R59 0x1f                                 ;; [93, 71, 176, 31]
0x00000be4 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x00000be8 SW R59 $writable 0x1a                           ;; [95, 237, 0, 26]
0x00000bec JMPB $zero 0x4d                                 ;; [117, 0, 0, 77]
0x00000bf0 CFSI 0x1a0                                      ;; [146, 0, 1, 160]
0x00000bf4 MOVE R62 R19                                    ;; [26, 249, 48, 0]
0x00000bf8 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000bfc POPL 0x1f                                       ;; [151, 0, 0, 31]
0x00000c00 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000c04 PSHL 0x3f                                       ;; [149, 0, 0, 63]
0x00000c08 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000c0c MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000c10 CFEI 0x1d0                                      ;; [145, 0, 1, 208]
0x00000c14 MOVE R21 R62                                    ;; [26, 87, 224, 0]
0x00000c18 ADDI $writable R59 0x1c8                        ;; [80, 67, 177, 200]
0x00000c1c SB $writable R58 0x0                            ;; [94, 67, 160, 0]
0x00000c20 ADDI $writable R59 0x1c8                        ;; [80, 67, 177, 200]
0x00000c24 ADDI R17 R59 0x1a0                              ;; [80, 71, 177, 160]
0x00000c28 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x00000c2c ADDI $writable R59 0x1a0                        ;; [80, 67, 177, 160]
0x00000c30 MOVI R17 0x400                                  ;; [114, 68, 4, 0]
0x00000c34 ALOC R17                                        ;; [38, 68, 0, 0]
0x00000c38 ADDI R17 R59 0x70                               ;; [80, 71, 176, 112]
0x00000c3c SW R59 $hp 0xe                                  ;; [95, 236, 112, 14]
0x00000c40 MOVI R18 0x400                                  ;; [114, 72, 4, 0]
0x00000c44 SW R59 R18 0xf                                  ;; [95, 237, 32, 15]
0x00000c48 SW R59 $zero 0x10                               ;; [95, 236, 0, 16]
0x00000c4c MCPI R59 R17 0x18                               ;; [96, 237, 16, 24]
0x00000c50 ADDI R17 R59 0xb8                               ;; [80, 71, 176, 184]
0x00000c54 MCPI R17 R59 0x18                               ;; [96, 71, 176, 24]
0x00000c58 ADDI R18 R59 0x120                              ;; [80, 75, 177, 32]
0x00000c5c MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x00000c60 ADDI R17 R59 0x1a8                              ;; [80, 71, 177, 168]
0x00000c64 MCPI R17 $writable 0x1                          ;; [96, 69, 0, 1]
0x00000c68 ADDI $writable R59 0x188                        ;; [80, 67, 177, 136]
0x00000c6c MCPI $writable R18 0x18                         ;; [96, 65, 32, 24]
0x00000c70 ADDI $writable R59 0x188                        ;; [80, 67, 177, 136]
0x00000c74 ADDI R17 R59 0x18                               ;; [80, 71, 176, 24]
0x00000c78 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000c7c ADDI $writable R59 0x88                         ;; [80, 67, 176, 136]
0x00000c80 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000c84 LW $writable R59 0x11                           ;; [93, 67, 176, 17]
0x00000c88 LW R20 R59 0x12                                 ;; [93, 83, 176, 18]
0x00000c8c LW R17 R59 0x13                                 ;; [93, 71, 176, 19]
0x00000c90 ADDI R18 R59 0x1a8                              ;; [80, 75, 177, 168]
0x00000c94 LB R18 R18 0x0                                  ;; [92, 73, 32, 0]
0x00000c98 ADD R19 R17 $one                                ;; [16, 77, 16, 64]
0x00000c9c GT R19 R19 R20                                  ;; [21, 77, 53, 0]
0x00000ca0 JNZF R19 $zero 0x1                              ;; [118, 76, 0, 1]
0x00000ca4 JMPF $zero 0x6                                  ;; [116, 0, 0, 6]
0x00000ca8 MOVI R19 0x2                                    ;; [114, 76, 0, 2]
0x00000cac MUL R19 R20 R19                                 ;; [27, 77, 68, 192]
0x00000cb0 ADD R20 R19 $one                                ;; [16, 81, 48, 64]
0x00000cb4 ALOC R20                                        ;; [38, 80, 0, 0]
0x00000cb8 MCP $hp $writable R17                           ;; [40, 29, 4, 64]
0x00000cbc MOVE $writable $hp                              ;; [26, 64, 112, 0]
0x00000cc0 ADD R19 $writable R17                           ;; [16, 77, 4, 64]
0x00000cc4 SB R19 R18 0x0                                  ;; [94, 77, 32, 0]
0x00000cc8 ADD R17 R17 $one                                ;; [16, 69, 16, 64]
0x00000ccc ADDI R18 R59 0xd0                               ;; [80, 75, 176, 208]
0x00000cd0 SW R59 $writable 0x1a                           ;; [95, 237, 0, 26]
0x00000cd4 SW R59 R20 0x1b                                 ;; [95, 237, 64, 27]
0x00000cd8 SW R59 R17 0x1c                                 ;; [95, 237, 16, 28]
0x00000cdc ADDI $writable R59 0x30                         ;; [80, 67, 176, 48]
0x00000ce0 MCPI $writable R18 0x18                         ;; [96, 65, 32, 24]
0x00000ce4 ADDI R17 R59 0xf8                               ;; [80, 71, 176, 248]
0x00000ce8 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000cec ADDI $writable R59 0x138                        ;; [80, 67, 177, 56]
0x00000cf0 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000cf4 ADDI R17 R59 0x170                              ;; [80, 71, 177, 112]
0x00000cf8 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000cfc ADDI $writable R59 0x170                        ;; [80, 67, 177, 112]
0x00000d00 ADDI R17 R59 0x1b0                              ;; [80, 71, 177, 176]
0x00000d04 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000d08 ADDI $writable R59 0x1b0                        ;; [80, 67, 177, 176]
0x00000d0c ADDI R17 R59 0x48                               ;; [80, 71, 176, 72]
0x00000d10 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000d14 ADDI $writable R59 0xa0                         ;; [80, 67, 176, 160]
0x00000d18 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000d1c ADDI R17 $writable 0x10                         ;; [80, 69, 0, 16]
0x00000d20 ADDI R18 R59 0xe8                               ;; [80, 75, 176, 232]
0x00000d24 MCPI R18 $writable 0x8                          ;; [96, 73, 0, 8]
0x00000d28 ADDI $writable R18 0x8                          ;; [80, 65, 32, 8]
0x00000d2c MCPI $writable R17 0x8                          ;; [96, 65, 16, 8]
0x00000d30 ADDI $writable R59 0x60                         ;; [80, 67, 176, 96]
0x00000d34 MCPI $writable R18 0x10                         ;; [96, 65, 32, 16]
0x00000d38 ADDI R17 R59 0x150                              ;; [80, 71, 177, 80]
0x00000d3c MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000d40 ADDI $writable R59 0x160                        ;; [80, 67, 177, 96]
0x00000d44 MCPI $writable R17 0x10                         ;; [96, 65, 16, 16]
0x00000d48 ADDI R17 R59 0x110                              ;; [80, 71, 177, 16]
0x00000d4c MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000d50 LW $writable R63 0x2                            ;; [93, 67, 240, 2]
0x00000d54 LW R17 R59 0x22                                 ;; [93, 71, 176, 34]
0x00000d58 LW R18 R59 0x23                                 ;; [93, 75, 176, 35]
0x00000d5c LOGD $zero $writable R17 R18                    ;; [52, 1, 4, 82]
0x00000d60 MOVE R61 $zero                                  ;; [26, 244, 0, 0]
0x00000d64 CFSI 0x1d0                                      ;; [146, 0, 1, 208]
0x00000d68 MOVE R62 R21                                    ;; [26, 249, 80, 0]
0x00000d6c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000d70 POPL 0x3f                                       ;; [151, 0, 0, 63]
0x00000d74 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
.data_section:
0x00000d78 .word i262145, as hex be bytes ([00, 00, 00, 00, 00, 04, 00, 01])
0x00000d80 .word i18446744073709486083, as hex be bytes ([FF, FF, FF, FF, FF, FF, 00, 03])
0x00000d88 .word i14454674236531057292, as hex be bytes ([C8, 99, 51, A2, 4C, 6C, A2, 8C])
;; --- END OF TARGET BYTECODE ---

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:135:24
    |
133 | trait IsZero { fn is_zero(self) -> bool; }
134 | 
135 | impl IsZero for bool { fn is_zero(self) -> bool { self == false }}
    |                        ------------------------------------------ This method is never called.
136 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
137 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:136:22
    |
134 | 
135 | impl IsZero for bool { fn is_zero(self) -> bool { self == false }}
136 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
    |                      -------------------------------------- This method is never called.
137 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
138 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:137:23
    |
135 | impl IsZero for bool { fn is_zero(self) -> bool { self == false }}
136 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
137 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
    |                       -------------------------------------- This method is never called.
138 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
139 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:138:23
    |
136 | impl IsZero for u8 { fn is_zero(self) -> bool { self == 0 }}
137 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
138 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
    |                       -------------------------------------- This method is never called.
139 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
140 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:139:23
    |
137 | impl IsZero for u16 { fn is_zero(self) -> bool { self == 0 }}
138 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
139 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
    |                       -------------------------------------- This method is never called.
140 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
141 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:140:24
    |
138 | impl IsZero for u32 { fn is_zero(self) -> bool { self == 0 }}
139 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
140 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
    |                        ----------------------------------------------------------------------------------------------------------- This method is never called.
141 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
142 | 
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:141:24
    |
139 | impl IsZero for u64 { fn is_zero(self) -> bool { self == 0 }}
140 | impl IsZero for u256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000u256 }}
141 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
    |                        ------------------------------------------------------------------------------------------------------- This method is never called.
142 | 
143 | fn is_all_zero<T, const N: u64>(array: [T; N], n: u64) where T: IsZero {
    |
____

warning
   --> test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat/src/main.sw:143:4
    |
141 | impl IsZero for b256 { fn is_zero(self) -> bool { self == 0x0000000000000000000000000000000000000000000000000000000000000000 }}
142 | 
143 | fn is_all_zero<T, const N: u64>(array: [T; N], n: u64) where T: IsZero {
    |    ----------- This function is never called.
144 |     let mut i = 0;
145 |     while i < n {
    |
____

  Compiled script "array_repeat" with 8 warnings.
    Finished debug [unoptimized + fuel] target(s) [3.472 KB] in ???

> forc test --path test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat --experimental const_generics --verbose
exit status: 0
output:
    Building test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat
   Compiling library std (test/src/e2e_vm_tests/reduced_std_libs/sway-lib-std-assert)
   Compiling script array_repeat (test/src/e2e_vm_tests/test_programs/should_pass/language/array/array_repeat)
    Finished debug [unoptimized + fuel] target(s) [8.672 KB] in ???
    script array_repeat
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      Bytecode size: 6648 bytes (6.648 KB)
<<<<<<< HEAD
      Bytecode hash: 0x556fd20a12eccbbba1405bdda2eb527e6da68804f20c081c92bd630a22877ead
=======
      Bytecode hash: 0x0ae596de91be50b99f5af33b3ffdf03b48086eef74ff481547652feb85078b94
=======
      Bytecode size: 4584 bytes (4.584 KB)
      Bytecode hash: 0xca94e206724f138b65f71ddee439ab8e9d6d290913e703a5019fd11ee5833126
>>>>>>> 03947be32 (mem_clear_val IR instruction)
<<<<<<< HEAD
>>>>>>> a9f6cf6f0 (mem_clear_val IR instruction)
=======
=======
      Bytecode size: 6648 bytes (6.648 KB)
<<<<<<< HEAD
      Bytecode hash: 0xc47b47e3d0075184dad7e1e4b429964a6a07baf01efe58c770f955a94dfb4604
>>>>>>> cd0a63724 (fix problem with sizes bigger than 2^18)
<<<<<<< HEAD
>>>>>>> b97bfcfe7 (fix problem with sizes bigger than 2^18)
=======
=======
      Bytecode hash: 0x0ae596de91be50b99f5af33b3ffdf03b48086eef74ff481547652feb85078b94
>>>>>>> 4f08c47e5 (fix mem_copy_val problem with types bigger than 2^18)
<<<<<<< HEAD
>>>>>>> 38ee2270b (fix mem_copy_val problem with types bigger than 2^18)
=======
=======
      Bytecode size: 8704 bytes (8.704 KB)
      Bytecode hash: 0x31746c102c3f8ca88b3e89c1af3bb956bb7d3c1fc82358c66d39e63d2a331c94
>>>>>>> 2be10f6e8 (transmute zero array instead of repeating first item)
>>>>>>> af63a13ff (transmute zero array instead of repeating first item)
=======
      Bytecode size: 8672 bytes (8.672 KB)
      Bytecode hash: 0x3cebcbbf499a2f27d34e744db647d61187c8a32f19e6abf1f789a70b9cb4cd62
>>>>>>> 586981b65 (update tests)
     Running 1 test, filtered 0 tests

tested -- array_repeat

      test test_array_repeat_zero ... ok (???, 27815938 gas)

test result: OK. 1 passed; 0 failed; finished in ???

    Finished in ???

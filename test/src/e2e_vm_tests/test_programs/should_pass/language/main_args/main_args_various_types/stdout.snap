---
source: test/src/snapshot/mod.rs
---
Because both inputs and outputs are not `memcopy`, we should be seeing the whole 
encoding/decoding apparatus 

> forc build --path test/src/e2e_vm_tests/test_programs/should_pass/language/main_args/main_args_various_types --release --ir final --asm final --bytecode
exit status: 0
output:
    Building test/src/e2e_vm_tests/test_programs/should_pass/language/main_args/main_args_various_types
   Compiling library std (sway-lib-std)
// IR: Final
library {
}

;; --- START OF TARGET BYTECODE ---

0x00000000 MOVE R60 $pc                                    ;; [26, 240, 48, 0]
0x00000004 JMPF $zero 0x4                                  ;; [116, 0, 0, 4]
0x00000008                                                 ;; [0, 0, 0, 0, 0, 0, 0, 32]
0x00000010                                                 ;; [0, 0, 0, 0, 0, 0, 0, 0]
0x00000018 LW R63 R60 0x1                                  ;; [93, 255, 192, 1]
0x0000001c ADD R63 R63 R60                                 ;; [16, 255, 255, 0]
.data_section:
;; --- END OF TARGET BYTECODE ---

   Compiling script main_args_various_types (test/src/e2e_vm_tests/test_programs/should_pass/language/main_args/main_args_various_types)
// IR: Final
script {
    global __const_global : string<3> = const string<3> "set"
    global __const_global0 : string<3> = const string<3> "add"

    pub entry fn __entry() -> (), !3 {
        local { ptr } __anon_00
        local [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] __anon_01
        local { { string<3> }, { u64, ( u64 | u64 ) } } __ret_val
        local { { string<3> }, { u64, ( u64 | u64 ) } } __ret_val0
        local { u64 } __ret_val1
        local [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] __tmp_arg
        local { u64 } _result
        local [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] args
        local mut [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] array
        local mut { ptr } buffer
        local { { string<3> }, { u64, ( u64 | u64 ) } } first
        local { u64 } item_

        entry():
        v0 = const u64 0, !5
        v1 = gtf v0, 10, !11
        v2 = bitcast v1 to ptr, !12
        v3 = get_local __ptr { ptr }, __anon_00, !14
        v4 = const u64 0
        v5 = get_elem_ptr v3, __ptr ptr, v4, !15
        store v2 to v5, !16
        v6 = get_local __ptr { ptr }, buffer, !18
        mem_copy_val v6, v3
        v7 = get_local __ptr { ptr }, buffer, !20
        v8 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, __ret_val
        v9 = call decode_4(v7, v8)
        v10 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, first, !24
        mem_copy_val v10, v8
        v11 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], __anon_01, !26
        v12 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, first, !28
        v13 = const u64 0
        v14 = get_elem_ptr v11, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v13, !29
        mem_copy_val v14, v12
        v15 = const u64 1
        v16 = get_elem_ptr v11, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v15, !30
        mem_copy_val v16, v12
        v17 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], array, !32
        mem_copy_val v17, v11
        v18 = const u64 1, !33
        br decode_script_data_0_abi_decode_3_while(v18), !34

        decode_script_data_0_abi_decode_3_while(v19: u64):
        v20 = const u64 2, !35
        v21 = cmp lt v19 v20, !38
        cbr v21, decode_script_data_0_abi_decode_3_while_body(), decode_script_data_0_abi_decode_3_end_while(), !39

        decode_script_data_0_abi_decode_3_while_body():
        v22 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, __ret_val0
        v23 = call decode_4(v7, v22)
        v24 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], array, !41
        v25 = get_elem_ptr v24, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v19, !42
        mem_copy_val v25, v22
        v26 = const u64 1, !43
        v27 = add v19, v26, !46
        br decode_script_data_0_abi_decode_3_while(v27), !47

        decode_script_data_0_abi_decode_3_end_while():
        v28 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], array, !49
        v29 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], args, !50
        mem_copy_val v29, v28
        v30 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], args, !51
        v31 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], __tmp_arg
        mem_copy_val v31, v30
        v32 = get_local __ptr { u64 }, __ret_val1
        v33 = call main_19(v31, v32)
        v34 = get_local __ptr { u64 }, _result, !52
        mem_copy_val v34, v32
        v35 = get_local __ptr { u64 }, _result, !53
        v36 = get_local __ptr { u64 }, item_, !56
        mem_copy_val v36, v35
        v37 = get_local __ptr { u64 }, item_, !58
        v38 = cast_ptr v37 to ptr, !60
        v39 = const u64 8
        retd v38 v39, !62
    }

    pub fn decode_4(self !63: __ptr { ptr }, __ret_value: __ptr { { string<3> }, { u64, ( u64 | u64 ) } }) -> (), !67 {
        local mut slice __aggr_memcpy_0
        local mut { ptr, u64 } __aggr_memcpy_00
        local mut string<3> __aggr_memcpy_01
        local { { string<3> }, { u64, ( u64 | u64 ) } } __anon_0
        local { string<3> } __anon_00
        local { ptr, u64 } __anon_000
        local { u64, ( u64 | u64 ) } __anon_01
        local { ptr, u64 } __anon_02
        local { u64, ( u64 | u64 ) } __anon_1
        local { u64, ( u64 | u64 ) } __tmp_block_arg
        local slice data
        local slice self_
        local slice slice
        local slice slice_

        entry(self: __ptr { ptr }, __ret_value: __ptr { { string<3> }, { u64, ( u64 | u64 ) } }):
        v0 = const u64 0
        v1 = get_elem_ptr self, __ptr ptr, v0, !77
        v2 = get_local __ptr { ptr, u64 }, __anon_000, !79
        v3 = const u64 0
        v4 = get_elem_ptr v2, __ptr ptr, v3, !80
        mem_copy_val v4, v1
        v5 = const u64 1
        v6 = get_elem_ptr v2, __ptr u64, v5, !81
        v7 = const u64 3, !82
        store v7 to v6, !83
        v8 = asm(ptr: v2) -> __ptr slice ptr {
        }
        v9 = get_local __ptr slice, __aggr_memcpy_0
        mem_copy_val v9, v8
        v10 = get_local __ptr slice, slice, !85
        mem_copy_val v10, v9
        v11 = load v1, !86
        v12 = const u64 3, !87
        v13 = add v11, v12, !88
        store v13 to v1, !90
        v14 = get_local __ptr slice, slice, !92
        v15 = get_local __ptr slice, data, !94
        mem_copy_val v15, v14
        v16 = get_local __ptr slice, data, !96
        v17 = get_local __ptr slice, self_, !99
        mem_copy_val v17, v16
        v18 = get_local __ptr slice, self_, !102
        v19 = get_local __ptr slice, slice_, !105
        mem_copy_val v19, v18
        v20 = get_local __ptr slice, slice_, !107
        v21 = asm(ptr: v20) -> __ptr { ptr, u64 } ptr {
        }
        v22 = get_local __ptr { ptr, u64 }, __aggr_memcpy_00
        mem_copy_val v22, v21
        v23 = get_local __ptr { ptr, u64 }, __anon_02, !99
        mem_copy_val v23, v22
        v24 = const u64 0
        v25 = get_elem_ptr v23, __ptr ptr, v24, !109
        v26 = load v25, !99
        v27 = asm(s: v26) -> __ptr string<3> s {
        }
        v28 = get_local __ptr string<3>, __aggr_memcpy_01
        mem_copy_val v28, v27
        v29 = get_local __ptr { string<3> }, __anon_00, !111
        v30 = const u64 0
        v31 = get_elem_ptr v29, __ptr string<3>, v30, !112
        mem_copy_val v31, v28
        v32 = load v1, !119
        v33 = asm(ptr: v32, val) -> u64 val, !121 {
            lw     val ptr i0, !122
        }
        v34 = load v1, !123
        v35 = const u64 8, !124
        v36 = add v34, v35, !125
        store v36 to v1, !127
        v37 = const u64 0, !128
        v38 = cmp eq v33 v37, !131
        cbr v38, abi_decode_5_abi_decode_12_block0(), abi_decode_5_abi_decode_12_block1(), !132

        abi_decode_5_abi_decode_12_block0():
        v39 = get_local __ptr { u64, ( u64 | u64 ) }, __anon_01, !135
        v40 = const u64 0
        v41 = get_elem_ptr v39, __ptr u64, v40, !136
        v42 = const u64 0, !134
        store v42 to v41, !137
        v43 = load v1, !140
        v44 = asm(ptr: v43, val) -> u64 val, !141 {
            lw     val ptr i0, !122
        }
        v45 = load v1, !142
        v46 = const u64 8, !143
        v47 = add v45, v46, !144
        store v47 to v1, !145
        v48 = const u64 1
        v49 = const u64 0
        v50 = get_elem_ptr v39, __ptr u64, v48, v49, !146
        store v44 to v50, !147
        v51 = get_local __ptr { u64, ( u64 | u64 ) }, __tmp_block_arg
        mem_copy_val v51, v39
        br abi_decode_5_abi_decode_12_block5(v51), !148

        abi_decode_5_abi_decode_12_block1():
        v52 = const u64 1, !149
        v53 = cmp eq v33 v52, !152
        cbr v53, abi_decode_5_abi_decode_12_block2(), abi_decode_5_abi_decode_12_block3(), !153

        abi_decode_5_abi_decode_12_block2():
        v54 = get_local __ptr { u64, ( u64 | u64 ) }, __anon_1, !154
        v55 = const u64 0
        v56 = get_elem_ptr v54, __ptr u64, v55, !155
        v57 = const u64 1, !134
        store v57 to v56, !156
        v58 = load v1, !159
        v59 = asm(ptr: v58, val) -> u64 val, !160 {
            lw     val ptr i0, !122
        }
        v60 = load v1, !161
        v61 = const u64 8, !162
        v62 = add v60, v61, !163
        store v62 to v1, !164
        v63 = const u64 1
        v64 = const u64 1
        v65 = get_elem_ptr v54, __ptr u64, v63, v64, !165
        store v59 to v65, !166
        v66 = get_local __ptr { u64, ( u64 | u64 ) }, __tmp_block_arg
        mem_copy_val v66, v54
        br abi_decode_5_abi_decode_12_block5(v66), !167

        abi_decode_5_abi_decode_12_block3():
        v67 = const u64 0, !168
        revert v67, !170

        abi_decode_5_abi_decode_12_block5(v68: __ptr { u64, ( u64 | u64 ) }):
        v69 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, __anon_0, !172
        v70 = const u64 0
        v71 = get_elem_ptr v69, __ptr { string<3> }, v70, !173
        mem_copy_val v71, v29
        v72 = const u64 1
        v73 = get_elem_ptr v69, __ptr { u64, ( u64 | u64 ) }, v72, !174
        mem_copy_val v73, v68
        mem_copy_val __ret_value, v69
        v74 = const unit ()
        ret () v74
    }

    entry_orig fn main_19(ops: __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], __ret_value: __ptr { u64 }) -> (), !177 {
        local { ptr, u64 } __anon_0
        local slice __anon_1
        local { ptr, u64 } __anon_2
        local slice __anon_3
        local slice __log_arg
        local { u64, ( u64 | u64 ) } __matched_value_1
        local { u64, ( u64 | u64 ) } __matched_value_2
        local slice __ret_val
        local [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] ops_

        entry(ops: __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], __ret_value: __ptr { u64 }):
        v0 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], ops_
        mem_copy_val v0, ops
        v1 = get_local __ptr slice, __ret_val
        v2 = call encode_20(ops, v1)
        v3 = get_local __ptr slice, __log_arg
        mem_copy_val v3, v1
        v4 = const u64 3647243719605075626
        log __ptr slice v3, v4
        v5 = get_global __ptr string<3>, __const_global
        v6 = cast_ptr v5 to ptr, !178
        v7 = get_local __ptr { ptr, u64 }, __anon_0, !178
        v8 = const u64 0
        v9 = get_elem_ptr v7, __ptr ptr, v8
        store v6 to v9, !178
        v10 = const u64 1
        v11 = get_elem_ptr v7, __ptr u64, v10
        v12 = const u64 3
        store v12 to v11, !178
        v13 = get_local __ptr slice, __anon_1, !178
        mem_copy_bytes v13, v7, 16
        v14 = const u64 0, !179
        v15 = const u64 0
        v16 = const u64 0
        v17 = get_elem_ptr ops, __ptr string<3>, v14, v15, v16
        v18 = get_local __ptr slice, __anon_1
        v19 = call eq_str_3_32(v17, v18)
        v20 = const bool false, !181
        v21 = cmp eq v19 v20, !187
        cbr v21, assert_29_block0(), assert_29_block1(), !188

        assert_29_block0():
        v22 = const u64 18446744073709486084
        revert v22, !193

        assert_29_block1():
        v23 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], ops_, !194
        v24 = const u64 0, !195
        v25 = get_elem_ptr v23, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v24, !196
        v26 = const u64 1
        v27 = get_elem_ptr v25, __ptr { u64, ( u64 | u64 ) }, v26, !197
        v28 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !198
        mem_copy_val v28, v27
        v29 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !199
        v30 = const u64 0
        v31 = get_elem_ptr v29, __ptr u64, v30, !199
        v32 = load v31
        v33 = const u64 0, !199
        v34 = cmp eq v32 v33, !202
        cbr v34, block0(), block1(), !200

        block0():
        v35 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !199
        v36 = const u64 1
        v37 = const u64 0
        v38 = get_elem_ptr v35, __ptr u64, v36, v37
        v39 = load v38
        v40 = const u64 1338, !203
        v41 = cmp eq v39 v40, !206
        v42 = cmp eq v41 v20, !209
        cbr v42, assert_29_block014(), assert_29_block115(), !210

        assert_29_block014():
        revert v22, !211

        assert_29_block115():
        v43 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], ops_, !212
        v44 = const u64 1, !213
        v45 = get_elem_ptr v43, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v44, !214
        v46 = const u64 0
        v47 = get_elem_ptr v45, __ptr { string<3> }, v46, !215
        v48 = const u64 0
        v49 = get_elem_ptr v47, __ptr string<3>, v48, !216
        v50 = get_global __ptr string<3>, __const_global0
        v51 = cast_ptr v50 to ptr, !217
        v52 = get_local __ptr { ptr, u64 }, __anon_2, !217
        v53 = const u64 0
        v54 = get_elem_ptr v52, __ptr ptr, v53
        store v51 to v54, !217
        v55 = const u64 1
        v56 = get_elem_ptr v52, __ptr u64, v55
        v57 = const u64 3
        store v57 to v56, !217
        v58 = get_local __ptr slice, __anon_3, !217
        mem_copy_bytes v58, v52, 16
        v59 = get_local __ptr slice, __anon_3
        v60 = call eq_str_3_32(v49, v59)
        v61 = cmp eq v60 v20, !220
        cbr v61, assert_29_block017(), assert_29_block118(), !221

        assert_29_block017():
        revert v22, !222

        assert_29_block118():
        v62 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], ops_, !223
        v63 = const u64 1, !224
        v64 = get_elem_ptr v62, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v63, !225
        v65 = const u64 1
        v66 = get_elem_ptr v64, __ptr { u64, ( u64 | u64 ) }, v65, !226
        v67 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_2, !227
        mem_copy_val v67, v66
        v68 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_2, !228
        v69 = const u64 0
        v70 = get_elem_ptr v68, __ptr u64, v69, !228
        v71 = load v70
        v72 = const u64 1, !228
        v73 = cmp eq v71 v72, !231
        cbr v73, block3(), block4(), !229

        block1():
        v74 = const u64 1, !232
        revert v74, !235

        block3():
        v75 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_2, !228
        v76 = const u64 1
        v77 = const u64 1
        v78 = get_elem_ptr v75, __ptr u64, v76, v77
        v79 = load v78
        v80 = const u64 1, !236
        v81 = cmp eq v79 v80, !239
        v82 = cmp eq v81 v20, !242
        cbr v82, assert_29_block020(), assert_29_block121(), !243

        assert_29_block020():
        revert v22, !244

        assert_29_block121():
        v83 = const u64 0
        v84 = get_elem_ptr __ret_value, __ptr u64, v83
        v85 = const u64 1, !245
        store v85 to v84
        v86 = const unit ()
        ret () v86

        block4():
        v87 = const u64 2, !246
        revert v87, !249
    }

    pub fn encode_20(item: __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], __ret_value: __ptr slice) -> (), !253 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local mut { ptr, u64, u64 } __aggr_memcpy_00
        local { ptr, u64, u64 } __anon_0
        local string<3> __anon_1
        local { ptr, u64, u64 } __anon_2
        local { { ptr, u64, u64 } } __anon_3
        local { u64, ( u64 | u64 ) } __matched_value_1
        local { { ptr, u64, u64 } } __ret_val
        local { { ptr, u64, u64 } } __ret_val0
        local { { ptr, u64, u64 } } __ret_val1
        local { { ptr, u64, u64 } } __ret_val2
        local { { ptr, u64, u64 } } __ret_val3
        local slice __ret_val4
        local { { ptr, u64, u64 } } __tmp_arg
        local { { ptr, u64, u64 } } __tmp_arg0
        local { { ptr, u64, u64 } } __tmp_arg1
        local { { ptr, u64, u64 } } __tmp_arg2
        local { { ptr, u64, u64 } } __tmp_arg3
        local { { ptr, u64, u64 } } __tmp_block_arg
        local { { ptr, u64, u64 } } buffer
        local { { ptr, u64, u64 } } buffer_
        local { { ptr, u64, u64 } } buffer_0
        local { { ptr, u64, u64 } } buffer_00
        local { { ptr, u64, u64 } } buffer_000
        local { { ptr, u64, u64 } } buffer_1
        local mut { { ptr, u64, u64 } } buffer__
        local { { ptr, u64, u64 } } buffer__0
        local { { ptr, u64, u64 } } buffer__00
        local { { ptr, u64, u64 } } buffer__1
        local { { ptr, u64, u64 } } buffer___
        local { { ptr, u64, u64 } } buffer___0
        local { { ptr, u64, u64 } } buffer____
        local { { ptr, u64, u64 } } buffer_____
        local { { ptr, u64, u64 } } buffer______
        local [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] item_
        local [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2] self_
        local { string<3> } self_00
        local string<3> self_000
        local { { string<3> }, { u64, ( u64 | u64 ) } } self_1
        local { u64, ( u64 | u64 ) } self_10

        entry(item: __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], __ret_value: __ptr slice):
        v0 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], item_
        mem_copy_val v0, item
        v1 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], item_, !254
        v2 = get_local __ptr { { ptr, u64, u64 } }, __ret_val3
        v3 = call new_27(v2)
        v4 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], self_, !257
        mem_copy_val v4, v1
        v5 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !257
        mem_copy_val v5, v2
        v6 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !259
        v7 = get_local __ptr { { ptr, u64, u64 } }, buffer__, !261
        mem_copy_val v7, v6
        v8 = const u64 0, !262
        br abi_encode_21_while(v8), !257

        abi_encode_21_while(v9: u64):
        v10 = const u64 2, !263
        v11 = cmp lt v9 v10, !266
        cbr v11, abi_encode_21_while_body(), abi_encode_21_end_while(), !257

        abi_encode_21_while_body():
        v12 = get_local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2], self_, !268
        v13 = get_elem_ptr v12, __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, v9, !270
        v14 = get_local __ptr { { ptr, u64, u64 } }, buffer__, !272
        v15 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, self_1, !275
        mem_copy_val v15, v13
        v16 = get_local __ptr { { ptr, u64, u64 } }, buffer_0, !276
        mem_copy_val v16, v14
        v17 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, self_1, !278
        v18 = const u64 0
        v19 = get_elem_ptr v17, __ptr { string<3> }, v18, !280
        v20 = get_local __ptr { { ptr, u64, u64 } }, buffer_0, !282
        v21 = get_local __ptr { string<3> }, self_00, !285
        mem_copy_val v21, v19
        v22 = get_local __ptr { { ptr, u64, u64 } }, buffer_00, !286
        mem_copy_val v22, v20
        v23 = get_local __ptr { string<3> }, self_00, !288
        v24 = const u64 0
        v25 = get_elem_ptr v23, __ptr string<3>, v24, !289
        v26 = get_local __ptr { { ptr, u64, u64 } }, buffer_00, !291
        v27 = get_local __ptr string<3>, self_000, !294
        mem_copy_val v27, v25
        v28 = get_local __ptr { { ptr, u64, u64 } }, buffer_000, !295
        mem_copy_val v28, v26
        v29 = get_local __ptr { { ptr, u64, u64 } }, buffer_000, !297
        v30 = const u64 0
        v31 = get_elem_ptr v29, __ptr { ptr, u64, u64 }, v30, !299
        v32 = asm(buffer: v31) -> __ptr { ptr, u64, u64 } buffer {
        }
        v33 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v33, v32
        v34 = get_local __ptr { ptr, u64, u64 }, __anon_0, !300
        mem_copy_val v34, v33
        v35 = const u64 0
        v36 = get_elem_ptr v34, __ptr ptr, v35, !301
        v37 = load v36, !302
        v38 = const u64 1
        v39 = get_elem_ptr v34, __ptr u64, v38, !303
        v40 = load v39, !304
        v41 = const u64 2
        v42 = get_elem_ptr v34, __ptr u64, v41, !305
        v43 = load v42, !306
        v44 = get_local __ptr string<3>, self_000, !308
        v45 = const u64 3
        v46 = add v43, v45, !309
        v47 = cmp gt v46 v40, !310
        cbr v47, abi_encode_21_abi_encode_22_abi_encode_23_abi_encode_24_block1(), abi_encode_21_abi_encode_22_abi_encode_23_abi_encode_24_block0(v37, v40), !311

        abi_encode_21_abi_encode_22_abi_encode_23_abi_encode_24_block0(v48: ptr, v49: u64):
        v50 = get_local __ptr string<3>, __anon_1, !312
        mem_copy_val v50, v44
        v51 = add v48, v43, !313
        v52 = cast_ptr v51 to __ptr u8, !314
        mem_copy_bytes v52, v50, 3, !315
        v53 = get_local __ptr { ptr, u64, u64 }, __anon_2, !316
        v54 = const u64 0
        v55 = get_elem_ptr v53, __ptr ptr, v54, !317
        store v48 to v55, !318
        v56 = const u64 1
        v57 = get_elem_ptr v53, __ptr u64, v56, !319
        store v49 to v57, !320
        v58 = const u64 2
        v59 = get_elem_ptr v53, __ptr u64, v58, !321
        store v46 to v59, !322
        v60 = asm(buffer: v53) -> __ptr { ptr, u64, u64 } buffer {
        }
        v61 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v61, v60
        v62 = get_local __ptr { { ptr, u64, u64 } }, __anon_3, !324
        v63 = const u64 0
        v64 = get_elem_ptr v62, __ptr { ptr, u64, u64 }, v63, !325
        mem_copy_val v64, v61
        v65 = get_local __ptr { { ptr, u64, u64 } }, buffer__00, !327
        mem_copy_val v65, v62
        v66 = get_local __ptr { { ptr, u64, u64 } }, buffer__00, !329
        v67 = get_local __ptr { { ptr, u64, u64 } }, buffer__0, !331
        mem_copy_val v67, v66
        v68 = get_local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }, self_1, !333
        v69 = const u64 1
        v70 = get_elem_ptr v68, __ptr { u64, ( u64 | u64 ) }, v69, !335
        v71 = get_local __ptr { { ptr, u64, u64 } }, buffer__0, !337
        v72 = get_local __ptr { u64, ( u64 | u64 ) }, self_10, !340
        mem_copy_val v72, v70
        v73 = get_local __ptr { { ptr, u64, u64 } }, buffer_1, !341
        mem_copy_val v73, v71
        v74 = get_local __ptr { u64, ( u64 | u64 ) }, self_10, !343
        v75 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !345
        mem_copy_val v75, v74
        v76 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !346
        v77 = const u64 0
        v78 = get_elem_ptr v76, __ptr u64, v77, !347
        v79 = load v78, !348
        v80 = const u64 0, !342
        v81 = cmp eq v79 v80, !351
        cbr v81, abi_encode_21_abi_encode_22_abi_encode_25_block0(), abi_encode_21_abi_encode_22_abi_encode_25_block1(), !352

        abi_encode_21_abi_encode_22_abi_encode_23_abi_encode_24_block1():
        v82 = const u64 2
        v83 = mul v40, v82, !353
        v84 = add v83, v45, !354
        v85 = asm(new_cap: v84, old_ptr: v37, len: v43) -> __ptr u8 hp, !355 {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br abi_encode_21_abi_encode_22_abi_encode_23_abi_encode_24_block0(v85, v84), !356

        abi_encode_21_abi_encode_22_abi_encode_25_block0():
        v86 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !357
        v87 = const u64 1
        v88 = const u64 0
        v89 = get_elem_ptr v86, __ptr u64, v87, v88, !358
        v90 = load v89, !359
        v91 = get_local __ptr { { ptr, u64, u64 } }, buffer_1, !361
        v92 = get_local __ptr { { ptr, u64, u64 } }, __tmp_arg
        mem_copy_val v92, v91
        v93 = get_local __ptr { { ptr, u64, u64 } }, __ret_val
        v94 = const u64 0, !362
        v95 = call abi_encode_26(v94, v92, v93)
        v96 = get_local __ptr { { ptr, u64, u64 } }, buffer__1, !364
        mem_copy_val v96, v93
        v97 = get_local __ptr { { ptr, u64, u64 } }, buffer__1, !366
        v98 = get_local __ptr { { ptr, u64, u64 } }, __tmp_arg0
        mem_copy_val v98, v97
        v99 = get_local __ptr { { ptr, u64, u64 } }, __ret_val0
        v100 = call abi_encode_26(v90, v98, v99)
        v101 = get_local __ptr { { ptr, u64, u64 } }, buffer___0, !368
        mem_copy_val v101, v99
        v102 = get_local __ptr { { ptr, u64, u64 } }, buffer___0, !370
        v103 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg
        mem_copy_val v103, v102
        br abi_encode_21_abi_encode_22_abi_encode_25_block5(v103), !371

        abi_encode_21_abi_encode_22_abi_encode_25_block1():
        v104 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !372
        v105 = const u64 0
        v106 = get_elem_ptr v104, __ptr u64, v105, !373
        v107 = load v106, !374
        v108 = const u64 1, !342
        v109 = cmp eq v107 v108, !377
        cbr v109, abi_encode_21_abi_encode_22_abi_encode_25_block2(), abi_encode_21_abi_encode_22_abi_encode_25_block3(), !378

        abi_encode_21_abi_encode_22_abi_encode_25_block2():
        v110 = get_local __ptr { u64, ( u64 | u64 ) }, __matched_value_1, !379
        v111 = const u64 1
        v112 = const u64 1
        v113 = get_elem_ptr v110, __ptr u64, v111, v112, !380
        v114 = load v113, !381
        v115 = get_local __ptr { { ptr, u64, u64 } }, buffer_1, !383
        v116 = get_local __ptr { { ptr, u64, u64 } }, __tmp_arg1
        mem_copy_val v116, v115
        v117 = get_local __ptr { { ptr, u64, u64 } }, __ret_val1
        v118 = const u64 1, !384
        v119 = call abi_encode_26(v118, v116, v117)
        v120 = get_local __ptr { { ptr, u64, u64 } }, buffer____, !386
        mem_copy_val v120, v117
        v121 = get_local __ptr { { ptr, u64, u64 } }, buffer____, !388
        v122 = get_local __ptr { { ptr, u64, u64 } }, __tmp_arg2
        mem_copy_val v122, v121
        v123 = get_local __ptr { { ptr, u64, u64 } }, __ret_val2
        v124 = call abi_encode_26(v114, v122, v123)
        v125 = get_local __ptr { { ptr, u64, u64 } }, buffer_____, !390
        mem_copy_val v125, v123
        v126 = get_local __ptr { { ptr, u64, u64 } }, buffer_____, !392
        v127 = get_local __ptr { { ptr, u64, u64 } }, __tmp_block_arg
        mem_copy_val v127, v126
        br abi_encode_21_abi_encode_22_abi_encode_25_block5(v127), !393

        abi_encode_21_abi_encode_22_abi_encode_25_block3():
        v128 = const u64 14757395258967588866, !344
        revert v128, !394

        abi_encode_21_abi_encode_22_abi_encode_25_block5(v129: __ptr { { ptr, u64, u64 } }):
        v130 = get_local __ptr { { ptr, u64, u64 } }, buffer______, !396
        mem_copy_val v130, v129
        v131 = get_local __ptr { { ptr, u64, u64 } }, buffer______, !398
        v132 = get_local __ptr { { ptr, u64, u64 } }, buffer___, !400
        mem_copy_val v132, v131
        v133 = get_local __ptr { { ptr, u64, u64 } }, buffer___, !402
        v134 = get_local __ptr { { ptr, u64, u64 } }, buffer__, !404
        mem_copy_val v134, v133
        v135 = const u64 1, !405
        v136 = add v9, v135, !408
        br abi_encode_21_while(v136), !257

        abi_encode_21_end_while():
        v137 = get_local __ptr { { ptr, u64, u64 } }, buffer__, !410
        v138 = get_local __ptr { { ptr, u64, u64 } }, buffer, !411
        mem_copy_val v138, v137
        v139 = get_local __ptr { { ptr, u64, u64 } }, buffer, !412
        v140 = get_local __ptr { { ptr, u64, u64 } }, __tmp_arg3
        mem_copy_val v140, v139
        v141 = get_local __ptr slice, __ret_val4
        v142 = call as_raw_slice_28(v140, v141)
        mem_copy_val __ret_value, v141
        v143 = const unit ()
        ret () v143
    }

    pub fn abi_encode_26(self !413: u64, buffer: __ptr { { ptr, u64, u64 } }, __ret_value: __ptr { { ptr, u64, u64 } }) -> (), !416 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local mut { ptr, u64, u64 } __aggr_memcpy_00
        local { ptr, u64, u64 } __anon_0
        local { ptr, u64, u64 } __anon_1
        local { { ptr, u64, u64 } } __anon_2
        local { { ptr, u64, u64 } } buffer_

        entry(self: u64, buffer: __ptr { { ptr, u64, u64 } }, __ret_value: __ptr { { ptr, u64, u64 } }):
        v0 = get_local __ptr { { ptr, u64, u64 } }, buffer_
        mem_copy_val v0, buffer
        v1 = get_local __ptr { { ptr, u64, u64 } }, buffer_, !417
        v2 = const u64 0
        v3 = get_elem_ptr v1, __ptr { ptr, u64, u64 }, v2, !298
        v4 = asm(buffer: v3) -> __ptr { ptr, u64, u64 } buffer {
        }
        v5 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v5, v4
        v6 = get_local __ptr { ptr, u64, u64 }, __anon_0
        mem_copy_val v6, v5
        v7 = const u64 0
        v8 = get_elem_ptr v6, __ptr ptr, v7
        v9 = load v8
        v10 = const u64 1
        v11 = get_elem_ptr v6, __ptr u64, v10
        v12 = load v11
        v13 = const u64 2
        v14 = get_elem_ptr v6, __ptr u64, v13
        v15 = load v14
        v16 = const u64 8
        v17 = add v15, v16
        v18 = cmp gt v17 v12
        cbr v18, block1(), block0(v9, v12)

        block0(v19: ptr, v20: u64):
        v21 = add v19, v15
        v22 = cast_ptr v21 to __ptr u64
        store self to v22
        v23 = get_local __ptr { ptr, u64, u64 }, __anon_1
        v24 = const u64 0
        v25 = get_elem_ptr v23, __ptr ptr, v24
        store v19 to v25
        v26 = const u64 1
        v27 = get_elem_ptr v23, __ptr u64, v26
        store v20 to v27
        v28 = const u64 2
        v29 = get_elem_ptr v23, __ptr u64, v28
        store v17 to v29
        v30 = asm(buffer: v23) -> __ptr { ptr, u64, u64 } buffer {
        }
        v31 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_00
        mem_copy_val v31, v30
        v32 = get_local __ptr { { ptr, u64, u64 } }, __anon_2, !418
        v33 = const u64 0
        v34 = get_elem_ptr v32, __ptr { ptr, u64, u64 }, v33
        mem_copy_val v34, v31
        mem_copy_val __ret_value, v32
        v35 = const unit ()
        ret () v35

        block1():
        v36 = const u64 2
        v37 = mul v12, v36
        v38 = add v37, v16
        v39 = asm(new_cap: v38, old_ptr: v9, len: v15) -> __ptr u8 hp {
            aloc   new_cap
            mcp    hp old_ptr len
        }
        br block0(v39, v38)
    }

    pub fn new_27(__ret_value: __ptr { { ptr, u64, u64 } }) -> (), !421 {
        local mut { ptr, u64, u64 } __aggr_memcpy_0
        local { ptr, u64, u64 } __anon_0
        local { { ptr, u64, u64 } } __anon_1

        entry(__ret_value: __ptr { { ptr, u64, u64 } }):
        v0 = const u64 1024
        v1 = asm(cap: v0) -> ptr hp {
            aloc   cap
        }
        v2 = get_local __ptr { ptr, u64, u64 }, __anon_0
        v3 = const u64 0
        v4 = get_elem_ptr v2, __ptr ptr, v3
        store v1 to v4
        v5 = const u64 1
        v6 = get_elem_ptr v2, __ptr u64, v5
        store v0 to v6
        v7 = const u64 2
        v8 = get_elem_ptr v2, __ptr u64, v7
        v9 = const u64 0
        store v9 to v8
        v10 = asm(buffer: v2) -> __ptr { ptr, u64, u64 } buffer {
        }
        v11 = get_local __ptr { ptr, u64, u64 }, __aggr_memcpy_0
        mem_copy_val v11, v10
        v12 = get_local __ptr { { ptr, u64, u64 } }, __anon_1, !422
        v13 = const u64 0
        v14 = get_elem_ptr v12, __ptr { ptr, u64, u64 }, v13
        mem_copy_val v14, v11
        mem_copy_val __ret_value, v12
        v15 = const unit ()
        ret () v15
    }

    pub fn as_raw_slice_28(self: __ptr { { ptr, u64, u64 } }, __ret_value: __ptr slice) -> (), !425 {
        local mut slice __aggr_memcpy_00
        local { ptr, u64 } __anon_1
        local { { ptr, u64, u64 } } self_

        entry(self: __ptr { { ptr, u64, u64 } }, __ret_value: __ptr slice):
        v0 = get_local __ptr { { ptr, u64, u64 } }, self_
        mem_copy_val v0, self
        v1 = get_local __ptr { { ptr, u64, u64 } }, self_, !426
        v2 = const u64 0
        v3 = get_elem_ptr v1, __ptr { ptr, u64, u64 }, v2, !298
        v4 = asm(buffer: v3) -> __ptr { ptr, u64, u64 } buffer {
        }
        v5 = const u64 0
        v6 = get_elem_ptr v4, __ptr ptr, v5
        v7 = load v6
        v8 = const u64 2
        v9 = get_elem_ptr v4, __ptr u64, v8
        v10 = load v9
        v11 = get_local __ptr { ptr, u64 }, __anon_1
        v12 = const u64 0
        v13 = get_elem_ptr v11, __ptr ptr, v12
        v14 = get_elem_ptr v13, __ptr ptr, 
        store v7 to v14
        v15 = const u64 1
        v16 = get_elem_ptr v11, __ptr u64, v15
        v17 = get_elem_ptr v16, __ptr u64, 
        store v10 to v17
        v18 = asm(s: v11) -> __ptr slice s {
        }
        v19 = get_local __ptr slice, __aggr_memcpy_00
        mem_copy_val v19, v18
        mem_copy_val __ret_value, v19
        v20 = const unit ()
        ret () v20
    }

    fn eq_str_3_32(a: __ptr string<3>, b: __ptr slice) -> bool, !429 {
        local { ptr, u64 } __tuple_1_
        local string<3> a_
        local slice self_

        entry(a: __ptr string<3>, b: __ptr slice):
        v0 = get_local __ptr string<3>, a_
        mem_copy_val v0, a
        v1 = get_local __ptr slice, self_, !432
        mem_copy_val v1, b
        v2 = get_local __ptr slice, self_, !435
        v3 = asm(s: v2) -> __ptr { ptr, u64 } s {
        }
        v4 = const u64 0
        v5 = get_elem_ptr v3, __ptr ptr, v4
        v6 = load v5
        v7 = const u64 1
        v8 = get_elem_ptr v3, __ptr u64, v7
        v9 = load v8
        v10 = get_local __ptr { ptr, u64 }, __tuple_1_, !437
        v11 = const u64 0
        v12 = get_elem_ptr v10, __ptr ptr, v11
        store v6 to v12
        v13 = const u64 1
        v14 = get_elem_ptr v10, __ptr u64, v13
        store v9 to v14
        v15 = get_local __ptr { ptr, u64 }, __tuple_1_, !438
        v16 = const u64 0
        v17 = get_elem_ptr v15, __ptr ptr, v16, !439
        v18 = load v17, !432
        v19 = get_local __ptr string<3>, a_, !440
        v20 = const u64 3, !441
        v21 = asm(a: v19, b: v18, len: v20, r) -> bool r, !442 {
            meq    r a b len, !443
        }
        ret bool v21
    }
}

!0 = "test/src/e2e_vm_tests/test_programs/should_pass/language/main_args/main_args_various_types/src/main.<autogenerated>.sw"
!1 = span !0 0 243
!2 = fn_name_span !0 7 14
!3 = (!1 !2)
!4 = "sway-lib-std/src/codec.sw"
!5 = span !4 2735 2736
!6 = span !0 72 120
!7 = fn_call_path_span !0 72 90
!8 = span !4 164120 164152
!9 = fn_call_path_span !4 164120 164150
!10 = span !4 2718 2742
!11 = (!6 !7 !8 !9 !10)
!12 = (!6 !7 !8 !9 !10)
!13 = span !4 2827 2847
!14 = (!6 !7 !8 !9 !13)
!15 = (!6 !7 !8 !9)
!16 = (!6 !7 !8 !9 !13)
!17 = span !4 164103 164153
!18 = (!6 !7 !17)
!19 = span !4 164176 164182
!20 = (!6 !7 !19)
!21 = span !4 164162 164183
!22 = fn_call_path_span !4 164162 164175
!23 = span !4 108562 108598
!24 = (!6 !7 !21 !22 !23)
!25 = span !4 108623 108633
!26 = (!6 !7 !21 !22 !25)
!27 = span !4 108624 108629
!28 = (!6 !7 !21 !22 !27)
!29 = (!6 !7 !21 !22)
!30 = (!6 !7 !21 !22)
!31 = span !4 108607 108634
!32 = (!6 !7 !21 !22 !31)
!33 = span !4 108655 108656
!34 = (!6 !7 !21 !22)
!35 = span !4 108676 108677
!36 = span !4 108672 108677
!37 = fn_call_path_span !4 108674 108675
!38 = (!6 !7 !21 !22 !36 !37)
!39 = (!6 !7 !21 !22)
!40 = span !4 108692 108723
!41 = (!6 !7 !21 !22 !40)
!42 = (!6 !7 !21 !22 !40)
!43 = span !4 108742 108743
!44 = span !4 108737 108743
!45 = fn_call_path_span !4 108739 108741
!46 = (!6 !7 !21 !22 !44 !45)
!47 = (!6 !7 !21 !22)
!48 = span !4 108764 108769
!49 = (!6 !7 !21 !22 !48)
!50 = span !0 35 121
!51 = span !0 167 171
!52 = span !0 138 173
!53 = span !0 220 227
!54 = span !0 190 228
!55 = fn_call_path_span !0 190 207
!56 = (!54 !55)
!57 = span !4 83308 83312
!58 = (!54 !55 !57)
!59 = span !4 83298 83313
!60 = (!54 !55 !59)
!61 = span !4 83283 83332
!62 = (!54 !55 !61)
!63 = span !4 5318 5322
!64 = span !4 5293 5400
!65 = fn_name_span !4 5300 5306
!66 = inline "always"
!67 = (!64 !65 !66)
!68 = span !4 5375 5394
!69 = fn_call_path_span !4 5375 5388
!70 = span !4 137801 137822
!71 = fn_call_path_span !4 137801 137814
!72 = span !0 325 350
!73 = fn_call_path_span !0 332 338
!74 = span !4 87800 87820
!75 = fn_call_path_span !4 87807 87817
!76 = span !4 625 637
!77 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !76)
!78 = span !4 4326 4343
!79 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !78)
!80 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !78)
!81 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !78)
!82 = span !4 87818 87819
!83 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !78)
!84 = span !4 4305 4384
!85 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !84)
!86 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75)
!87 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75)
!88 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75)
!89 = span !4 4393 4436
!90 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !89)
!91 = span !4 4446 4451
!92 = (!68 !69 !70 !71 !72 !73 !68 !69 !74 !75 !91)
!93 = span !4 87789 87821
!94 = (!68 !69 !70 !71 !72 !73 !68 !69 !93)
!95 = span !4 87837 87841
!96 = (!68 !69 !70 !71 !72 !73 !68 !69 !95)
!97 = span !4 87837 87847
!98 = fn_call_path_span !4 87842 87845
!99 = (!68 !69 !70 !71 !72 !73 !68 !69 !97 !98)
!100 = "sway-lib-std/src/raw_slice.sw"
!101 = span !100 2922 2926
!102 = (!68 !69 !70 !71 !72 !73 !68 !69 !97 !98 !101)
!103 = span !100 2911 2927
!104 = fn_call_path_span !100 2911 2921
!105 = (!68 !69 !70 !71 !72 !73 !68 !69 !97 !98 !103 !104)
!106 = span !100 1633 1638
!107 = (!68 !69 !70 !71 !72 !73 !68 !69 !97 !98 !103 !104 !106)
!108 = span !100 2928 2929
!109 = (!68 !69 !70 !71 !72 !73 !68 !69 !97 !98 !108)
!110 = span !0 313 353
!111 = (!68 !69 !70 !71 !110)
!112 = (!68 !69 !70 !71)
!113 = span !4 137824 137845
!114 = fn_call_path_span !4 137824 137837
!115 = span !0 338 360
!116 = fn_call_path_span !0 345 351
!117 = span !4 84684 84712
!118 = fn_call_path_span !4 84691 84703
!119 = (!68 !69 !113 !114 !115 !116 !68 !69 !117 !118)
!120 = span !4 3902 3983
!121 = (!68 !69 !113 !114 !115 !116 !68 !69 !117 !118 !120)
!122 = span !4 3940 3953
!123 = (!68 !69 !113 !114 !115 !116 !68 !69 !117 !118)
!124 = (!68 !69 !113 !114 !115 !116 !68 !69 !117 !118)
!125 = (!68 !69 !113 !114 !115 !116 !68 !69 !117 !118)
!126 = span !4 3993 4032
!127 = (!68 !69 !113 !114 !115 !116 !68 !69 !117 !118 !126)
!128 = span !0 378 379
!129 = span !0 378 427
!130 = fn_call_path_span !0 378 427
!131 = (!68 !69 !113 !114 !129 !130)
!132 = (!68 !69 !113 !114 !129)
!133 = "test/src/e2e_vm_tests/test_programs/should_pass/language/main_args/main_args_various_types/src/main.sw"
!134 = span !133 204 260
!135 = (!68 !69 !113 !114 !134)
!136 = (!68 !69 !113 !114 !134)
!137 = (!68 !69 !113 !114 !134)
!138 = span !0 403 425
!139 = fn_call_path_span !0 410 416
!140 = (!68 !69 !113 !114 !138 !139 !68 !69 !117 !118)
!141 = (!68 !69 !113 !114 !138 !139 !68 !69 !117 !118 !120)
!142 = (!68 !69 !113 !114 !138 !139 !68 !69 !117 !118)
!143 = (!68 !69 !113 !114 !138 !139 !68 !69 !117 !118)
!144 = (!68 !69 !113 !114 !138 !139 !68 !69 !117 !118)
!145 = (!68 !69 !113 !114 !138 !139 !68 !69 !117 !118 !126)
!146 = (!68 !69 !113 !114 !134)
!147 = (!68 !69 !113 !114 !134)
!148 = (!68 !69 !113 !114)
!149 = span !0 429 430
!150 = span !0 429 478
!151 = fn_call_path_span !0 429 478
!152 = (!68 !69 !113 !114 !150 !151)
!153 = (!68 !69 !113 !114 !150)
!154 = (!68 !69 !113 !114 !134)
!155 = (!68 !69 !113 !114 !134)
!156 = (!68 !69 !113 !114 !134)
!157 = span !0 454 476
!158 = fn_call_path_span !0 461 467
!159 = (!68 !69 !113 !114 !157 !158 !68 !69 !117 !118)
!160 = (!68 !69 !113 !114 !157 !158 !68 !69 !117 !118 !120)
!161 = (!68 !69 !113 !114 !157 !158 !68 !69 !117 !118)
!162 = (!68 !69 !113 !114 !157 !158 !68 !69 !117 !118)
!163 = (!68 !69 !113 !114 !157 !158 !68 !69 !117 !118)
!164 = (!68 !69 !113 !114 !157 !158 !68 !69 !117 !118 !126)
!165 = (!68 !69 !113 !114 !134)
!166 = (!68 !69 !113 !114 !134)
!167 = (!68 !69 !113 !114)
!168 = span !0 495 496
!169 = span !0 486 497
!170 = (!68 !69 !113 !114 !169)
!171 = span !4 137800 137846
!172 = (!68 !69 !171)
!173 = (!68 !69 !171)
!174 = (!68 !69 !171)
!175 = span !133 297 695
!176 = fn_name_span !133 300 304
!177 = (!175 !176)
!178 = span !133 400 405
!179 = span !133 390 391
!180 = "sway-lib-std/src/ops.sw"
!181 = span !180 12573 12578
!182 = span !133 370 407
!183 = fn_call_path_span !133 370 376
!184 = "sway-lib-std/src/assert.sw"
!185 = span !184 1015 1025
!186 = fn_call_path_span !184 1015 1016
!187 = (!182 !183 !185 !186)
!188 = (!182 !183 !185)
!189 = span !184 1036 1064
!190 = fn_call_path_span !184 1036 1042
!191 = "sway-lib-std/src/revert.sw"
!192 = span !191 757 771
!193 = (!182 !183 !189 !190 !192)
!194 = span !133 426 429
!195 = span !133 430 431
!196 = span !133 426 432
!197 = span !133 433 434
!198 = span !133 420 503
!199 = span !133 426 434
!200 = span !133 445 473
!201 = fn_call_path_span !133 445 473
!202 = (!200 !201)
!203 = span !133 507 511
!204 = span !133 420 511
!205 = fn_call_path_span !133 504 506
!206 = (!204 !205)
!207 = span !133 413 512
!208 = fn_call_path_span !133 413 419
!209 = (!207 !208 !185 !186)
!210 = (!207 !208 !185)
!211 = (!207 !208 !189 !190 !192)
!212 = span !133 535 538
!213 = span !133 539 540
!214 = span !133 535 541
!215 = span !133 542 543
!216 = span !133 282 293
!217 = span !133 549 554
!218 = span !133 519 556
!219 = fn_call_path_span !133 519 525
!220 = (!218 !219 !185 !186)
!221 = (!218 !219 !185)
!222 = (!218 !219 !189 !190 !192)
!223 = span !133 575 578
!224 = span !133 579 580
!225 = span !133 575 581
!226 = span !133 582 583
!227 = span !133 569 652
!228 = span !133 575 583
!229 = span !133 594 622
!230 = fn_call_path_span !133 594 622
!231 = (!229 !230)
!232 = span !133 494 495
!233 = span !133 487 496
!234 = fn_call_path_span !133 487 493
!235 = (!233 !234 !192)
!236 = span !133 656 657
!237 = span !133 569 657
!238 = fn_call_path_span !133 653 655
!239 = (!237 !238)
!240 = span !133 562 658
!241 = fn_call_path_span !133 562 568
!242 = (!240 !241 !185 !186)
!243 = (!240 !241 !185)
!244 = (!240 !241 !189 !190 !192)
!245 = span !133 686 687
!246 = span !133 643 644
!247 = span !133 636 645
!248 = fn_call_path_span !133 636 642
!249 = (!247 !248 !192)
!250 = span !4 83026 83167
!251 = fn_name_span !4 83033 83039
!252 = inline "never"
!253 = (!250 !251 !252)
!254 = span !4 83108 83112
!255 = span !4 83108 83138
!256 = fn_call_path_span !4 83113 83123
!257 = (!255 !256)
!258 = span !4 27568 27574
!259 = (!255 !256 !258)
!260 = span !4 27551 27575
!261 = (!255 !256 !260)
!262 = span !4 27596 27597
!263 = span !4 27617 27618
!264 = span !4 27613 27618
!265 = fn_call_path_span !4 27615 27616
!266 = (!255 !256 !264 !265)
!267 = span !4 27642 27646
!268 = (!255 !256 !267)
!269 = span !4 27642 27649
!270 = (!255 !256 !269)
!271 = span !4 27661 27667
!272 = (!255 !256 !271)
!273 = span !4 27642 27668
!274 = fn_call_path_span !4 27650 27660
!275 = (!255 !256 !273 !274)
!276 = (!255 !256 !273 !274)
!277 = span !4 53521 53525
!278 = (!255 !256 !273 !274 !277)
!279 = span !4 53526 53527
!280 = (!255 !256 !273 !274 !279)
!281 = span !4 53539 53545
!282 = (!255 !256 !273 !274 !281)
!283 = span !4 53521 53546
!284 = fn_call_path_span !4 53528 53538
!285 = (!255 !256 !273 !274 !283 !284)
!286 = (!255 !256 !273 !274 !283 !284)
!287 = span !0 332 336
!288 = (!255 !256 !273 !274 !283 !284 !287)
!289 = (!255 !256 !273 !274 !283 !284 !216)
!290 = span !0 352 358
!291 = (!255 !256 !273 !274 !283 !284 !290)
!292 = span !0 332 359
!293 = fn_call_path_span !0 341 351
!294 = (!255 !256 !273 !274 !283 !284 !292 !293)
!295 = (!255 !256 !273 !274 !283 !284 !292 !293)
!296 = span !4 7833 7839
!297 = (!255 !256 !273 !274 !283 !284 !292 !293 !296)
!298 = span !4 87 114
!299 = (!255 !256 !273 !274 !283 !284 !292 !293 !298)
!300 = (!255 !256 !273 !274 !283 !284 !292 !293)
!301 = (!255 !256 !273 !274 !283 !284 !292 !293)
!302 = (!255 !256 !273 !274 !283 !284 !292 !293)
!303 = (!255 !256 !273 !274 !283 !284 !292 !293)
!304 = (!255 !256 !273 !274 !283 !284 !292 !293)
!305 = (!255 !256 !273 !274 !283 !284 !292 !293)
!306 = (!255 !256 !273 !274 !283 !284 !292 !293)
!307 = span !4 7848 7852
!308 = (!255 !256 !273 !274 !283 !284 !292 !293 !307)
!309 = (!255 !256 !273 !274 !283 !284 !292 !293)
!310 = (!255 !256 !273 !274 !283 !284 !292 !293)
!311 = (!255 !256 !273 !274 !283 !284 !292 !293)
!312 = (!255 !256 !273 !274 !283 !284 !292 !293)
!313 = (!255 !256 !273 !274 !283 !284 !292 !293)
!314 = (!255 !256 !273 !274 !283 !284 !292 !293)
!315 = (!255 !256 !273 !274 !283 !284 !292 !293)
!316 = (!255 !256 !273 !274 !283 !284 !292 !293)
!317 = (!255 !256 !273 !274 !283 !284 !292 !293)
!318 = (!255 !256 !273 !274 !283 !284 !292 !293)
!319 = (!255 !256 !273 !274 !283 !284 !292 !293)
!320 = (!255 !256 !273 !274 !283 !284 !292 !293)
!321 = (!255 !256 !273 !274 !283 !284 !292 !293)
!322 = (!255 !256 !273 !274 !283 !284 !292 !293)
!323 = span !4 7781 7864
!324 = (!255 !256 !273 !274 !283 !284 !292 !293 !323)
!325 = (!255 !256 !273 !274 !283 !284 !292 !293)
!326 = span !0 319 360
!327 = (!255 !256 !273 !274 !283 !284 !326)
!328 = span !0 382 388
!329 = (!255 !256 !273 !274 !283 !284 !328)
!330 = span !4 53508 53547
!331 = (!255 !256 !273 !274 !330)
!332 = span !4 53569 53573
!333 = (!255 !256 !273 !274 !332)
!334 = span !4 53574 53575
!335 = (!255 !256 !273 !274 !334)
!336 = span !4 53587 53593
!337 = (!255 !256 !273 !274 !336)
!338 = span !4 53569 53594
!339 = fn_call_path_span !4 53576 53586
!340 = (!255 !256 !273 !274 !338 !339)
!341 = (!255 !256 !273 !274 !338 !339)
!342 = span !0 344 348
!343 = (!255 !256 !273 !274 !338 !339 !342)
!344 = span !0 338 777
!345 = (!255 !256 !273 !274 !338 !339 !344)
!346 = (!255 !256 !273 !274 !338 !339 !342)
!347 = (!255 !256 !273 !274 !338 !339 !342)
!348 = (!255 !256 !273 !274 !338 !339)
!349 = span !0 351 561
!350 = fn_call_path_span !0 351 561
!351 = (!255 !256 !273 !274 !338 !339 !349 !350)
!352 = (!255 !256 !273 !274 !338 !339 !349)
!353 = (!255 !256 !273 !274 !283 !284 !292 !293)
!354 = (!255 !256 !273 !274 !283 !284 !292 !293)
!355 = (!255 !256 !273 !274 !283 !284 !292 !293)
!356 = (!255 !256 !273 !274 !283 !284 !292 !293)
!357 = (!255 !256 !273 !274 !338 !339 !342)
!358 = (!255 !256 !273 !274 !338 !339)
!359 = (!255 !256 !273 !274 !338 !339)
!360 = span !0 436 442
!361 = (!255 !256 !273 !274 !338 !339 !360)
!362 = span !0 420 424
!363 = span !0 407 444
!364 = (!255 !256 !273 !274 !338 !339 !363)
!365 = span !0 499 505
!366 = (!255 !256 !273 !274 !338 !339 !365)
!367 = span !0 469 507
!368 = (!255 !256 !273 !274 !338 !339 !367)
!369 = span !0 532 538
!370 = (!255 !256 !273 !274 !338 !339 !369)
!371 = (!255 !256 !273 !274 !338 !339)
!372 = (!255 !256 !273 !274 !338 !339 !342)
!373 = (!255 !256 !273 !274 !338 !339 !342)
!374 = (!255 !256 !273 !274 !338 !339)
!375 = span !0 563 773
!376 = fn_call_path_span !0 563 773
!377 = (!255 !256 !273 !274 !338 !339 !375 !376)
!378 = (!255 !256 !273 !274 !338 !339 !375)
!379 = (!255 !256 !273 !274 !338 !339 !342)
!380 = (!255 !256 !273 !274 !338 !339)
!381 = (!255 !256 !273 !274 !338 !339)
!382 = span !0 648 654
!383 = (!255 !256 !273 !274 !338 !339 !382)
!384 = span !0 632 636
!385 = span !0 619 656
!386 = (!255 !256 !273 !274 !338 !339 !385)
!387 = span !0 711 717
!388 = (!255 !256 !273 !274 !338 !339 !387)
!389 = span !0 681 719
!390 = (!255 !256 !273 !274 !338 !339 !389)
!391 = span !0 744 750
!392 = (!255 !256 !273 !274 !338 !339 !391)
!393 = (!255 !256 !273 !274 !338 !339)
!394 = (!255 !256 !273 !274 !338 !339 !344)
!395 = span !0 325 778
!396 = (!255 !256 !273 !274 !338 !339 !395)
!397 = span !0 799 805
!398 = (!255 !256 !273 !274 !338 !339 !397)
!399 = span !4 53556 53595
!400 = (!255 !256 !273 !274 !399)
!401 = span !4 53604 53610
!402 = (!255 !256 !273 !274 !401)
!403 = span !4 27633 27668
!404 = (!255 !256 !403)
!405 = span !4 27687 27688
!406 = span !4 27682 27688
!407 = fn_call_path_span !4 27684 27686
!408 = (!255 !256 !406 !407)
!409 = span !4 27709 27715
!410 = (!255 !256 !409)
!411 = span !4 83095 83139
!412 = span !4 83144 83150
!413 = span !4 1643 1647
!414 = span !4 1629 1774
!415 = fn_name_span !4 1632 1642
!416 = (!414 !415)
!417 = span !4 1737 1743
!418 = span !4 1685 1768
!419 = span !4 160 260
!420 = fn_name_span !4 167 170
!421 = (!419 !420)
!422 = span !4 191 254
!423 = span !4 499 591
!424 = fn_name_span !4 502 514
!425 = (!423 !424)
!426 = span !4 573 577
!427 = span !133 50 202
!428 = fn_name_span !133 53 61
!429 = (!427 !428)
!430 = span !133 107 117
!431 = fn_call_path_span !133 109 115
!432 = (!430 !431)
!433 = "sway-lib-std/src/str.sw"
!434 = span !433 153 157
!435 = (!430 !431 !434)
!436 = span !433 131 201
!437 = (!430 !431 !436)
!438 = (!430 !431 !436)
!439 = (!430 !431 !436)
!440 = span !133 130 131
!441 = span !133 148 149
!442 = span !133 123 200
!443 = span !133 164 177

;; ASM: Final program
;; Program kind: Script
.program:
move $$tmp $pc
jmpf $zero i4
DATA_SECTION_OFFSET[0..32]
DATA_SECTION_OFFSET[32..64]
CONFIGURABLES_OFFSET[0..32]
CONFIGURABLES_OFFSET[32..64]
lw   $$ds $$tmp i1
add  $$ds $$ds $$tmp
cfei i0                       ; allocate stack space for globals
move $$locbase $sp            ; save locals base register for function __entry
cfei i304                     ; allocate 304 bytes for locals and 0 slots for call arguments
gtf  $r0 $zero i10            ; get transaction field
sw   $$locbase $r0 i0         ; store word
addi $r0 $$locbase i264       ; get offset to local __ptr { ptr }
mcpi $r0 $$locbase i8         ; copy memory
addi $r2 $$locbase i264       ; get offset to local __ptr { ptr }
addi $r0 $$locbase i56        ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i48           ; [call]: call decode_4
addi $r1 $$locbase i272       ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
mcpi $r1 $r0 i24              ; copy memory
addi $r1 $$locbase i8         ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
addi $r3 $$locbase i272       ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
movi $r0 i24                  ; get array element size
mul  $r0 $zero $r0            ; get offset to array element
add  $r0 $r1 $r0              ; add array element offset to array base
mcpi $r0 $r3 i24              ; copy memory
movi $r0 i24                  ; get array element size
mul  $r0 $one $r0             ; get offset to array element
add  $r0 $r1 $r0              ; add array element offset to array base
mcpi $r0 $r3 i24              ; copy memory
addi $r0 $$locbase i216       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
mcpi $r0 $r1 i48              ; copy memory
move $r4 $one                 ; move parameter from branch to block argument
movi $r0 i2                   ; initialize constant into register
lt   $r0 $r4 $r0
jnzf $r0 $zero i18
addi $r0 $$locbase i216       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
addi $r1 $$locbase i168       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
mcpi $r1 $r0 i48              ; copy memory
addi $r0 $$locbase i168       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
addi $r1 $$locbase i112       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
mcpi $r1 $r0 i48              ; copy memory
addi $r0 $$locbase i104       ; get offset to local __ptr { u64 }
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i101          ; [call]: call main_19
addi $r1 $$locbase i160       ; get offset to local __ptr { u64 }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i160       ; get offset to local __ptr { u64 }
addi $r1 $$locbase i296       ; get offset to local __ptr { u64 }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i296       ; get offset to local __ptr { u64 }
movi $r1 i8                   ; initialize constant into register
retd  $r0 $r1
addi $r0 $$locbase i80        ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
move $$arg0 $r2               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i8            ; [call]: call decode_4
addi $r1 $$locbase i216       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
movi $r3 i24                  ; get array element size
mul  $r3 $r4 $r3              ; get offset to array element
add  $r3 $r1 $r3              ; add array element offset to array base
mcpi $r3 $r0 i24              ; copy memory
add  $r4 $r4 $one
jmpb $zero i30
pshl i255                     ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function decode_4
cfei i216                     ; allocate 216 bytes for locals and 0 slots for call arguments
move $r7 $$arg0               ; save argument 0 (self)
move $r6 $$arg1               ; save argument 1 (__ret_value)
move $r5 $$reta               ; save return address
addi $r0 $$locbase i72        ; get offset to local __ptr { ptr, u64 }
mcpi $r0 $$arg0 i8            ; copy memory
movi $r1 i3                   ; initialize constant into register
sw   $$locbase $r1 i10        ; store word
mcpi $$locbase $r0 i16        ; copy memory
addi $r0 $$locbase i184       ; get offset to local __ptr slice
mcpi $r0 $$locbase i16        ; copy memory
lw   $r0 $r7 i0               ; load word
movi $r1 i3                   ; initialize constant into register
add  $r0 $r0 $r1
sw   $r7 $r0 i0               ; store word
addi $r0 $$locbase i184       ; get offset to local __ptr slice
addi $r1 $$locbase i152       ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i152       ; get offset to local __ptr slice
addi $r1 $$locbase i168       ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i168       ; get offset to local __ptr slice
addi $r1 $$locbase i200       ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i200       ; get offset to local __ptr slice
addi $r1 $$locbase i16        ; get offset to local __ptr { ptr, u64 }
mcpi $r1 $r0 i16              ; copy memory
addi $r0 $$locbase i104       ; get offset to local __ptr { ptr, u64 }
mcpi $r0 $r1 i16              ; copy memory
lw   $r0 $$locbase i13        ; load word
addi $r1 $$locbase i32        ; get offset to local __ptr string<3>
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $$locbase i64        ; get offset to local __ptr { string<3> }
mcpi $r0 $r1 i8               ; copy memory
lw   $r1 $r7 i0               ; load word
lw   $r1 $r1 i0               ; lw val ptr i0
lw   $r2 $r7 i0               ; load word
movi $r3 i8                   ; initialize constant into register
add  $r2 $r2 $r3
sw   $r7 $r2 i0               ; store word
eq   $r2 $r1 $zero
jnzf $r2 $zero i15
eq   $r1 $r1 $one
jnzf $r1 $zero i1
rvrt $zero
addi $r1 $$locbase i120       ; get offset to local __ptr { u64, ( u64 | u64 ) }
sw   $$locbase $one i15       ; store word
lw   $r2 $r7 i0               ; load word
lw   $r2 $r2 i0               ; lw val ptr i0
lw   $r3 $r7 i0               ; load word
movi $r4 i8                   ; initialize constant into register
add  $r3 $r3 $r4
sw   $r7 $r3 i0               ; store word
sw   $$locbase $r2 i16        ; store word
addi $r2 $$locbase i136       ; get offset to local __ptr { u64, ( u64 | u64 ) }
mcpi $r2 $r1 i16              ; copy memory
jmpf $zero i11
addi $r1 $$locbase i88        ; get offset to local __ptr { u64, ( u64 | u64 ) }
sw   $$locbase $zero i11      ; store word
lw   $r2 $r7 i0               ; load word
lw   $r2 $r2 i0               ; lw val ptr i0
lw   $r3 $r7 i0               ; load word
movi $r4 i8                   ; initialize constant into register
add  $r3 $r3 $r4
sw   $r7 $r3 i0               ; store word
sw   $$locbase $r2 i12        ; store word
addi $r2 $$locbase i136       ; get offset to local __ptr { u64, ( u64 | u64 ) }
mcpi $r2 $r1 i16              ; copy memory
addi $r1 $$locbase i40        ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
mcpi $r1 $r0 i8               ; copy memory
addi $r0 $r1 i8               ; get offset to aggregate element
mcpi $r0 $r2 i16              ; copy memory
mcpi $r6 $r1 i24              ; copy memory
cfsi i216                     ; free 216 bytes for locals and 0 slots for extra call arguments
move $$reta $r5               ; restore return address
poph i524288                  ; restore registers 40..64
popl i255                     ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i63                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function main_19
cfei i176                     ; allocate 176 bytes for locals and 0 slots for call arguments
move $r5 $$arg0               ; save argument 0 (ops)
move $r4 $$arg1               ; save argument 1 (__ret_value)
move $r3 $$reta               ; save return address
addi $r0 $$locbase i128       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
mcpi $r0 $$arg0 i48           ; copy memory
addi $r0 $$locbase i112       ; get offset to local __ptr slice
move $$arg0 $r5               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i88           ; [call]: call encode_20
addi $r1 $$locbase i64        ; get offset to local __ptr slice
mcpi $r1 $r0 i16              ; copy memory
load $r0 data_NonConfigurable_0; load constant from data section
lw   $r1 $$locbase i8         ; load slice pointer for logging data
lw   $r2 $$locbase i9         ; load slice size for logging data
logd $zero $r0 $r1 $r2        ; log slice
addr $r0 data_NonConfigurable_1; get __const_global's address in data section
sw   $$locbase $r0 i0         ; store word
movi $r0 i3                   ; initialize constant into register
sw   $$locbase $r0 i1         ; store word
addi $r0 $$locbase i16        ; get offset to local __ptr slice
mcpi $r0 $$locbase i16        ; copy memory
movi $r0 i24                  ; get array element size
mul  $r0 $zero $r0            ; get offset to array element
add  $r0 $r5 $r0              ; add array element offset to array base
addi $r1 $$locbase i16        ; get offset to local __ptr slice
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r1               ; [call]: pass argument 1
jal  $$reta $pc i329          ; [call]: call eq_str_3_32
eq   $r0 $$retv $zero
jnzf $r0 $zero i58
addi $r0 $$locbase i128       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
movi $r1 i24                  ; get array element size
mul  $r1 $zero $r1            ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
addi $r0 $r1 i8               ; get offset to aggregate element
addi $r1 $$locbase i80        ; get offset to local __ptr { u64, ( u64 | u64 ) }
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i10        ; load word
eq   $r0 $r0 $zero
jnzf $r0 $zero i1
rvrt $one
lw   $r0 $$locbase i11        ; load word
movi $r1 i1338                ; initialize constant into register
eq   $r0 $r0 $r1
eq   $r0 $r0 $zero
jnzf $r0 $zero i40
addi $r0 $$locbase i128       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
movi $r1 i24                  ; get array element size
mul  $r1 $one $r1             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
addr $r0 data_NonConfigurable_2; get __const_global0's address in data section
addi $r2 $$locbase i32        ; get offset to local __ptr { ptr, u64 }
sw   $$locbase $r0 i4         ; store word
movi $r0 i3                   ; initialize constant into register
sw   $$locbase $r0 i5         ; store word
addi $r0 $$locbase i48        ; get offset to local __ptr slice
mcpi $r0 $r2 i16              ; copy memory
addi $r0 $$locbase i48        ; get offset to local __ptr slice
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i295          ; [call]: call eq_str_3_32
eq   $r0 $$retv $zero
jnzf $r0 $zero i20
addi $r0 $$locbase i128       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
movi $r1 i24                  ; get array element size
mul  $r1 $one $r1             ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
addi $r0 $r1 i8               ; get offset to aggregate element
addi $r1 $$locbase i96        ; get offset to local __ptr { u64, ( u64 | u64 ) }
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i12        ; load word
eq   $r0 $r0 $one
jnzf $r0 $zero i2
movi $r0 i2                   ; initialize constant into register
rvrt $r0
lw   $r0 $$locbase i13        ; load word
eq   $r0 $r0 $one
eq   $r0 $r0 $zero
jnzf $r0 $zero i2
sw   $r4 $one i0              ; store word
jmpf $zero i8
load $r0 data_NonConfigurable_3; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_3; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_3; load constant from data section
rvrt $r0
load $r0 data_NonConfigurable_3; load constant from data section
rvrt $r0
cfsi i176                     ; free 176 bytes for locals and 0 slots for extra call arguments
move $$reta $r3               ; restore return address
poph i524288                  ; restore registers 40..64
popl i63                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i511                     ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function encode_20
cfei i936                     ; allocate 936 bytes for locals and 0 slots for call arguments
move $r5 $$arg1               ; save argument 1 (__ret_value)
move $r4 $$reta               ; save return address
addi $r0 $$locbase i784       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
mcpi $r0 $$arg0 i48           ; copy memory
addi $r0 $$locbase i784       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
addi $r1 $$locbase i240       ; get offset to local __ptr { { ptr, u64, u64 } }
move $$arg0 $r1               ; [call]: pass argument 0
jal  $$reta $pc i208          ; [call]: call new_27
addi $r2 $$locbase i832       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
mcpi $r2 $r0 i48              ; copy memory
addi $r0 $$locbase i448       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i448       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i568       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
move $r8 $zero                ; move parameter from branch to block argument
movi $r0 i2                   ; initialize constant into register
lt   $r0 $r8 $r0
jnzf $r0 $zero i12
addi $r0 $$locbase i568       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i424       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i424       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i376       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i264       ; get offset to local __ptr slice
move $$arg0 $r1               ; [call]: pass argument 0
move $$arg1 $r0               ; [call]: pass argument 1
jal  $$reta $pc i209          ; [call]: call as_raw_slice_28
mcpi $r5 $r0 i16              ; copy memory
jmpf $zero i135
addi $r0 $$locbase i832       ; get offset to local __ptr [{ { string<3> }, { u64, ( u64 | u64 ) } }; 2]
movi $r1 i24                  ; get array element size
mul  $r1 $r8 $r1              ; get offset to array element
add  $r1 $r0 $r1              ; add array element offset to array base
addi $r0 $$locbase i568       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i896       ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i472       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i896       ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
addi $r1 $$locbase i472       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i880       ; get offset to local __ptr { string<3> }
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i496       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i880       ; get offset to local __ptr { string<3> }
addi $r1 $$locbase i496       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i888       ; get offset to local __ptr string<3>
mcpi $r2 $r0 i8               ; copy memory
addi $r0 $$locbase i520       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i520       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $$locbase $r0 i24        ; copy memory
addi $r0 $$locbase i48        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r0 $$locbase i24        ; copy memory
lw   $r0 $$locbase i6         ; load word
lw   $r7 $$locbase i7         ; load word
lw   $r1 $$locbase i8         ; load word
addi $r2 $$locbase i888       ; get offset to local __ptr string<3>
movi $r3 i3                   ; initialize constant into register
add  $r3 $r1 $r3
gt   $r6 $r3 $r7
jnzf $r6 $zero i1
jmpf $zero i7
movi $r6 i2                   ; initialize constant into register
mul  $r6 $r7 $r6
movi $r7 i3                   ; initialize constant into register
add  $r7 $r6 $r7
aloc $r7
mcp  $hp $r0 $r1
move $r0 $hp                  ; move parameter from branch to block argument
addi $r6 $$locbase i72        ; get offset to local __ptr string<3>
mcpi $r6 $r2 i8               ; copy memory
add  $r1 $r0 $r1
mcpi $r1 $r6 i3               ; copy memory
addi $r1 $$locbase i80        ; get offset to local __ptr { ptr, u64, u64 }
sw   $$locbase $r0 i10        ; store word
sw   $$locbase $r7 i11        ; store word
sw   $$locbase $r3 i12        ; store word
addi $r0 $$locbase i24        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r0 $r1 i24              ; copy memory
addi $r1 $$locbase i104       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i616       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i616       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i592       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i896       ; get offset to local __ptr { { string<3> }, { u64, ( u64 | u64 ) } }
addi $r0 $r0 i8               ; get offset to aggregate element
addi $r1 $$locbase i592       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i920       ; get offset to local __ptr { u64, ( u64 | u64 ) }
mcpi $r2 $r0 i16              ; copy memory
addi $r0 $$locbase i544       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i920       ; get offset to local __ptr { u64, ( u64 | u64 ) }
addi $r1 $$locbase i128       ; get offset to local __ptr { u64, ( u64 | u64 ) }
mcpi $r1 $r0 i16              ; copy memory
lw   $r0 $$locbase i16        ; load word
eq   $r0 $r0 $zero
jnzf $r0 $zero i30
lw   $r0 $$locbase i16        ; load word
eq   $r0 $r0 $one
jnzf $r0 $zero i2
load $r0 data_NonConfigurable_4; load constant from data section
rvrt $r0
lw   $r0 $$locbase i17        ; load word
addi $r1 $$locbase i544       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i328       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i192       ; get offset to local __ptr { { ptr, u64, u64 } }
move $$arg0 $one              ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i56           ; [call]: call abi_encode_26
addi $r2 $$locbase i712       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i712       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i352       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i216       ; get offset to local __ptr { { ptr, u64, u64 } }
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i46           ; [call]: call abi_encode_26
addi $r0 $$locbase i736       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i736       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i400       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
jmpf $zero i24
lw   $r0 $$locbase i17        ; load word
addi $r1 $$locbase i544       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i280       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i144       ; get offset to local __ptr { { ptr, u64, u64 } }
move $$arg0 $zero             ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i31           ; [call]: call abi_encode_26
addi $r2 $$locbase i640       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i640       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r2 $$locbase i304       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $r1 i24              ; copy memory
addi $r1 $$locbase i168       ; get offset to local __ptr { { ptr, u64, u64 } }
move $$arg0 $r0               ; [call]: pass argument 0
move $$arg1 $r2               ; [call]: pass argument 1
move $$arg2 $r1               ; [call]: pass argument 2
jal  $$reta $pc i21           ; [call]: call abi_encode_26
addi $r0 $$locbase i688       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i688       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i400       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i760       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r1 i24              ; copy memory
addi $r0 $$locbase i760       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i664       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
addi $r0 $$locbase i664       ; get offset to local __ptr { { ptr, u64, u64 } }
addi $r1 $$locbase i568       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r1 $r0 i24              ; copy memory
add  $r8 $r8 $one
jmpb $zero i148
cfsi i936                     ; free 936 bytes for locals and 0 slots for extra call arguments
move $$reta $r4               ; restore return address
poph i524288                  ; restore registers 40..64
popl i511                     ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i255                     ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function abi_encode_26
cfei i144                     ; allocate 144 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (self)
move $r1 $$arg2               ; save argument 2 (__ret_value)
move $r2 $$reta               ; save return address
addi $r3 $$locbase i120       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r3 $$arg1 i24           ; copy memory
addi $r3 $$locbase i120       ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $$locbase $r3 i24        ; copy memory
addi $r3 $$locbase i48        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r3 $$locbase i24        ; copy memory
lw   $r3 $$locbase i6         ; load word
lw   $r7 $$locbase i7         ; load word
lw   $r4 $$locbase i8         ; load word
movi $r5 i8                   ; initialize constant into register
add  $r5 $r4 $r5
gt   $r6 $r5 $r7
jnzf $r6 $zero i1
jmpf $zero i7
movi $r6 i2                   ; initialize constant into register
mul  $r6 $r7 $r6
movi $r7 i8                   ; initialize constant into register
add  $r7 $r6 $r7
aloc $r7
mcp  $hp $r3 $r4
move $r3 $hp                  ; move parameter from branch to block argument
add  $r4 $r3 $r4
sw   $r4 $r0 i0               ; store word
addi $r0 $$locbase i72        ; get offset to local __ptr { ptr, u64, u64 }
sw   $$locbase $r3 i9         ; store word
sw   $$locbase $r7 i10        ; store word
sw   $$locbase $r5 i11        ; store word
addi $r3 $$locbase i24        ; get offset to local __ptr { ptr, u64, u64 }
mcpi $r3 $r0 i24              ; copy memory
addi $r0 $$locbase i96        ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r0 $r3 i24              ; copy memory
mcpi $r1 $r0 i24              ; copy memory
cfsi i144                     ; free 144 bytes for locals and 0 slots for extra call arguments
move $$reta $r2               ; restore return address
poph i524288                  ; restore registers 40..64
popl i255                     ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function new_27
cfei i72                      ; allocate 72 bytes for locals and 0 slots for call arguments
move $r0 $$arg0               ; save argument 0 (__ret_value)
move $r1 $$reta               ; save return address
movi $r2 i1024                ; initialize constant into register
aloc $r2
addi $r2 $$locbase i24        ; get offset to local __ptr { ptr, u64, u64 }
sw   $$locbase $hp i3         ; store word
movi $r3 i1024                ; initialize constant into register
sw   $$locbase $r3 i4         ; store word
sw   $$locbase $zero i5       ; store word
mcpi $$locbase $r2 i24        ; copy memory
addi $r2 $$locbase i48        ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $$locbase i24        ; copy memory
mcpi $r0 $r2 i24              ; copy memory
cfsi i72                      ; free 72 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i31                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function as_raw_slice_28
cfei i56                      ; allocate 56 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (__ret_value)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i32        ; get offset to local __ptr { { ptr, u64, u64 } }
mcpi $r2 $$arg0 i24           ; copy memory
lw   $r2 $$locbase i4         ; load word
lw   $r3 $$locbase i6         ; load word
addi $r4 $$locbase i16        ; get offset to local __ptr { ptr, u64 }
sw   $$locbase $r2 i2         ; store word
sw   $$locbase $r3 i3         ; store word
mcpi $$locbase $r4 i16        ; copy memory
mcpi $r0 $$locbase i16        ; copy memory
cfsi i56                      ; free 56 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i31                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
pshl i15                      ; save registers 16..40
pshh i524288                  ; save registers 40..64
move $$locbase $sp            ; save locals base register for function eq_str_3_32
cfei i40                      ; allocate 40 bytes for locals and 0 slots for call arguments
move $r0 $$arg1               ; save argument 1 (b)
move $r1 $$reta               ; save return address
addi $r2 $$locbase i16        ; get offset to local __ptr string<3>
mcpi $r2 $$arg0 i8            ; copy memory
addi $r2 $$locbase i24        ; get offset to local __ptr slice
mcpi $r2 $r0 i16              ; copy memory
lw   $r0 $$locbase i3         ; load word
lw   $r2 $$locbase i4         ; load word
sw   $$locbase $r0 i0         ; store word
sw   $$locbase $r2 i1         ; store word
lw   $r0 $$locbase i0         ; load word
addi $r2 $$locbase i16        ; get offset to local __ptr string<3>
movi $r3 i3                   ; initialize constant into register
meq  $r0 $r2 $r0 $r3          ; meq r a b len
move $$retv $r0               ; set return value
cfsi i40                      ; free 40 bytes for locals and 0 slots for extra call arguments
move $$reta $r1               ; restore return address
poph i524288                  ; restore registers 40..64
popl i15                      ; restore registers 16..40
jal  $zero $$reta i0          ; return from call
.data:
data_NonConfigurable_0 .word 3647243719605075626
data_NonConfigurable_1 .bytes[3] 73 65 74  set
data_NonConfigurable_2 .bytes[3] 61 64 64  add
data_NonConfigurable_3 .word 18446744073709486084
data_NonConfigurable_4 .word 14757395258967588866


;; --- START OF TARGET BYTECODE ---

0x00000000 MOVE R60 $pc                                    ;; [26, 240, 48, 0]
0x00000004 JMPF $zero 0x4                                  ;; [116, 0, 0, 4]
0x00000008                                                 ;; [0, 0, 0, 0, 0, 0, 8, 80]
0x00000010                                                 ;; [0, 0, 0, 0, 0, 0, 0, 0]
0x00000018 LW R63 R60 0x1                                  ;; [93, 255, 192, 1]
0x0000001c ADD R63 R63 R60                                 ;; [16, 255, 255, 0]
0x00000020 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000024 CFEI 0x130                                      ;; [145, 0, 1, 48]
0x00000028 GTF $writable $zero 0xa                         ;; [97, 64, 0, 10]
0x0000002c SW R59 $writable 0x0                            ;; [95, 237, 0, 0]
0x00000030 ADDI $writable R59 0x108                        ;; [80, 67, 177, 8]
0x00000034 MCPI $writable R59 0x8                          ;; [96, 67, 176, 8]
0x00000038 ADDI R18 R59 0x108                              ;; [80, 75, 177, 8]
0x0000003c ADDI $writable R59 0x38                         ;; [80, 67, 176, 56]
0x00000040 MOVE R58 R18                                    ;; [26, 233, 32, 0]
0x00000044 MOVE R57 $writable                              ;; [26, 229, 0, 0]
0x00000048 JAL R62 $pc 0x30                                ;; [153, 248, 48, 48]
0x0000004c ADDI R17 R59 0x110                              ;; [80, 71, 177, 16]
0x00000050 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000054 ADDI R17 R59 0x8                                ;; [80, 71, 176, 8]
0x00000058 ADDI R19 R59 0x110                              ;; [80, 79, 177, 16]
0x0000005c MOVI $writable 0x18                             ;; [114, 64, 0, 24]
0x00000060 MUL $writable $zero $writable                   ;; [27, 64, 4, 0]
0x00000064 ADD $writable R17 $writable                     ;; [16, 65, 20, 0]
0x00000068 MCPI $writable R19 0x18                         ;; [96, 65, 48, 24]
0x0000006c MOVI $writable 0x18                             ;; [114, 64, 0, 24]
0x00000070 MUL $writable $one $writable                    ;; [27, 64, 20, 0]
0x00000074 ADD $writable R17 $writable                     ;; [16, 65, 20, 0]
0x00000078 MCPI $writable R19 0x18                         ;; [96, 65, 48, 24]
0x0000007c ADDI $writable R59 0xd8                         ;; [80, 67, 176, 216]
0x00000080 MCPI $writable R17 0x30                         ;; [96, 65, 16, 48]
0x00000084 MOVE R20 $one                                   ;; [26, 80, 16, 0]
0x00000088 MOVI $writable 0x2                              ;; [114, 64, 0, 2]
0x0000008c LT $writable R20 $writable                      ;; [22, 65, 68, 0]
0x00000090 JNZF $writable $zero 0x12                       ;; [118, 64, 0, 18]
0x00000094 ADDI $writable R59 0xd8                         ;; [80, 67, 176, 216]
0x00000098 ADDI R17 R59 0xa8                               ;; [80, 71, 176, 168]
0x0000009c MCPI R17 $writable 0x30                         ;; [96, 69, 0, 48]
0x000000a0 ADDI $writable R59 0xa8                         ;; [80, 67, 176, 168]
0x000000a4 ADDI R17 R59 0x70                               ;; [80, 71, 176, 112]
0x000000a8 MCPI R17 $writable 0x30                         ;; [96, 69, 0, 48]
0x000000ac ADDI $writable R59 0x68                         ;; [80, 67, 176, 104]
0x000000b0 MOVE R58 R17                                    ;; [26, 233, 16, 0]
0x000000b4 MOVE R57 $writable                              ;; [26, 229, 0, 0]
0x000000b8 JAL R62 $pc 0x65                                ;; [153, 248, 48, 101]
0x000000bc ADDI R17 R59 0xa0                               ;; [80, 71, 176, 160]
0x000000c0 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x000000c4 ADDI $writable R59 0xa0                         ;; [80, 67, 176, 160]
0x000000c8 ADDI R17 R59 0x128                              ;; [80, 71, 177, 40]
0x000000cc MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x000000d0 ADDI $writable R59 0x128                        ;; [80, 67, 177, 40]
0x000000d4 MOVI R17 0x8                                    ;; [114, 68, 0, 8]
0x000000d8 RETD $writable R17                              ;; [37, 65, 16, 0]
0x000000dc ADDI $writable R59 0x50                         ;; [80, 67, 176, 80]
0x000000e0 MOVE R58 R18                                    ;; [26, 233, 32, 0]
0x000000e4 MOVE R57 $writable                              ;; [26, 229, 0, 0]
0x000000e8 JAL R62 $pc 0x8                                 ;; [153, 248, 48, 8]
0x000000ec ADDI R17 R59 0xd8                               ;; [80, 71, 176, 216]
0x000000f0 MOVI R19 0x18                                   ;; [114, 76, 0, 24]
0x000000f4 MUL R19 R20 R19                                 ;; [27, 77, 68, 192]
0x000000f8 ADD R19 R17 R19                                 ;; [16, 77, 20, 192]
0x000000fc MCPI R19 $writable 0x18                         ;; [96, 77, 0, 24]
0x00000100 ADD R20 R20 $one                                ;; [16, 81, 64, 64]
0x00000104 JMPB $zero 0x1e                                 ;; [117, 0, 0, 30]
0x00000108 PSHL 0xff                                       ;; [149, 0, 0, 255]
0x0000010c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000110 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000114 CFEI 0xd8                                       ;; [145, 0, 0, 216]
0x00000118 MOVE R23 R58                                    ;; [26, 95, 160, 0]
0x0000011c MOVE R22 R57                                    ;; [26, 91, 144, 0]
0x00000120 MOVE R21 R62                                    ;; [26, 87, 224, 0]
0x00000124 ADDI $writable R59 0x48                         ;; [80, 67, 176, 72]
0x00000128 MCPI $writable R58 0x8                          ;; [96, 67, 160, 8]
0x0000012c MOVI R17 0x3                                    ;; [114, 68, 0, 3]
0x00000130 SW R59 R17 0xa                                  ;; [95, 237, 16, 10]
0x00000134 MCPI R59 $writable 0x10                         ;; [96, 237, 0, 16]
0x00000138 ADDI $writable R59 0xb8                         ;; [80, 67, 176, 184]
0x0000013c MCPI $writable R59 0x10                         ;; [96, 67, 176, 16]
0x00000140 LW $writable R23 0x0                            ;; [93, 65, 112, 0]
0x00000144 MOVI R17 0x3                                    ;; [114, 68, 0, 3]
0x00000148 ADD $writable $writable R17                     ;; [16, 65, 4, 64]
0x0000014c SW R23 $writable 0x0                            ;; [95, 93, 0, 0]
0x00000150 ADDI $writable R59 0xb8                         ;; [80, 67, 176, 184]
0x00000154 ADDI R17 R59 0x98                               ;; [80, 71, 176, 152]
0x00000158 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x0000015c ADDI $writable R59 0x98                         ;; [80, 67, 176, 152]
0x00000160 ADDI R17 R59 0xa8                               ;; [80, 71, 176, 168]
0x00000164 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000168 ADDI $writable R59 0xa8                         ;; [80, 67, 176, 168]
0x0000016c ADDI R17 R59 0xc8                               ;; [80, 71, 176, 200]
0x00000170 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000174 ADDI $writable R59 0xc8                         ;; [80, 67, 176, 200]
0x00000178 ADDI R17 R59 0x10                               ;; [80, 71, 176, 16]
0x0000017c MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000180 ADDI $writable R59 0x68                         ;; [80, 67, 176, 104]
0x00000184 MCPI $writable R17 0x10                         ;; [96, 65, 16, 16]
0x00000188 LW $writable R59 0xd                            ;; [93, 67, 176, 13]
0x0000018c ADDI R17 R59 0x20                               ;; [80, 71, 176, 32]
0x00000190 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x00000194 ADDI $writable R59 0x40                         ;; [80, 67, 176, 64]
0x00000198 MCPI $writable R17 0x8                          ;; [96, 65, 16, 8]
0x0000019c LW R17 R23 0x0                                  ;; [93, 69, 112, 0]
0x000001a0 LW R17 R17 0x0                                  ;; [93, 69, 16, 0]
0x000001a4 LW R18 R23 0x0                                  ;; [93, 73, 112, 0]
0x000001a8 MOVI R19 0x8                                    ;; [114, 76, 0, 8]
0x000001ac ADD R18 R18 R19                                 ;; [16, 73, 36, 192]
0x000001b0 SW R23 R18 0x0                                  ;; [95, 93, 32, 0]
0x000001b4 EQ R18 R17 $zero                                ;; [19, 73, 16, 0]
0x000001b8 JNZF R18 $zero 0xf                              ;; [118, 72, 0, 15]
0x000001bc EQ R17 R17 $one                                 ;; [19, 69, 16, 64]
0x000001c0 JNZF R17 $zero 0x1                              ;; [118, 68, 0, 1]
0x000001c4 RVRT $zero                                      ;; [54, 0, 0, 0]
0x000001c8 ADDI R17 R59 0x78                               ;; [80, 71, 176, 120]
0x000001cc SW R59 $one 0xf                                 ;; [95, 236, 16, 15]
0x000001d0 LW R18 R23 0x0                                  ;; [93, 73, 112, 0]
0x000001d4 LW R18 R18 0x0                                  ;; [93, 73, 32, 0]
0x000001d8 LW R19 R23 0x0                                  ;; [93, 77, 112, 0]
0x000001dc MOVI R20 0x8                                    ;; [114, 80, 0, 8]
0x000001e0 ADD R19 R19 R20                                 ;; [16, 77, 53, 0]
0x000001e4 SW R23 R19 0x0                                  ;; [95, 93, 48, 0]
0x000001e8 SW R59 R18 0x10                                 ;; [95, 237, 32, 16]
0x000001ec ADDI R18 R59 0x88                               ;; [80, 75, 176, 136]
0x000001f0 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x000001f4 JMPF $zero 0xb                                  ;; [116, 0, 0, 11]
0x000001f8 ADDI R17 R59 0x58                               ;; [80, 71, 176, 88]
0x000001fc SW R59 $zero 0xb                                ;; [95, 236, 0, 11]
0x00000200 LW R18 R23 0x0                                  ;; [93, 73, 112, 0]
0x00000204 LW R18 R18 0x0                                  ;; [93, 73, 32, 0]
0x00000208 LW R19 R23 0x0                                  ;; [93, 77, 112, 0]
0x0000020c MOVI R20 0x8                                    ;; [114, 80, 0, 8]
0x00000210 ADD R19 R19 R20                                 ;; [16, 77, 53, 0]
0x00000214 SW R23 R19 0x0                                  ;; [95, 93, 48, 0]
0x00000218 SW R59 R18 0xc                                  ;; [95, 237, 32, 12]
0x0000021c ADDI R18 R59 0x88                               ;; [80, 75, 176, 136]
0x00000220 MCPI R18 R17 0x10                               ;; [96, 73, 16, 16]
0x00000224 ADDI R17 R59 0x28                               ;; [80, 71, 176, 40]
0x00000228 MCPI R17 $writable 0x8                          ;; [96, 69, 0, 8]
0x0000022c ADDI $writable R17 0x8                          ;; [80, 65, 16, 8]
0x00000230 MCPI $writable R18 0x10                         ;; [96, 65, 32, 16]
0x00000234 MCPI R22 R17 0x18                               ;; [96, 89, 16, 24]
0x00000238 CFSI 0xd8                                       ;; [146, 0, 0, 216]
0x0000023c MOVE R62 R21                                    ;; [26, 249, 80, 0]
0x00000240 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000244 POPL 0xff                                       ;; [151, 0, 0, 255]
0x00000248 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x0000024c PSHL 0x3f                                       ;; [149, 0, 0, 63]
0x00000250 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000254 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000258 CFEI 0xb0                                       ;; [145, 0, 0, 176]
0x0000025c MOVE R21 R58                                    ;; [26, 87, 160, 0]
0x00000260 MOVE R20 R57                                    ;; [26, 83, 144, 0]
0x00000264 MOVE R19 R62                                    ;; [26, 79, 224, 0]
0x00000268 ADDI $writable R59 0x80                         ;; [80, 67, 176, 128]
0x0000026c MCPI $writable R58 0x30                         ;; [96, 67, 160, 48]
0x00000270 ADDI $writable R59 0x70                         ;; [80, 67, 176, 112]
0x00000274 MOVE R58 R21                                    ;; [26, 233, 80, 0]
0x00000278 MOVE R57 $writable                              ;; [26, 229, 0, 0]
0x0000027c JAL R62 $pc 0x58                                ;; [153, 248, 48, 88]
0x00000280 ADDI R17 R59 0x40                               ;; [80, 71, 176, 64]
0x00000284 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000288 LW $writable R63 0x0                            ;; [93, 67, 240, 0]
0x0000028c LW R17 R59 0x8                                  ;; [93, 71, 176, 8]
0x00000290 LW R18 R59 0x9                                  ;; [93, 75, 176, 9]
0x00000294 LOGD $zero $writable R17 R18                    ;; [52, 1, 4, 82]
0x00000298 MOVI $writable 0x8                              ;; [114, 64, 0, 8]
0x0000029c ADD $writable $writable R63                     ;; [16, 65, 15, 192]
0x000002a0 SW R59 $writable 0x0                            ;; [95, 237, 0, 0]
0x000002a4 MOVI $writable 0x3                              ;; [114, 64, 0, 3]
0x000002a8 SW R59 $writable 0x1                            ;; [95, 237, 0, 1]
0x000002ac ADDI $writable R59 0x10                         ;; [80, 67, 176, 16]
0x000002b0 MCPI $writable R59 0x10                         ;; [96, 67, 176, 16]
0x000002b4 MOVI $writable 0x18                             ;; [114, 64, 0, 24]
0x000002b8 MUL $writable $zero $writable                   ;; [27, 64, 4, 0]
0x000002bc ADD $writable R21 $writable                     ;; [16, 65, 84, 0]
0x000002c0 ADDI R17 R59 0x10                               ;; [80, 71, 176, 16]
0x000002c4 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000002c8 MOVE R57 R17                                    ;; [26, 229, 16, 0]
0x000002cc JAL R62 $pc 0x149                               ;; [153, 248, 49, 73]
0x000002d0 EQ $writable R61 $zero                          ;; [19, 67, 208, 0]
0x000002d4 JNZF $writable $zero 0x3a                       ;; [118, 64, 0, 58]
0x000002d8 ADDI $writable R59 0x80                         ;; [80, 67, 176, 128]
0x000002dc MOVI R17 0x18                                   ;; [114, 68, 0, 24]
0x000002e0 MUL R17 $zero R17                               ;; [27, 68, 4, 64]
0x000002e4 ADD R17 $writable R17                           ;; [16, 69, 4, 64]
0x000002e8 ADDI $writable R17 0x8                          ;; [80, 65, 16, 8]
0x000002ec ADDI R17 R59 0x50                               ;; [80, 71, 176, 80]
0x000002f0 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x000002f4 LW $writable R59 0xa                            ;; [93, 67, 176, 10]
0x000002f8 EQ $writable $writable $zero                    ;; [19, 65, 0, 0]
0x000002fc JNZF $writable $zero 0x1                        ;; [118, 64, 0, 1]
0x00000300 RVRT $one                                       ;; [54, 4, 0, 0]
0x00000304 LW $writable R59 0xb                            ;; [93, 67, 176, 11]
0x00000308 MOVI R17 0x53a                                  ;; [114, 68, 5, 58]
0x0000030c EQ $writable $writable R17                      ;; [19, 65, 4, 64]
0x00000310 EQ $writable $writable $zero                    ;; [19, 65, 0, 0]
0x00000314 JNZF $writable $zero 0x28                       ;; [118, 64, 0, 40]
0x00000318 ADDI $writable R59 0x80                         ;; [80, 67, 176, 128]
0x0000031c MOVI R17 0x18                                   ;; [114, 68, 0, 24]
0x00000320 MUL R17 $one R17                                ;; [27, 68, 20, 64]
0x00000324 ADD R17 $writable R17                           ;; [16, 69, 4, 64]
0x00000328 MOVI $writable 0x10                             ;; [114, 64, 0, 16]
0x0000032c ADD $writable $writable R63                     ;; [16, 65, 15, 192]
0x00000330 ADDI R18 R59 0x20                               ;; [80, 75, 176, 32]
0x00000334 SW R59 $writable 0x4                            ;; [95, 237, 0, 4]
0x00000338 MOVI $writable 0x3                              ;; [114, 64, 0, 3]
0x0000033c SW R59 $writable 0x5                            ;; [95, 237, 0, 5]
0x00000340 ADDI $writable R59 0x30                         ;; [80, 67, 176, 48]
0x00000344 MCPI $writable R18 0x10                         ;; [96, 65, 32, 16]
0x00000348 ADDI $writable R59 0x30                         ;; [80, 67, 176, 48]
0x0000034c MOVE R58 R17                                    ;; [26, 233, 16, 0]
0x00000350 MOVE R57 $writable                              ;; [26, 229, 0, 0]
0x00000354 JAL R62 $pc 0x127                               ;; [153, 248, 49, 39]
0x00000358 EQ $writable R61 $zero                          ;; [19, 67, 208, 0]
0x0000035c JNZF $writable $zero 0x14                       ;; [118, 64, 0, 20]
0x00000360 ADDI $writable R59 0x80                         ;; [80, 67, 176, 128]
0x00000364 MOVI R17 0x18                                   ;; [114, 68, 0, 24]
0x00000368 MUL R17 $one R17                                ;; [27, 68, 20, 64]
0x0000036c ADD R17 $writable R17                           ;; [16, 69, 4, 64]
0x00000370 ADDI $writable R17 0x8                          ;; [80, 65, 16, 8]
0x00000374 ADDI R17 R59 0x60                               ;; [80, 71, 176, 96]
0x00000378 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x0000037c LW $writable R59 0xc                            ;; [93, 67, 176, 12]
0x00000380 EQ $writable $writable $one                     ;; [19, 65, 0, 64]
0x00000384 JNZF $writable $zero 0x2                        ;; [118, 64, 0, 2]
0x00000388 MOVI $writable 0x2                              ;; [114, 64, 0, 2]
0x0000038c RVRT $writable                                  ;; [54, 64, 0, 0]
0x00000390 LW $writable R59 0xd                            ;; [93, 67, 176, 13]
0x00000394 EQ $writable $writable $one                     ;; [19, 65, 0, 64]
0x00000398 EQ $writable $writable $zero                    ;; [19, 65, 0, 0]
0x0000039c JNZF $writable $zero 0x2                        ;; [118, 64, 0, 2]
0x000003a0 SW R20 $one 0x0                                 ;; [95, 80, 16, 0]
0x000003a4 JMPF $zero 0x8                                  ;; [116, 0, 0, 8]
0x000003a8 LW $writable R63 0x3                            ;; [93, 67, 240, 3]
0x000003ac RVRT $writable                                  ;; [54, 64, 0, 0]
0x000003b0 LW $writable R63 0x3                            ;; [93, 67, 240, 3]
0x000003b4 RVRT $writable                                  ;; [54, 64, 0, 0]
0x000003b8 LW $writable R63 0x3                            ;; [93, 67, 240, 3]
0x000003bc RVRT $writable                                  ;; [54, 64, 0, 0]
0x000003c0 LW $writable R63 0x3                            ;; [93, 67, 240, 3]
0x000003c4 RVRT $writable                                  ;; [54, 64, 0, 0]
0x000003c8 CFSI 0xb0                                       ;; [146, 0, 0, 176]
0x000003cc MOVE R62 R19                                    ;; [26, 249, 48, 0]
0x000003d0 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000003d4 POPL 0x3f                                       ;; [151, 0, 0, 63]
0x000003d8 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000003dc PSHL 0x1ff                                      ;; [149, 0, 1, 255]
0x000003e0 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000003e4 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000003e8 CFEI 0x3a8                                      ;; [145, 0, 3, 168]
0x000003ec MOVE R21 R57                                    ;; [26, 87, 144, 0]
0x000003f0 MOVE R20 R62                                    ;; [26, 83, 224, 0]
0x000003f4 ADDI $writable R59 0x310                        ;; [80, 67, 179, 16]
0x000003f8 MCPI $writable R58 0x30                         ;; [96, 67, 160, 48]
0x000003fc ADDI $writable R59 0x310                        ;; [80, 67, 179, 16]
0x00000400 ADDI R17 R59 0xf0                               ;; [80, 71, 176, 240]
0x00000404 MOVE R58 R17                                    ;; [26, 233, 16, 0]
0x00000408 JAL R62 $pc 0xd0                                ;; [153, 248, 48, 208]
0x0000040c ADDI R18 R59 0x340                              ;; [80, 75, 179, 64]
0x00000410 MCPI R18 $writable 0x30                         ;; [96, 73, 0, 48]
0x00000414 ADDI $writable R59 0x1c0                        ;; [80, 67, 177, 192]
0x00000418 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x0000041c ADDI $writable R59 0x1c0                        ;; [80, 67, 177, 192]
0x00000420 ADDI R17 R59 0x238                              ;; [80, 71, 178, 56]
0x00000424 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000428 MOVE R24 $zero                                  ;; [26, 96, 0, 0]
0x0000042c MOVI $writable 0x2                              ;; [114, 64, 0, 2]
0x00000430 LT $writable R24 $writable                      ;; [22, 65, 132, 0]
0x00000434 JNZF $writable $zero 0xc                        ;; [118, 64, 0, 12]
0x00000438 ADDI $writable R59 0x238                        ;; [80, 67, 178, 56]
0x0000043c ADDI R17 R59 0x1a8                              ;; [80, 71, 177, 168]
0x00000440 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000444 ADDI $writable R59 0x1a8                        ;; [80, 67, 177, 168]
0x00000448 ADDI R17 R59 0x178                              ;; [80, 71, 177, 120]
0x0000044c MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000450 ADDI $writable R59 0x108                        ;; [80, 67, 177, 8]
0x00000454 MOVE R58 R17                                    ;; [26, 233, 16, 0]
0x00000458 MOVE R57 $writable                              ;; [26, 229, 0, 0]
0x0000045c JAL R62 $pc 0xd1                                ;; [153, 248, 48, 209]
0x00000460 MCPI R21 $writable 0x10                         ;; [96, 85, 0, 16]
0x00000464 JMPF $zero 0x87                                 ;; [116, 0, 0, 135]
0x00000468 ADDI $writable R59 0x340                        ;; [80, 67, 179, 64]
0x0000046c MOVI R17 0x18                                   ;; [114, 68, 0, 24]
0x00000470 MUL R17 R24 R17                                 ;; [27, 69, 132, 64]
0x00000474 ADD R17 $writable R17                           ;; [16, 69, 4, 64]
0x00000478 ADDI $writable R59 0x238                        ;; [80, 67, 178, 56]
0x0000047c ADDI R18 R59 0x380                              ;; [80, 75, 179, 128]
0x00000480 MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x00000484 ADDI R17 R59 0x1d8                              ;; [80, 71, 177, 216]
0x00000488 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x0000048c ADDI $writable R59 0x380                        ;; [80, 67, 179, 128]
0x00000490 ADDI R17 R59 0x1d8                              ;; [80, 71, 177, 216]
0x00000494 ADDI R18 R59 0x370                              ;; [80, 75, 179, 112]
0x00000498 MCPI R18 $writable 0x8                          ;; [96, 73, 0, 8]
0x0000049c ADDI $writable R59 0x1f0                        ;; [80, 67, 177, 240]
0x000004a0 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x000004a4 ADDI $writable R59 0x370                        ;; [80, 67, 179, 112]
0x000004a8 ADDI R17 R59 0x1f0                              ;; [80, 71, 177, 240]
0x000004ac ADDI R18 R59 0x378                              ;; [80, 75, 179, 120]
0x000004b0 MCPI R18 $writable 0x8                          ;; [96, 73, 0, 8]
0x000004b4 ADDI $writable R59 0x208                        ;; [80, 67, 178, 8]
0x000004b8 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x000004bc ADDI $writable R59 0x208                        ;; [80, 67, 178, 8]
0x000004c0 MCPI R59 $writable 0x18                         ;; [96, 237, 0, 24]
0x000004c4 ADDI $writable R59 0x30                         ;; [80, 67, 176, 48]
0x000004c8 MCPI $writable R59 0x18                         ;; [96, 67, 176, 24]
0x000004cc LW $writable R59 0x6                            ;; [93, 67, 176, 6]
0x000004d0 LW R23 R59 0x7                                  ;; [93, 95, 176, 7]
0x000004d4 LW R17 R59 0x8                                  ;; [93, 71, 176, 8]
0x000004d8 ADDI R18 R59 0x378                              ;; [80, 75, 179, 120]
0x000004dc MOVI R19 0x3                                    ;; [114, 76, 0, 3]
0x000004e0 ADD R19 R17 R19                                 ;; [16, 77, 20, 192]
0x000004e4 GT R22 R19 R23                                  ;; [21, 89, 53, 192]
0x000004e8 JNZF R22 $zero 0x1                              ;; [118, 88, 0, 1]
0x000004ec JMPF $zero 0x7                                  ;; [116, 0, 0, 7]
0x000004f0 MOVI R22 0x2                                    ;; [114, 88, 0, 2]
0x000004f4 MUL R22 R23 R22                                 ;; [27, 89, 117, 128]
0x000004f8 MOVI R23 0x3                                    ;; [114, 92, 0, 3]
0x000004fc ADD R23 R22 R23                                 ;; [16, 93, 101, 192]
0x00000500 ALOC R23                                        ;; [38, 92, 0, 0]
0x00000504 MCP $hp $writable R17                           ;; [40, 29, 4, 64]
0x00000508 MOVE $writable $hp                              ;; [26, 64, 112, 0]
0x0000050c ADDI R22 R59 0x48                               ;; [80, 91, 176, 72]
0x00000510 MCPI R22 R18 0x8                                ;; [96, 89, 32, 8]
0x00000514 ADD R17 $writable R17                           ;; [16, 69, 4, 64]
0x00000518 MCPI R17 R22 0x3                                ;; [96, 69, 96, 3]
0x0000051c ADDI R17 R59 0x50                               ;; [80, 71, 176, 80]
0x00000520 SW R59 $writable 0xa                            ;; [95, 237, 0, 10]
0x00000524 SW R59 R23 0xb                                  ;; [95, 237, 112, 11]
0x00000528 SW R59 R19 0xc                                  ;; [95, 237, 48, 12]
0x0000052c ADDI $writable R59 0x18                         ;; [80, 67, 176, 24]
0x00000530 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000534 ADDI R17 R59 0x68                               ;; [80, 71, 176, 104]
0x00000538 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x0000053c ADDI $writable R59 0x268                        ;; [80, 67, 178, 104]
0x00000540 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000544 ADDI $writable R59 0x268                        ;; [80, 67, 178, 104]
0x00000548 ADDI R17 R59 0x250                              ;; [80, 71, 178, 80]
0x0000054c MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000550 ADDI $writable R59 0x380                        ;; [80, 67, 179, 128]
0x00000554 ADDI $writable $writable 0x8                    ;; [80, 65, 0, 8]
0x00000558 ADDI R17 R59 0x250                              ;; [80, 71, 178, 80]
0x0000055c ADDI R18 R59 0x398                              ;; [80, 75, 179, 152]
0x00000560 MCPI R18 $writable 0x10                         ;; [96, 73, 0, 16]
0x00000564 ADDI $writable R59 0x220                        ;; [80, 67, 178, 32]
0x00000568 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x0000056c ADDI $writable R59 0x398                        ;; [80, 67, 179, 152]
0x00000570 ADDI R17 R59 0x80                               ;; [80, 71, 176, 128]
0x00000574 MCPI R17 $writable 0x10                         ;; [96, 69, 0, 16]
0x00000578 LW $writable R59 0x10                           ;; [93, 67, 176, 16]
0x0000057c EQ $writable $writable $zero                    ;; [19, 65, 0, 0]
0x00000580 JNZF $writable $zero 0x1e                       ;; [118, 64, 0, 30]
0x00000584 LW $writable R59 0x10                           ;; [93, 67, 176, 16]
0x00000588 EQ $writable $writable $one                     ;; [19, 65, 0, 64]
0x0000058c JNZF $writable $zero 0x2                        ;; [118, 64, 0, 2]
0x00000590 LW $writable R63 0x4                            ;; [93, 67, 240, 4]
0x00000594 RVRT $writable                                  ;; [54, 64, 0, 0]
0x00000598 LW $writable R59 0x11                           ;; [93, 67, 176, 17]
0x0000059c ADDI R17 R59 0x220                              ;; [80, 71, 178, 32]
0x000005a0 ADDI R18 R59 0x148                              ;; [80, 75, 177, 72]
0x000005a4 MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x000005a8 ADDI R17 R59 0xc0                               ;; [80, 71, 176, 192]
0x000005ac MOVE R58 $one                                   ;; [26, 232, 16, 0]
0x000005b0 MOVE R57 R18                                    ;; [26, 229, 32, 0]
0x000005b4 MOVE R56 R17                                    ;; [26, 225, 16, 0]
0x000005b8 JAL R62 $pc 0x38                                ;; [153, 248, 48, 56]
0x000005bc ADDI R18 R59 0x2c8                              ;; [80, 75, 178, 200]
0x000005c0 MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x000005c4 ADDI R17 R59 0x2c8                              ;; [80, 71, 178, 200]
0x000005c8 ADDI R18 R59 0x160                              ;; [80, 75, 177, 96]
0x000005cc MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x000005d0 ADDI R17 R59 0xd8                               ;; [80, 71, 176, 216]
0x000005d4 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x000005d8 MOVE R57 R18                                    ;; [26, 229, 32, 0]
0x000005dc MOVE R56 R17                                    ;; [26, 225, 16, 0]
0x000005e0 JAL R62 $pc 0x2e                                ;; [153, 248, 48, 46]
0x000005e4 ADDI $writable R59 0x2e0                        ;; [80, 67, 178, 224]
0x000005e8 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x000005ec ADDI $writable R59 0x2e0                        ;; [80, 67, 178, 224]
0x000005f0 ADDI R17 R59 0x190                              ;; [80, 71, 177, 144]
0x000005f4 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x000005f8 JMPF $zero 0x18                                 ;; [116, 0, 0, 24]
0x000005fc LW $writable R59 0x11                           ;; [93, 67, 176, 17]
0x00000600 ADDI R17 R59 0x220                              ;; [80, 71, 178, 32]
0x00000604 ADDI R18 R59 0x118                              ;; [80, 75, 177, 24]
0x00000608 MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x0000060c ADDI R17 R59 0x90                               ;; [80, 71, 176, 144]
0x00000610 MOVE R58 $zero                                  ;; [26, 232, 0, 0]
0x00000614 MOVE R57 R18                                    ;; [26, 229, 32, 0]
0x00000618 MOVE R56 R17                                    ;; [26, 225, 16, 0]
0x0000061c JAL R62 $pc 0x1f                                ;; [153, 248, 48, 31]
0x00000620 ADDI R18 R59 0x280                              ;; [80, 75, 178, 128]
0x00000624 MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x00000628 ADDI R17 R59 0x280                              ;; [80, 71, 178, 128]
0x0000062c ADDI R18 R59 0x130                              ;; [80, 75, 177, 48]
0x00000630 MCPI R18 R17 0x18                               ;; [96, 73, 16, 24]
0x00000634 ADDI R17 R59 0xa8                               ;; [80, 71, 176, 168]
0x00000638 MOVE R58 $writable                              ;; [26, 233, 0, 0]
0x0000063c MOVE R57 R18                                    ;; [26, 229, 32, 0]
0x00000640 MOVE R56 R17                                    ;; [26, 225, 16, 0]
0x00000644 JAL R62 $pc 0x15                                ;; [153, 248, 48, 21]
0x00000648 ADDI $writable R59 0x2b0                        ;; [80, 67, 178, 176]
0x0000064c MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000650 ADDI $writable R59 0x2b0                        ;; [80, 67, 178, 176]
0x00000654 ADDI R17 R59 0x190                              ;; [80, 71, 177, 144]
0x00000658 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x0000065c ADDI $writable R59 0x2f8                        ;; [80, 67, 178, 248]
0x00000660 MCPI $writable R17 0x18                         ;; [96, 65, 16, 24]
0x00000664 ADDI $writable R59 0x2f8                        ;; [80, 67, 178, 248]
0x00000668 ADDI R17 R59 0x298                              ;; [80, 71, 178, 152]
0x0000066c MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000670 ADDI $writable R59 0x298                        ;; [80, 67, 178, 152]
0x00000674 ADDI R17 R59 0x238                              ;; [80, 71, 178, 56]
0x00000678 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x0000067c ADD R24 R24 $one                                ;; [16, 97, 128, 64]
0x00000680 JMPB $zero 0x94                                 ;; [117, 0, 0, 148]
0x00000684 CFSI 0x3a8                                      ;; [146, 0, 3, 168]
0x00000688 MOVE R62 R20                                    ;; [26, 249, 64, 0]
0x0000068c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000690 POPL 0x1ff                                      ;; [151, 0, 1, 255]
0x00000694 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000698 PSHL 0xff                                       ;; [149, 0, 0, 255]
0x0000069c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000006a0 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000006a4 CFEI 0x90                                       ;; [145, 0, 0, 144]
0x000006a8 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x000006ac MOVE R17 R56                                    ;; [26, 71, 128, 0]
0x000006b0 MOVE R18 R62                                    ;; [26, 75, 224, 0]
0x000006b4 ADDI R19 R59 0x78                               ;; [80, 79, 176, 120]
0x000006b8 MCPI R19 R57 0x18                               ;; [96, 79, 144, 24]
0x000006bc ADDI R19 R59 0x78                               ;; [80, 79, 176, 120]
0x000006c0 MCPI R59 R19 0x18                               ;; [96, 237, 48, 24]
0x000006c4 ADDI R19 R59 0x30                               ;; [80, 79, 176, 48]
0x000006c8 MCPI R19 R59 0x18                               ;; [96, 79, 176, 24]
0x000006cc LW R19 R59 0x6                                  ;; [93, 79, 176, 6]
0x000006d0 LW R23 R59 0x7                                  ;; [93, 95, 176, 7]
0x000006d4 LW R20 R59 0x8                                  ;; [93, 83, 176, 8]
0x000006d8 MOVI R21 0x8                                    ;; [114, 84, 0, 8]
0x000006dc ADD R21 R20 R21                                 ;; [16, 85, 69, 64]
0x000006e0 GT R22 R21 R23                                  ;; [21, 89, 85, 192]
0x000006e4 JNZF R22 $zero 0x1                              ;; [118, 88, 0, 1]
0x000006e8 JMPF $zero 0x7                                  ;; [116, 0, 0, 7]
0x000006ec MOVI R22 0x2                                    ;; [114, 88, 0, 2]
0x000006f0 MUL R22 R23 R22                                 ;; [27, 89, 117, 128]
0x000006f4 MOVI R23 0x8                                    ;; [114, 92, 0, 8]
0x000006f8 ADD R23 R22 R23                                 ;; [16, 93, 101, 192]
0x000006fc ALOC R23                                        ;; [38, 92, 0, 0]
0x00000700 MCP $hp R19 R20                                 ;; [40, 29, 53, 0]
0x00000704 MOVE R19 $hp                                    ;; [26, 76, 112, 0]
0x00000708 ADD R20 R19 R20                                 ;; [16, 81, 53, 0]
0x0000070c SW R20 $writable 0x0                            ;; [95, 81, 0, 0]
0x00000710 ADDI $writable R59 0x48                         ;; [80, 67, 176, 72]
0x00000714 SW R59 R19 0x9                                  ;; [95, 237, 48, 9]
0x00000718 SW R59 R23 0xa                                  ;; [95, 237, 112, 10]
0x0000071c SW R59 R21 0xb                                  ;; [95, 237, 80, 11]
0x00000720 ADDI R19 R59 0x18                               ;; [80, 79, 176, 24]
0x00000724 MCPI R19 $writable 0x18                         ;; [96, 77, 0, 24]
0x00000728 ADDI $writable R59 0x60                         ;; [80, 67, 176, 96]
0x0000072c MCPI $writable R19 0x18                         ;; [96, 65, 48, 24]
0x00000730 MCPI R17 $writable 0x18                         ;; [96, 69, 0, 24]
0x00000734 CFSI 0x90                                       ;; [146, 0, 0, 144]
0x00000738 MOVE R62 R18                                    ;; [26, 249, 32, 0]
0x0000073c POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000740 POPL 0xff                                       ;; [151, 0, 0, 255]
0x00000744 JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x00000748 PSHL 0xf                                        ;; [149, 0, 0, 15]
0x0000074c PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x00000750 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x00000754 CFEI 0x48                                       ;; [145, 0, 0, 72]
0x00000758 MOVE $writable R58                              ;; [26, 67, 160, 0]
0x0000075c MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000760 MOVI R18 0x400                                  ;; [114, 72, 4, 0]
0x00000764 ALOC R18                                        ;; [38, 72, 0, 0]
0x00000768 ADDI R18 R59 0x18                               ;; [80, 75, 176, 24]
0x0000076c SW R59 $hp 0x3                                  ;; [95, 236, 112, 3]
0x00000770 MOVI R19 0x400                                  ;; [114, 76, 4, 0]
0x00000774 SW R59 R19 0x4                                  ;; [95, 237, 48, 4]
0x00000778 SW R59 $zero 0x5                                ;; [95, 236, 0, 5]
0x0000077c MCPI R59 R18 0x18                               ;; [96, 237, 32, 24]
0x00000780 ADDI R18 R59 0x30                               ;; [80, 75, 176, 48]
0x00000784 MCPI R18 R59 0x18                               ;; [96, 75, 176, 24]
0x00000788 MCPI $writable R18 0x18                         ;; [96, 65, 32, 24]
0x0000078c CFSI 0x48                                       ;; [146, 0, 0, 72]
0x00000790 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000794 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000798 POPL 0xf                                        ;; [151, 0, 0, 15]
0x0000079c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000007a0 PSHL 0x1f                                       ;; [149, 0, 0, 31]
0x000007a4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000007a8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000007ac CFEI 0x38                                       ;; [145, 0, 0, 56]
0x000007b0 MOVE $writable R57                              ;; [26, 67, 144, 0]
0x000007b4 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x000007b8 ADDI R18 R59 0x20                               ;; [80, 75, 176, 32]
0x000007bc MCPI R18 R58 0x18                               ;; [96, 75, 160, 24]
0x000007c0 LW R18 R59 0x4                                  ;; [93, 75, 176, 4]
0x000007c4 LW R19 R59 0x6                                  ;; [93, 79, 176, 6]
0x000007c8 ADDI R20 R59 0x10                               ;; [80, 83, 176, 16]
0x000007cc SW R59 R18 0x2                                  ;; [95, 237, 32, 2]
0x000007d0 SW R59 R19 0x3                                  ;; [95, 237, 48, 3]
0x000007d4 MCPI R59 R20 0x10                               ;; [96, 237, 64, 16]
0x000007d8 MCPI $writable R59 0x10                         ;; [96, 67, 176, 16]
0x000007dc CFSI 0x38                                       ;; [146, 0, 0, 56]
0x000007e0 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x000007e4 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x000007e8 POPL 0x1f                                       ;; [151, 0, 0, 31]
0x000007ec JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
0x000007f0 PSHL 0xf                                        ;; [149, 0, 0, 15]
0x000007f4 PSHH 0x80000                                    ;; [150, 8, 0, 0]
0x000007f8 MOVE R59 $sp                                    ;; [26, 236, 80, 0]
0x000007fc CFEI 0x28                                       ;; [145, 0, 0, 40]
0x00000800 MOVE $writable R57                              ;; [26, 67, 144, 0]
0x00000804 MOVE R17 R62                                    ;; [26, 71, 224, 0]
0x00000808 ADDI R18 R59 0x10                               ;; [80, 75, 176, 16]
0x0000080c MCPI R18 R58 0x8                                ;; [96, 75, 160, 8]
0x00000810 ADDI R18 R59 0x18                               ;; [80, 75, 176, 24]
0x00000814 MCPI R18 $writable 0x10                         ;; [96, 73, 0, 16]
0x00000818 LW $writable R59 0x3                            ;; [93, 67, 176, 3]
0x0000081c LW R18 R59 0x4                                  ;; [93, 75, 176, 4]
0x00000820 SW R59 $writable 0x0                            ;; [95, 237, 0, 0]
0x00000824 SW R59 R18 0x1                                  ;; [95, 237, 32, 1]
0x00000828 LW $writable R59 0x0                            ;; [93, 67, 176, 0]
0x0000082c ADDI R18 R59 0x10                               ;; [80, 75, 176, 16]
0x00000830 MOVI R19 0x3                                    ;; [114, 76, 0, 3]
0x00000834 MEQ $writable R18 $writable R19                 ;; [41, 65, 36, 19]
0x00000838 MOVE R61 $writable                              ;; [26, 245, 0, 0]
0x0000083c CFSI 0x28                                       ;; [146, 0, 0, 40]
0x00000840 MOVE R62 R17                                    ;; [26, 249, 16, 0]
0x00000844 POPH 0x80000                                    ;; [152, 8, 0, 0]
0x00000848 POPL 0xf                                        ;; [151, 0, 0, 15]
0x0000084c JAL $zero R62 0x0                               ;; [153, 3, 224, 0]
.data_section:
0x00000850 .word i3647243719605075626, as hex be bytes ([32, 9D, 9C, D6, CC, 55, BE, AA])
0x00000858 .bytes as hex ([73, 65, 74]), len i3, as ascii "set"
0x00000860 .bytes as hex ([61, 64, 64]), len i3, as ascii "add"
0x00000868 .word i18446744073709486084, as hex be bytes ([FF, FF, FF, FF, FF, FF, 00, 04])
0x00000870 .word i14757395258967588866, as hex be bytes ([CC, CC, CC, CC, CC, CC, 00, 02])
;; --- END OF TARGET BYTECODE ---

    Finished release [optimized + fuel] target(s) [2.168 KB] in ???

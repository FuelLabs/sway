script;

use std::assert::{assert, require};
use std::constants::ZERO;
use std::chain::log_b256;

fn main() -> bool {
    let a: b256 = 0b1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001;

    let b: b256 = 0b0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001;

    let c: b256 = 0b0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001;

    let d: b256 = 0b1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000;

    let e: b256 = 0b1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001;

    let f: b256 = 0b1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000;

    let g: b256 = 0b0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000;

    //0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001
    let b256_1: b256 = 0x1111111111111111111111111111111111111111111111111111111111111111;

    // 0010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010
    let b256_2: b256 = 0x2222222222222222222222222222222222222222222222222222222222222222;

    //0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011
    let b256_3: b256 = 0x3333333333333333333333333333333333333333333333333333333333333333;

    // 0100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100
    let b256_4: b256 = 0x4444444444444444444444444444444444444444444444444444444444444444;

    // 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
    let b256_5: b256 = 0x5555555555555555555555555555555555555555555555555555555555555555;
    let b256_F: b256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

    assert(a & b == c);
    assert(a & c == c);
    assert(b & c == c);
    assert(a & d == f);
    assert(f & e == f);
    assert(b & d == g);
    assert(b256_F & b256_3 == b256_3);
    assert(b256_1 & b256_2 == ZERO);
    assert(b256_F & b256_2 == b256_2);

    assert(a | g == e);
    assert(a | d == e);
    assert(a | c == a);
    assert(c | f == a);
    assert(c | d == e);
    assert(b256_1 | b256_2 == b256_3);
    assert(b256_1 | b256_4 == b256_5);
    assert(b256_2 | b256_3 == b256_3);

    assert(a ^ b == d);
    assert(a ^ g == e);
    assert(b ^ d == a);
    assert(f ^ g == d);
    assert(b256_1 ^ b256_2 == b256_3);
    assert(b256_2 ^ b256_3 == b256_1);
    assert(b256_1 ^ b256_3 == b256_2);


    // require(b256_F << 1 == 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE, 1);
    // require(b256_F >> 1 == 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF, 2);

    let one: b256 = 0b0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000001;
    let two: b256 = 0b0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000010;

    let g: b256 = 0b0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000000;

    let h: b256 = 0b0000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000;

    let saturated: b256 =
    0b1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111_1111111111111111;

    let highest_bit_only: b256 = 0b1000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000_0000000000000000;

    assert(one >> 1 == ZERO);
    assert(one << 1 == two);
    assert(two << 1 == 0x0000000000000000000000000000000000000000000000000000000000000004);
    assert(f << 1 == g);
    assert(c >> 1 == h);
    assert(0x0000000000000000000000000000000000000000000000000000000000000001 << 10 == 0x0000000000000000000000000000000000000000000000000000000000000400);
    assert(0x000000000000000000000000000000000000000000000000000000000AB1142C >> 3 == 0x0000000000000000000000000000000000000000000000000000000001562285);
    log_b256(saturated);
    log_b256(highest_bit_only);
    log_b256(saturated << 255);
    assert(saturated << 255 == highest_bit_only);

    true
}

/**
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110

0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

0x5555555555555555555555555555555555555555555555555555555555555555:

0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101

 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00110101 00110101
 00110101 00110101 00110101 00110101 00001010

 0xFEABDC0000000000000000000000000000000000000000000000000000000000

*/


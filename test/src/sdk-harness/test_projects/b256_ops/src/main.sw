script;

use std::assert::{assert, require};
use std::constants::ZERO;

fn main() -> bool {
    let a: b256 = 0b1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001;

    let b: b256 = 0b0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001;

    let c: b256 = 0b0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001;

    let d: b256 = 0b1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000;

    let e: b256 = 0b1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001;

    let f: b256 = 0b1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000;

    let g: b256 = 0b0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_;

    //0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001
    let b256_1: b256 = 0x1111111111111111111111111111111111111111111111111111111111111111;

    // 0010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010
    let b256_2: b256 = 0x2222222222222222222222222222222222222222222222222222222222222222;

    //0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011
    let b256_3: b256 = 0x3333333333333333333333333333333333333333333333333333333333333333;

    // 0100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100
    let b256_4: b256 = 0x4444444444444444444444444444444444444444444444444444444444444444;

    // 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
    let b256_5: b256 = 0x5555555555555555555555555555555555555555555555555555555555555555;

    let b256_F: b256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

    assert(a & b == c);
    assert(a & c == c);
    assert(b & c == c);
    assert(a & d == f);
    assert(f & e == f);
    assert(b & d == g);
    assert(b256_F & b256_3 == b256_3);
    assert(b256_1 & b256_2 == ZERO);
    assert(b256_F & b256_2 == b256_2);

    assert(a | g == e);
    assert(a | d == e);
    assert(a | c == a);
    assert(c | f == a);
    assert(c | d == e);
    assert(b256_1 | b256_2 == b256_3);
    assert(b256_1 | b256_4 == b256_5);
    assert(b256_2 | b256_3 == b256_3);

    assert(a ^ b == d);
    assert(a ^ g == e);
    assert(b ^ d == a);
    assert(f ^ g == d);
    assert(b256_1 ^ b256_2 == b256_3);
    assert(b256_2 ^ b256_3 == b256_1);
    assert(b256_1 ^ b256_3 == b256_2);

    true
}

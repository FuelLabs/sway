warning: /Users/alexanderhansen/code/fuel-vm-hll/forc/Cargo.toml: unused manifest key: package.rust
warning: /Users/alexanderhansen/code/fuel-vm-hll/core_lang/Cargo.toml: unused manifest key: package.rust
    Finished dev [unoptimized + debuginfo] target(s) in 0.02s
     Running `/Users/alexanderhansen/code/fuel-vm-hll/target/debug/test_suite`
Compiling script_1
[0m[32mCompiled library "stdlib".
yo
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:607] parent_expr.clone() = TypedExpression {
    expression: VariableExpression {
        unary_op: None,
        name: Ident {
            primary_name: "self",
            span: Span {
                str: "self",
                start: 537,
                end: 541,
            },
        },
    },
    return_type: Resolved(
        Enum {
            name: Ident {
                primary_name: "PrimaryColor",
                span: Span {
                    str: "PrimaryColor",
                    start: 165,
                    end: 177,
                },
            },
            variant_types: [
                Unit,
                Unit,
                Unit,
            ],
        },
    ),
    is_constant: No,
    span: Span {
        str: "self",
        start: 537,
        end: 541,
    },
}
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:627] typed_arg_buf = [
    (
        Ident {
            primary_name: "self",
            span: Span {
                str: "self",
                start: 289,
                end: 293,
            },
        },
        TypedExpression {
            expression: VariableExpression {
                unary_op: None,
                name: Ident {
                    primary_name: "self",
                    span: Span {
                        str: "self",
                        start: 537,
                        end: 541,
                    },
                },
            },
            return_type: Resolved(
                Enum {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    variant_types: [
                        Unit,
                        Unit,
                        Unit,
                    ],
                },
            ),
            is_constant: No,
            span: Span {
                str: "self",
                start: 537,
                end: 541,
            },
        },
    ),
    (
        Ident {
            primary_name: "other",
            span: Span {
                str: "other",
                start: 295,
                end: 300,
            },
        },
        TypedExpression {
            expression: EnumInstantiation {
                enum_decl: TypedEnumDeclaration {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    type_parameters: [],
                    variants: [
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Red",
                                span: Span {
                                    str: "Red",
                                    start: 187,
                                    end: 190,
                                },
                            },
                            type: Unit,
                            tag: 0,
                            span: Span {
                                str: "Red",
                                start: 187,
                                end: 190,
                            },
                        },
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Green",
                                span: Span {
                                    str: "Green",
                                    start: 204,
                                    end: 209,
                                },
                            },
                            type: Unit,
                            tag: 1,
                            span: Span {
                                str: "Green",
                                start: 204,
                                end: 209,
                            },
                        },
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Blue",
                                span: Span {
                                    str: "Blue",
                                    start: 223,
                                    end: 227,
                                },
                            },
                            type: Unit,
                            tag: 2,
                            span: Span {
                                str: "Blue",
                                start: 223,
                                end: 227,
                            },
                        },
                    ],
                    span: Span {
                        str: "enum PrimaryColor {\n       Red : (),\n       Green : (),\n       Blue : ()\n    }",
                        start: 160,
                        end: 238,
                    },
                },
                variant_name: Ident {
                    primary_name: "Red",
                    span: Span {
                        str: "Red",
                        start: 187,
                        end: 190,
                    },
                },
                tag: 0,
                contents: None,
            },
            return_type: Resolved(
                Enum {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    variant_types: [
                        Unit,
                        Unit,
                        Unit,
                    ],
                },
            ),
            is_constant: No,
            span: Span {
                str: "Red",
                start: 559,
                end: 562,
            },
        },
    ),
]
yo
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:607] parent_expr.clone() = TypedExpression {
    expression: VariableExpression {
        unary_op: None,
        name: Ident {
            primary_name: "self",
            span: Span {
                str: "self",
                start: 657,
                end: 661,
            },
        },
    },
    return_type: Resolved(
        Enum {
            name: Ident {
                primary_name: "PrimaryColor",
                span: Span {
                    str: "PrimaryColor",
                    start: 165,
                    end: 177,
                },
            },
            variant_types: [
                Unit,
                Unit,
                Unit,
            ],
        },
    ),
    is_constant: No,
    span: Span {
        str: "self",
        start: 657,
        end: 661,
    },
}
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:627] typed_arg_buf = [
    (
        Ident {
            primary_name: "self",
            span: Span {
                str: "self",
                start: 289,
                end: 293,
            },
        },
        TypedExpression {
            expression: VariableExpression {
                unary_op: None,
                name: Ident {
                    primary_name: "self",
                    span: Span {
                        str: "self",
                        start: 657,
                        end: 661,
                    },
                },
            },
            return_type: Resolved(
                Enum {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    variant_types: [
                        Unit,
                        Unit,
                        Unit,
                    ],
                },
            ),
            is_constant: No,
            span: Span {
                str: "self",
                start: 657,
                end: 661,
            },
        },
    ),
    (
        Ident {
            primary_name: "other",
            span: Span {
                str: "other",
                start: 295,
                end: 300,
            },
        },
        TypedExpression {
            expression: EnumInstantiation {
                enum_decl: TypedEnumDeclaration {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    type_parameters: [],
                    variants: [
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Red",
                                span: Span {
                                    str: "Red",
                                    start: 187,
                                    end: 190,
                                },
                            },
                            type: Unit,
                            tag: 0,
                            span: Span {
                                str: "Red",
                                start: 187,
                                end: 190,
                            },
                        },
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Green",
                                span: Span {
                                    str: "Green",
                                    start: 204,
                                    end: 209,
                                },
                            },
                            type: Unit,
                            tag: 1,
                            span: Span {
                                str: "Green",
                                start: 204,
                                end: 209,
                            },
                        },
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Blue",
                                span: Span {
                                    str: "Blue",
                                    start: 223,
                                    end: 227,
                                },
                            },
                            type: Unit,
                            tag: 2,
                            span: Span {
                                str: "Blue",
                                start: 223,
                                end: 227,
                            },
                        },
                    ],
                    span: Span {
                        str: "enum PrimaryColor {\n       Red : (),\n       Green : (),\n       Blue : ()\n    }",
                        start: 160,
                        end: 238,
                    },
                },
                variant_name: Ident {
                    primary_name: "Green",
                    span: Span {
                        str: "Green",
                        start: 204,
                        end: 209,
                    },
                },
                tag: 1,
                contents: None,
            },
            return_type: Resolved(
                Enum {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    variant_types: [
                        Unit,
                        Unit,
                        Unit,
                    ],
                },
            ),
            is_constant: No,
            span: Span {
                str: "Green",
                start: 679,
                end: 684,
            },
        },
    ),
]
yo
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:607] parent_expr.clone() = TypedExpression {
    expression: VariableExpression {
        unary_op: None,
        name: Ident {
            primary_name: "self",
            span: Span {
                str: "self",
                start: 778,
                end: 782,
            },
        },
    },
    return_type: Resolved(
        Enum {
            name: Ident {
                primary_name: "PrimaryColor",
                span: Span {
                    str: "PrimaryColor",
                    start: 165,
                    end: 177,
                },
            },
            variant_types: [
                Unit,
                Unit,
                Unit,
            ],
        },
    ),
    is_constant: No,
    span: Span {
        str: "self",
        start: 778,
        end: 782,
    },
}
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:627] typed_arg_buf = [
    (
        Ident {
            primary_name: "self",
            span: Span {
                str: "self",
                start: 289,
                end: 293,
            },
        },
        TypedExpression {
            expression: VariableExpression {
                unary_op: None,
                name: Ident {
                    primary_name: "self",
                    span: Span {
                        str: "self",
                        start: 778,
                        end: 782,
                    },
                },
            },
            return_type: Resolved(
                Enum {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    variant_types: [
                        Unit,
                        Unit,
                        Unit,
                    ],
                },
            ),
            is_constant: No,
            span: Span {
                str: "self",
                start: 778,
                end: 782,
            },
        },
    ),
    (
        Ident {
            primary_name: "other",
            span: Span {
                str: "other",
                start: 295,
                end: 300,
            },
        },
        TypedExpression {
            expression: EnumInstantiation {
                enum_decl: TypedEnumDeclaration {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    type_parameters: [],
                    variants: [
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Red",
                                span: Span {
                                    str: "Red",
                                    start: 187,
                                    end: 190,
                                },
                            },
                            type: Unit,
                            tag: 0,
                            span: Span {
                                str: "Red",
                                start: 187,
                                end: 190,
                            },
                        },
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Green",
                                span: Span {
                                    str: "Green",
                                    start: 204,
                                    end: 209,
                                },
                            },
                            type: Unit,
                            tag: 1,
                            span: Span {
                                str: "Green",
                                start: 204,
                                end: 209,
                            },
                        },
                        TypedEnumVariant {
                            name: Ident {
                                primary_name: "Blue",
                                span: Span {
                                    str: "Blue",
                                    start: 223,
                                    end: 227,
                                },
                            },
                            type: Unit,
                            tag: 2,
                            span: Span {
                                str: "Blue",
                                start: 223,
                                end: 227,
                            },
                        },
                    ],
                    span: Span {
                        str: "enum PrimaryColor {\n       Red : (),\n       Green : (),\n       Blue : ()\n    }",
                        start: 160,
                        end: 238,
                    },
                },
                variant_name: Ident {
                    primary_name: "Blue",
                    span: Span {
                        str: "Blue",
                        start: 223,
                        end: 227,
                    },
                },
                tag: 2,
                contents: None,
            },
            return_type: Resolved(
                Enum {
                    name: Ident {
                        primary_name: "PrimaryColor",
                        span: Span {
                            str: "PrimaryColor",
                            start: 165,
                            end: 177,
                        },
                    },
                    variant_types: [
                        Unit,
                        Unit,
                        Unit,
                    ],
                },
            ),
            is_constant: No,
            span: Span {
                str: "Blue",
                start: 800,
                end: 804,
            },
        },
    ),
]
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:589] None = None
[core_lang/src/semantic_analysis/ast_node/expression/typed_expression.rs:627] typed_arg_buf = []
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m13 |
[m[1m[38;5;12m14 | [m    enum PrimaryColor {
[m[1m[38;5;12m15 | [m       Red : (),                                 
   [1m[38;5;12m|        [1m[38;5;11m^^^ Enum variant Red is never constructed.
[m[1m[38;5;12m16 | [m       Green : (),
[m[1m[38;5;12m17 | [m       Blue : ()
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m15 | [m       Red : (),
[m[1m[38;5;12m16 | [m       Green : (),
[m[1m[38;5;12m17 | [m       Blue : ()                                   
   [1m[38;5;12m|        [1m[38;5;11m^^^^ Enum variant Blue is never constructed.
[m[1m[38;5;12m18 | [m    }
[m[1m[38;5;12m19 |
[m
 
[m[1m[38;5;12m.. |
[m [1m[38;5;12m2 |   [muse std::*;
[m [1m[38;5;12m3 |   [muse std::ops::Eq;
[m [1m[38;5;12m4 | [1m[38;5;11m/ [m  struct Rgb {
[m [1m[38;5;12m5 | [1m[38;5;11m| [m    red: u64,
[m [1m[38;5;12m6 | [1m[38;5;11m| [m    green: u64,
[m [1m[38;5;12m7 | [1m[38;5;11m| [m    blue: u64,
[m [1m[38;5;12m8 | [1m[38;5;11m| [m  }                                   
   [1m[38;5;12m| [1m[38;5;11m|___^ This struct is never instantiated.
[m [1m[38;5;12m9 |
[m[1m[38;5;12m10 |   [m    trait Color {
[m
 
[m[1m[38;5;12m.. |
[m [1m[38;5;12m8 | [m  }
[m [1m[38;5;12m9 |
[m[1m[38;5;12m10 | [m    trait Color {                               
   [1m[38;5;12m|           [1m[38;5;11m^^^^^ This trait is never implemented.
[m[1m[38;5;12m11 | [m      fn rgb(self) -> Rgb;
[m[1m[38;5;12m12 | [m    }
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m13 |
[m[1m[38;5;12m14 | [m    enum PrimaryColor {
[m[1m[38;5;12m15 | [m       Red : (),                                 
   [1m[38;5;12m|        [1m[38;5;11m^^^ Enum variant Red is never constructed.
[m[1m[38;5;12m16 | [m       Green : (),
[m[1m[38;5;12m17 | [m       Blue : ()
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m15 | [m       Red : (),
[m[1m[38;5;12m16 | [m       Green : (),
[m[1m[38;5;12m17 | [m       Blue : ()                                   
   [1m[38;5;12m|        [1m[38;5;11m^^^^ Enum variant Blue is never constructed.
[m[1m[38;5;12m18 | [m    }
[m[1m[38;5;12m19 |
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m18 |   [m    }
[m[1m[38;5;12m19 |
[m[1m[38;5;12m20 | [1m[38;5;11m/ [mimpl std::ops::Eq for PrimaryColor {
[m[1m[38;5;12m21 | [1m[38;5;11m| [m  fn equals(self, other: Self) -> bool {
[m[1m[38;5;12m22 | [1m[38;5;11m| [m   asm(r1: self, r2: other, r3) {
[m[1m[38;5;12m.. | [1m[38;5;11m|
[m[1m[38;5;12m25 | [1m[38;5;11m| [m    }
[m[1m[38;5;12m26 | [1m[38;5;11m| [m  }
[m[1m[38;5;12m27 | [1m[38;5;11m| [m}                          
   [1m[38;5;12m| [1m[38;5;11m|_^ This code is unreachable.
[m[1m[38;5;12m28 |   [mimpl Color for PrimaryColor {
[m[1m[38;5;12m29 |   [m  // TODO: when we support match statements, change this to a match statement
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m26 |   [m  }
[m[1m[38;5;12m27 |   [m}
[m[1m[38;5;12m28 | [1m[38;5;11m/ [mimpl Color for PrimaryColor {
[m[1m[38;5;12m29 | [1m[38;5;11m| [m  // TODO: when we support match statements, change this to a match statement
[m[1m[38;5;12m30 | [1m[38;5;11m| [m  fn rgb(self) -> Rgb {
[m[1m[38;5;12m.. | [1m[38;5;11m|
[m[1m[38;5;12m59 | [1m[38;5;11m| [m     }
[m[1m[38;5;12m60 | [1m[38;5;11m| [m   }
[m[1m[38;5;12m61 | [1m[38;5;11m| [m}                          
   [1m[38;5;12m| [1m[38;5;11m|_^ This code is unreachable.
[m[1m[38;5;12m62 |
[m[1m[38;5;12m63 |   [m  fn main() {
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m29 | [m  // TODO: when we support match statements, change this to a match statement
[m[1m[38;5;12m30 | [m  fn rgb(self) -> Rgb {
[m[1m[38;5;12m31 | [m    if self == PrimaryColor::Red {                                                                                                
   [1m[38;5;12m|        [1m[38;5;9m^^^^ Internal compiler error: Unknown variable in assembly generation. This should have been an error during type checking.
   [1m[38;5;12m|             [1m[38;5;9mPlease file an issue on the repository and include the code that triggered this error.                                
[m[1m[38;5;12m32 | [m      Rgb { 
[m[1m[38;5;12m33 | [m        red: 255,
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m20 | [mimpl std::ops::Eq for PrimaryColor {
[m[1m[38;5;12m21 | [m  fn equals(self, other: Self) -> bool {
[m[1m[38;5;12m22 | [m   asm(r1: self, r2: other, r3) {                                                                                                     
   [1m[38;5;12m|            [1m[38;5;9m^^^^ Internal compiler error: Unknown variable in assembly generation. This should have been an error during type checking.
   [1m[38;5;12m|                 [1m[38;5;9mPlease file an issue on the repository and include the code that triggered this error.                                
[m[1m[38;5;12m23 | [m      eq r3 r1 r2;
[m[1m[38;5;12m24 | [m      r3: bool
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m36 | [m      }
[m[1m[38;5;12m37 | [m    }
[m[1m[38;5;12m38 | [m    else if self == PrimaryColor::Green {                                                                                              
   [1m[38;5;12m|             [1m[38;5;9m^^^^ Internal compiler error: Unknown variable in assembly generation. This should have been an error during type checking.
   [1m[38;5;12m|                  [1m[38;5;9mPlease file an issue on the repository and include the code that triggered this error.                                
[m[1m[38;5;12m39 | [m      Rgb {
[m[1m[38;5;12m40 | [m        red: 0,
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m20 | [mimpl std::ops::Eq for PrimaryColor {
[m[1m[38;5;12m21 | [m  fn equals(self, other: Self) -> bool {
[m[1m[38;5;12m22 | [m   asm(r1: self, r2: other, r3) {                                                                                                     
   [1m[38;5;12m|            [1m[38;5;9m^^^^ Internal compiler error: Unknown variable in assembly generation. This should have been an error during type checking.
   [1m[38;5;12m|                 [1m[38;5;9mPlease file an issue on the repository and include the code that triggered this error.                                
[m[1m[38;5;12m23 | [m      eq r3 r1 r2;
[m[1m[38;5;12m24 | [m      r3: bool
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m43 | [m      }
[m[1m[38;5;12m44 | [m    }
[m[1m[38;5;12m45 | [m    else if self == PrimaryColor::Blue {                                                                                               
   [1m[38;5;12m|             [1m[38;5;9m^^^^ Internal compiler error: Unknown variable in assembly generation. This should have been an error during type checking.
   [1m[38;5;12m|                  [1m[38;5;9mPlease file an issue on the repository and include the code that triggered this error.                                
[m[1m[38;5;12m46 | [m      Rgb {
[m[1m[38;5;12m47 | [m        red: 0,
[m
 
[m[1m[38;5;12m.. |
[m[1m[38;5;12m20 | [mimpl std::ops::Eq for PrimaryColor {
[m[1m[38;5;12m21 | [m  fn equals(self, other: Self) -> bool {
[m[1m[38;5;12m22 | [m   asm(r1: self, r2: other, r3) {                                                                                                     
   [1m[38;5;12m|            [1m[38;5;9m^^^^ Internal compiler error: Unknown variable in assembly generation. This should have been an error during type checking.
   [1m[38;5;12m|                 [1m[38;5;9mPlease file an issue on the repository and include the code that triggered this error.                                
[m[1m[38;5;12m23 | [m      eq r3 r1 r2;
[m[1m[38;5;12m24 | [m      r3: bool
[m
[0m[31mAborting due to 6 errors.
Project "script_1" failed to compile. 
Failure: script_1 should have compiled.
thread 'main' panicked at 'assertion failed: project_names.into_iter().all(|name|\n                                  {\n                                      let result =\n                                          crate::basic_compilation_tests::harness::should_compile(name);\n                                      if !result {\n                                          println!(\"Failure: {} should have compiled.\",\n                                                   name);\n                                          false\n                                      } else { true }\n                                  })', test_suite/src/basic_compilation_tests/test_cases.rs:3:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

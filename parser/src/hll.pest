// tweakable things
var_decl_keyword    =  {"let"}
fn_decl_keyword     =  {"fn"}
trait_decl_keyword  =  {"trait"}
return_keyword      =  {"return"}
use_keyword         =  {"use"}
match_keyword =    {"match"}
mut_keyword = { "mut" }
assign              = _{"="}
line_comment_open   =  {"//"}
block_comment_open  =  {"/*"}
block_comment_close =  {"*/"}
fn_returns          =  {":"}
path_separator      =  {"::"}


// top level
program =  {SOI ~ (contract|script|predicate)* ~ EOI}

contract = { "contract" ~ "{" ~ (declaration|use_statement)* ~ "}" }
script = { "script" ~ "{" ~ (declaration|use_statement)* ~ "}" }
predicate = { "predicate" ~ "{" ~ (declaration|use_statement)* ~ "}" }

// expressions
expr_inner =  _{literal_value|if_exp|"(" ~ expr ~ ")"|func_app|struct_expression|var_exp|array_exp|match_expression}
// // op exps built in to expr to prevent left recursion
expr       =  {expr_inner ~ (op ~ expr_inner)*}
func_app   =  { fn_name ~ "(" ~ (expr ~ ("," ~ expr)* )? ~ ")" }
fn_name    = @{var_exp}
var_exp    =  { unary_op? ~ var_name_ident } 

var_name_ident = { ident ~ ("." ~ ident)* }

if_exp =  {"if" ~ expr ~ "then" ~ code_block ~ ("else" ~ code_block)?}

op =  {"+"|"-"|"/"|"*"|"=="|"!="|"|"|"||"|"&"|"&&"|"^"|"%"}
unary_op = { "!" | "ref" | "deref" }

// // note that decimal/float exprs might be removed since vm doesn't support them
literal_value =  {integer|byte|string|boolean}

boolean =  {"true"|"false"}
string  = ${"\"" ~ char* ~ "\""}
integer = { (u8_integer | u16_integer | u32_integer | u64_integer) }
basic_integer = @{!("0b" | "0x") ~ ASCII_DIGIT+}
u8_integer = {  basic_integer ~ "u8" }
u16_integer = { basic_integer ~ "u16" }
u32_integer = { basic_integer ~ "u32" }
// default is u64
u64_integer = { basic_integer ~ "u64"? }
byte = { binary_byte | hex_byte }
binary_byte = @{ "0b" ~ ("1" | "0")*}
hex_byte    = @{ "0x" ~ hex_digit* }
hex_digit = { "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" | ASCII_DIGIT } 
match_expression = { "match"  ~ expr ~ "{" ~ match_branch+ ~ "}" }
match_branch = { match_condition ~ "=>" ~ (code_block | expr) ~ "," }
match_condition = { expr | "_" } // TODO this doesn't support pattern matching

code_block =  {"{" ~ (declaration|return_statement|expr_statement)* ~ (expr)? ~ "}"}

struct_expression = { struct_name ~ "{" ~ struct_expr_fields ~ "}" }
struct_expr_fields = { struct_field_name ~ ":" ~ expr ~ ("," ~ struct_field_name ~ ":" ~ expr)* ~ ","? }
array_exp = { "[" ~ (expr ~ ("," ~ expr)*) ~ "]" }

// declarations 
declaration =  {(var_decl|fn_decl|trait_decl|struct_decl)}
var_decl    =  {var_decl_keyword ~ mut_keyword? ~ var_name ~ type_ascription? ~ assign ~ expr ~ ";"}
type_ascription = { ":" ~ type_name}
fn_decl     =  {fn_signature ~ code_block}
fn_signature = { fn_decl_keyword ~ fn_decl_name ~ type_params? ~ fn_decl_params ~ (fn_returns ~ return_type)? ~ trait_bounds? }
var_name = @{ident}

struct_decl = { "struct" ~ struct_name ~ type_params? ~ trait_bounds? ~ "{" ~ struct_fields ~ "}" }
struct_name = @{ident}
struct_fields = { struct_field_name ~ ":" ~ type_name ~ ("," ~ struct_field_name ~ ":" ~ type_name)* ~ ","? }
struct_field_name = @{ident}

// // fn declaration
fn_decl_params =  {"(" ~ (fn_decl_param ~ ("," ~ fn_decl_param)*)? ~ ")"}
type_params = { "<" ~ generic_type_param ~ (", " ~ generic_type_param)* ~ ">" }
fn_decl_param  =  {("self")? ~ ident ~ ":" ~ type_name}
return_type    =  {ident}
fn_decl_name   =  @{ident}
type_name      =  @{ident}
trait_bounds   =  { "where" ~ (generic_type_param ~ ":" ~ trait_name) ~ ("," ~ generic_type_param ~ ":" ~ trait_name)* }
generic_type_param = @{ident}

// statements
// // statements are basically non-expressions that don't alter the namespace like declarations do
return_statement =  {return_keyword ~ expr? ~ ";"}
expr_statement  = { expr ~ ";" }

// traits
trait_decl = { trait_decl_keyword ~ trait_name ~  trait_methods  }
// // just a fn signature denotes a fn something must implement in order for it to be part of the trait
// // i like the idea of separating the interface points from the actual
// // functional implementations the trait provides, so i have them
// // parsed as two separate blocks here.
// // this can of course be changed if others dislike it.
trait_methods = { "{" ~ fn_signature* ~ "}" ~ ("{"~ fn_decl* ~ "}")* }
trait_name = @{ ident } 

// imports
use_statement = { use_keyword ~ import_path ~ ";"}
import_path = { ident ~ (path_separator ~ ident)* }

// boilerplate
WHITESPACE    = _{(" "|"\t"|"\r"|"\n")+}
COMMENT       = _{block_comment|line_comment}
block_comment = @{block_comment_open ~ (!block_comment_close ~ ANY)* ~ block_comment_close}
line_comment  = @{line_comment_open ~ (!("\r"|"\n") ~ ANY)*}
char          =  @{
    !("\""|"\\") ~ ANY
  | "\\" ~ ("\""|"\\"|"/"|"b"|"f"|"n"|"r"|"t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
ident          = @{!(reserved_words) ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC|"_")*}
reserved_words = { match_keyword | use_keyword | var_decl_keyword | fn_decl_keyword | trait_decl_keyword | return_keyword } 

